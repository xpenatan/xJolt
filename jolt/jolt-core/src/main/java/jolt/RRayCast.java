/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt;

import jolt.idl.IDLBase;
import jolt.math.Vec3;
import jolt.math.Mat44;

public class RRayCast extends IDLBase {

    private RRayCast RRayCast_TEMP_GEN_0;

    private RRayCast RRayCast_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_2;

    static public final RRayCast T_01 = new RRayCast((byte) 1, (char) 1);

    static public final RRayCast T_02 = new RRayCast((byte) 1, (char) 1);

    static public final RRayCast T_03 = new RRayCast((byte) 1, (char) 1);

    public RRayCast() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new RRayCast();
*/
    public static native long internal_native_create();

    public RRayCast(Vec3 inOrigin, Vec3 inDirection) {
        long addr = internal_native_create_Vec3_Vec3((inOrigin != null ? inOrigin.native_address : 0), (inDirection != null ? inDirection.native_address : 0));
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new RRayCast(*((Vec3* )inOrigin_addr), *((Vec3* )inDirection_addr));
*/
    public static native long internal_native_create_Vec3_Vec3(long inOrigin_addr, long inDirection_addr);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public RRayCast(byte b, char c) {
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
RRayCast* nativeObject = (RRayCast*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public RRayCast Transformed(Mat44 inTransform) {
        long pointer = internal_native_Transformed(native_address, (inTransform != null ? inTransform.native_address : 0));
        if (pointer == 0)
            return null;
        if (RRayCast_TEMP_GEN_0 == null)
            RRayCast_TEMP_GEN_0 = new RRayCast((byte) 1, (char) 1);
        RRayCast_TEMP_GEN_0.internal_reset(pointer, false);
        return RRayCast_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
RRayCast* nativeObject = (RRayCast*)this_addr;
static RRayCast copy_addr;
copy_addr = nativeObject->Transformed(*((Mat44* )inTransform_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_Transformed(long this_addr, long inTransform_addr);

    public RRayCast Translated(Vec3 inTranslation) {
        long pointer = internal_native_Translated(native_address, (inTranslation != null ? inTranslation.native_address : 0));
        if (pointer == 0)
            return null;
        if (RRayCast_TEMP_GEN_1 == null)
            RRayCast_TEMP_GEN_1 = new RRayCast((byte) 1, (char) 1);
        RRayCast_TEMP_GEN_1.internal_reset(pointer, false);
        return RRayCast_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
RRayCast* nativeObject = (RRayCast*)this_addr;
static RRayCast copy_addr;
copy_addr = nativeObject->Translated(*((Vec3* )inTranslation_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_Translated(long this_addr, long inTranslation_addr);

    public Vec3 GetPointOnRay(float inFraction) {
        long pointer = internal_native_GetPointOnRay(native_address, inFraction);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
RRayCast* nativeObject = (RRayCast*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetPointOnRay((float)inFraction);
return (jlong)&copy_addr;*/
    public static native long internal_native_GetPointOnRay(long this_addr, float inFraction);

    public Vec3 get_mOrigin() {
        long pointer = internal_native_get_mOrigin(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
RRayCast* nativeObject = (RRayCast*)this_addr;
return (jlong)&nativeObject->mOrigin;
*/
    public static native long internal_native_get_mOrigin(long this_addr);

    public void set_mOrigin(Vec3 mOrigin) {
        internal_native_set_mOrigin(native_address, (mOrigin != null ? mOrigin.native_address : 0));
    }

    /*[-JNI;-NATIVE]
RRayCast* nativeObject = (RRayCast*)this_addr;
nativeObject->mOrigin = *((Vec3*)mOrigin_addr);
*/
    public static native void internal_native_set_mOrigin(long this_addr, long mOrigin_addr);

    public Vec3 get_mDirection() {
        long pointer = internal_native_get_mDirection(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
RRayCast* nativeObject = (RRayCast*)this_addr;
return (jlong)&nativeObject->mDirection;
*/
    public static native long internal_native_get_mDirection(long this_addr);

    public void set_mDirection(Vec3 mDirection) {
        internal_native_set_mDirection(native_address, (mDirection != null ? mDirection.native_address : 0));
    }

    /*[-JNI;-NATIVE]
RRayCast* nativeObject = (RRayCast*)this_addr;
nativeObject->mDirection = *((Vec3*)mDirection_addr);
*/
    public static native void internal_native_set_mDirection(long this_addr, long mDirection_addr);
}
