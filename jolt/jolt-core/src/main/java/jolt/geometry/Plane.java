/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.geometry;

import jolt.idl.IDLBase;
import jolt.math.Vec3;
import jolt.math.Mat44;

public class Plane extends IDLBase {

    private Vec3 Vec3_TEMP_GEN_0;

    private Plane Plane_TEMP_GEN_0;

    private Plane Plane_TEMP_GEN_1;

    private Plane Plane_TEMP_GEN_2;

    private Plane Plane_TEMP_GEN_3;

    static public final Plane T_01 = new Plane((byte) 1, (char) 1);

    static public final Plane T_02 = new Plane((byte) 1, (char) 1);

    static public final Plane T_03 = new Plane((byte) 1, (char) 1);

    public Plane(Vec3 inNormal, float inConstant) {
        long addr = internal_native_create_Vec3_float((inNormal != null ? inNormal.native_address : 0), inConstant);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new Plane(*((Vec3* )inNormal_addr), (float)inConstant);
*/
    public static native long internal_native_create_Vec3_float(long inNormal_addr, float inConstant);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public Plane(byte b, char c) {
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
Plane* nativeObject = (Plane*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public Vec3 GetNormal() {
        long pointer = internal_native_GetNormal(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Plane* nativeObject = (Plane*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetNormal();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetNormal(long this_addr);

    public void SetNormal(Vec3 inNormal) {
        internal_native_SetNormal(native_address, (inNormal != null ? inNormal.native_address : 0));
    }

    /*[-JNI;-NATIVE]
Plane* nativeObject = (Plane*)this_addr;
nativeObject->SetNormal(*((Vec3* )inNormal_addr));
*/
    public static native void internal_native_SetNormal(long this_addr, long inNormal_addr);

    public float GetConstant() {
        return internal_native_GetConstant(native_address);
    }

    /*[-JNI;-NATIVE]
Plane* nativeObject = (Plane*)this_addr;
return nativeObject->GetConstant();
*/
    public static native float internal_native_GetConstant(long this_addr);

    public void SetConstant(float inConstant) {
        internal_native_SetConstant(native_address, inConstant);
    }

    /*[-JNI;-NATIVE]
Plane* nativeObject = (Plane*)this_addr;
nativeObject->SetConstant((float)inConstant);
*/
    public static native void internal_native_SetConstant(long this_addr, float inConstant);

    public Plane sFromPointAndNormal(Vec3 inPoint, Vec3 inNormal) {
        long pointer = internal_native_sFromPointAndNormal(native_address, (inPoint != null ? inPoint.native_address : 0), (inNormal != null ? inNormal.native_address : 0));
        if (pointer == 0)
            return null;
        if (Plane_TEMP_GEN_0 == null)
            Plane_TEMP_GEN_0 = new Plane((byte) 1, (char) 1);
        Plane_TEMP_GEN_0.internal_reset(pointer, false);
        return Plane_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Plane* nativeObject = (Plane*)this_addr;
static Plane copy_addr;
copy_addr = nativeObject->sFromPointAndNormal(*((Vec3* )inPoint_addr), *((Vec3* )inNormal_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_sFromPointAndNormal(long this_addr, long inPoint_addr, long inNormal_addr);

    public Plane sFromPointsCCW(Vec3 inPoint1, Vec3 inPoint2, Vec3 inPoint3) {
        long pointer = internal_native_sFromPointsCCW(native_address, (inPoint1 != null ? inPoint1.native_address : 0), (inPoint2 != null ? inPoint2.native_address : 0), (inPoint3 != null ? inPoint3.native_address : 0));
        if (pointer == 0)
            return null;
        if (Plane_TEMP_GEN_1 == null)
            Plane_TEMP_GEN_1 = new Plane((byte) 1, (char) 1);
        Plane_TEMP_GEN_1.internal_reset(pointer, false);
        return Plane_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
Plane* nativeObject = (Plane*)this_addr;
static Plane copy_addr;
copy_addr = nativeObject->sFromPointsCCW(*((Vec3* )inPoint1_addr), *((Vec3* )inPoint2_addr), *((Vec3* )inPoint3_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_sFromPointsCCW(long this_addr, long inPoint1_addr, long inPoint2_addr, long inPoint3_addr);

    public Plane Offset(float inDistance) {
        long pointer = internal_native_Offset(native_address, inDistance);
        if (pointer == 0)
            return null;
        if (Plane_TEMP_GEN_2 == null)
            Plane_TEMP_GEN_2 = new Plane((byte) 1, (char) 1);
        Plane_TEMP_GEN_2.internal_reset(pointer, false);
        return Plane_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
Plane* nativeObject = (Plane*)this_addr;
static Plane copy_addr;
copy_addr = nativeObject->Offset((float)inDistance);
return (jlong)&copy_addr;*/
    public static native long internal_native_Offset(long this_addr, float inDistance);

    public Plane GetTransformed(Mat44 inTransform) {
        long pointer = internal_native_GetTransformed(native_address, (inTransform != null ? inTransform.native_address : 0));
        if (pointer == 0)
            return null;
        if (Plane_TEMP_GEN_3 == null)
            Plane_TEMP_GEN_3 = new Plane((byte) 1, (char) 1);
        Plane_TEMP_GEN_3.internal_reset(pointer, false);
        return Plane_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
Plane* nativeObject = (Plane*)this_addr;
static Plane copy_addr;
copy_addr = nativeObject->GetTransformed(*((Mat44* )inTransform_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_GetTransformed(long this_addr, long inTransform_addr);

    public float SignedDistance(Vec3 inPoint) {
        return internal_native_SignedDistance(native_address, (inPoint != null ? inPoint.native_address : 0));
    }

    /*[-JNI;-NATIVE]
Plane* nativeObject = (Plane*)this_addr;
return nativeObject->SignedDistance(*((Vec3* )inPoint_addr));
*/
    public static native float internal_native_SignedDistance(long this_addr, long inPoint_addr);
}
