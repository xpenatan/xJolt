/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.math;

import jolt.idl.IDLBase;

public class ArrayVec3 extends IDLBase {

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3MemRef Vec3MemRef_TEMP_GEN_0;

    static public final ArrayVec3 T_01 = new ArrayVec3((byte) 1, (char) 1);

    static public final ArrayVec3 T_02 = new ArrayVec3((byte) 1, (char) 1);

    static public final ArrayVec3 T_03 = new ArrayVec3((byte) 1, (char) 1);

    public ArrayVec3() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new ArrayVec3();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public ArrayVec3(byte b, char c) {
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
ArrayVec3* nativeObject = (ArrayVec3*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public boolean empty() {
        return internal_native_empty(native_address);
    }

    /*[-JNI;-NATIVE]
ArrayVec3* nativeObject = (ArrayVec3*)this_addr;
return nativeObject->empty();
*/
    public static native boolean internal_native_empty(long this_addr);

    public int size() {
        return internal_native_size(native_address);
    }

    /*[-JNI;-NATIVE]
ArrayVec3* nativeObject = (ArrayVec3*)this_addr;
return nativeObject->size();
*/
    public static native int internal_native_size(long this_addr);

    public Vec3 at(int inIndex) {
        long pointer = internal_native_at(native_address, inIndex);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
ArrayVec3* nativeObject = (ArrayVec3*)this_addr;
return (jlong)&nativeObject->at((int)inIndex);
*/
    public static native long internal_native_at(long this_addr, int inIndex);

    public void push_back(Vec3 inValue) {
        internal_native_push_back(native_address, (inValue != null ? inValue.native_address : 0));
    }

    /*[-JNI;-NATIVE]
ArrayVec3* nativeObject = (ArrayVec3*)this_addr;
nativeObject->push_back(*((Vec3* )inValue_addr));
*/
    public static native void internal_native_push_back(long this_addr, long inValue_addr);

    public void reserve(int inSize) {
        internal_native_reserve(native_address, inSize);
    }

    /*[-JNI;-NATIVE]
ArrayVec3* nativeObject = (ArrayVec3*)this_addr;
nativeObject->reserve(inSize);
*/
    public static native void internal_native_reserve(long this_addr, int inSize);

    public void resize(int inSize) {
        internal_native_resize(native_address, inSize);
    }

    /*[-JNI;-NATIVE]
ArrayVec3* nativeObject = (ArrayVec3*)this_addr;
nativeObject->resize(inSize);
*/
    public static native void internal_native_resize(long this_addr, int inSize);

    public void clear() {
        internal_native_clear(native_address);
    }

    /*[-JNI;-NATIVE]
ArrayVec3* nativeObject = (ArrayVec3*)this_addr;
nativeObject->clear();
*/
    public static native void internal_native_clear(long this_addr);

    public Vec3MemRef data() {
        long pointer = internal_native_data(native_address);
        if (pointer == 0)
            return null;
        if (Vec3MemRef_TEMP_GEN_0 == null)
            Vec3MemRef_TEMP_GEN_0 = new Vec3MemRef((byte) 1, (char) 1);
        Vec3MemRef_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec3MemRef_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
ArrayVec3* nativeObject = (ArrayVec3*)this_addr;
Vec3MemRef* obj = nativeObject->data();
return (jlong)obj;
*/
    public static native long internal_native_data(long this_addr);
}
