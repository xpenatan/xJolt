/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.math;

import jolt.idl.IDLBase;

public class Quat extends IDLBase {

    static private Quat Quat_TEMP_STATIC_GEN_0;

    static private Quat Quat_TEMP_STATIC_GEN_1;

    static private Quat Quat_TEMP_STATIC_GEN_2;

    static private Quat Quat_TEMP_STATIC_GEN_3;

    private Quat Quat_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_0;

    private Quat Quat_TEMP_GEN_1;

    private Quat Quat_TEMP_GEN_2;

    static private Quat Quat_TEMP_STATIC_GEN_4;

    private Vec3 Vec3_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_2;

    private Vec3 Vec3_TEMP_GEN_3;

    private Vec3 Vec3_TEMP_GEN_4;

    private Vec3 Vec3_TEMP_GEN_5;

    private Vec3 Vec3_TEMP_GEN_6;

    private Quat Quat_TEMP_GEN_3;

    private Quat Quat_TEMP_GEN_4;

    private Quat Quat_TEMP_GEN_5;

    private Quat Quat_TEMP_GEN_6;

    private Quat Quat_TEMP_GEN_7;

    private Quat Quat_TEMP_GEN_8;

    private Quat Quat_TEMP_GEN_9;

    static public final Quat T_01 = new Quat((byte) 1, (char) 1);

    static public final Quat T_02 = new Quat((byte) 1, (char) 1);

    static public final Quat T_03 = new Quat((byte) 1, (char) 1);

    public Quat() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new Quat();
*/
    public static native long internal_native_create();

    public Quat(float inX, float inY, float inZ, float inW) {
        long addr = internal_native_create_float_float_float_float(inX, inY, inZ, inW);
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new Quat((float)inX, (float)inY, (float)inZ, (float)inW);
*/
    public static native long internal_native_create_float_float_float_float(float inX, float inY, float inZ, float inW);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public Quat(byte b, char c) {
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public static Quat sZero() {
        long pointer = internal_native_sZero();
        if (pointer == 0)
            return null;
        if (Quat_TEMP_STATIC_GEN_0 == null)
            Quat_TEMP_STATIC_GEN_0 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return Quat_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
static Quat copy_addr;
copy_addr = Quat::sZero();
return (jlong)&copy_addr;*/
    public static native long internal_native_sZero();

    public static Quat sIdentity() {
        long pointer = internal_native_sIdentity();
        if (pointer == 0)
            return null;
        if (Quat_TEMP_STATIC_GEN_1 == null)
            Quat_TEMP_STATIC_GEN_1 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_STATIC_GEN_1.internal_reset(pointer, false);
        return Quat_TEMP_STATIC_GEN_1;
    }

    /*[-JNI;-NATIVE]
static Quat copy_addr;
copy_addr = Quat::sIdentity();
return (jlong)&copy_addr;*/
    public static native long internal_native_sIdentity();

    public static Quat sRotation(Vec3 inRotation, float inAngle) {
        long pointer = internal_native_sRotation((inRotation != null ? inRotation.native_address : 0), inAngle);
        if (pointer == 0)
            return null;
        if (Quat_TEMP_STATIC_GEN_2 == null)
            Quat_TEMP_STATIC_GEN_2 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_STATIC_GEN_2.internal_reset(pointer, false);
        return Quat_TEMP_STATIC_GEN_2;
    }

    /*[-JNI;-NATIVE]
static Quat copy_addr;
copy_addr = Quat::sRotation(*((Vec3* )inRotation_addr), (float)inAngle);
return (jlong)&copy_addr;*/
    public static native long internal_native_sRotation(long inRotation_addr, float inAngle);

    public static Quat sFromTo(Vec3 inFrom, Vec3 inTo) {
        long pointer = internal_native_sFromTo((inFrom != null ? inFrom.native_address : 0), (inTo != null ? inTo.native_address : 0));
        if (pointer == 0)
            return null;
        if (Quat_TEMP_STATIC_GEN_3 == null)
            Quat_TEMP_STATIC_GEN_3 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_STATIC_GEN_3.internal_reset(pointer, false);
        return Quat_TEMP_STATIC_GEN_3;
    }

    /*[-JNI;-NATIVE]
static Quat copy_addr;
copy_addr = Quat::sFromTo(*((Vec3* )inFrom_addr), *((Vec3* )inTo_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_sFromTo(long inFrom_addr, long inTo_addr);

    public boolean Equals(Quat inQ) {
        return internal_native_Equals(native_address, (inQ != null ? inQ.native_address : 0));
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return ((*nativeObject == *((Quat* )inQ_addr)));*/
    public static native boolean internal_native_Equals(long this_addr, long inQ_addr);

    public boolean NotEquals(Quat inQ) {
        return internal_native_NotEquals(native_address, (inQ != null ? inQ.native_address : 0));
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return ((*nativeObject != *((Quat* )inQ_addr)));*/
    public static native boolean internal_native_NotEquals(long this_addr, long inQ_addr);

    public Quat MulQuat(Quat inQ) {
        long pointer = internal_native_MulQuat(native_address, (inQ != null ? inQ.native_address : 0));
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_0 == null)
            Quat_TEMP_GEN_0 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_0.internal_reset(pointer, false);
        return Quat_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Quat copy_addr;
copy_addr = (*nativeObject * *((Quat* )inQ_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_MulQuat(long this_addr, long inQ_addr);

    public Vec3 MulVec3(Vec3 inV) {
        long pointer = internal_native_MulVec3(native_address, (inV != null ? inV.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Vec3 copy_addr;
copy_addr = (*nativeObject * *((Vec3* )inV_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_MulVec3(long this_addr, long inV_addr);

    public Quat MulFloat(float inV) {
        long pointer = internal_native_MulFloat(native_address, inV);
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_1 == null)
            Quat_TEMP_GEN_1 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_1.internal_reset(pointer, false);
        return Quat_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Quat copy_addr;
copy_addr = (*nativeObject * (float)inV);
return (jlong)&copy_addr;*/
    public static native long internal_native_MulFloat(long this_addr, float inV);

    public boolean IsClose(Quat inQ, float inMaxDistSq) {
        return internal_native_IsClose(native_address, (inQ != null ? inQ.native_address : 0), inMaxDistSq);
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->IsClose(*((Quat* )inQ_addr), (float)inMaxDistSq);
*/
    public static native boolean internal_native_IsClose(long this_addr, long inQ_addr, float inMaxDistSq);

    public boolean IsClose(Quat inQ) {
        return internal_native_IsClose(native_address, (inQ != null ? inQ.native_address : 0));
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->IsClose(*((Quat* )inQ_addr));
*/
    public static native boolean internal_native_IsClose(long this_addr, long inQ_addr);

    public boolean IsNormalized(float inTolerance) {
        return internal_native_IsNormalized(native_address, inTolerance);
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->IsNormalized((float)inTolerance);
*/
    public static native boolean internal_native_IsNormalized(long this_addr, float inTolerance);

    public boolean IsNormalized() {
        return internal_native_IsNormalized(native_address);
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->IsNormalized();
*/
    public static native boolean internal_native_IsNormalized(long this_addr);

    public float Length() {
        return internal_native_Length(native_address);
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->Length();
*/
    public static native float internal_native_Length(long this_addr);

    public float LengthSq() {
        return internal_native_LengthSq(native_address);
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->LengthSq();
*/
    public static native float internal_native_LengthSq(long this_addr);

    public Quat Normalized() {
        long pointer = internal_native_Normalized(native_address);
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_2 == null)
            Quat_TEMP_GEN_2 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_2.internal_reset(pointer, false);
        return Quat_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->Normalized();
return (jlong)&copy_addr;*/
    public static native long internal_native_Normalized(long this_addr);

    public static Quat sEulerAngles(Vec3 inInput) {
        long pointer = internal_native_sEulerAngles((inInput != null ? inInput.native_address : 0));
        if (pointer == 0)
            return null;
        if (Quat_TEMP_STATIC_GEN_4 == null)
            Quat_TEMP_STATIC_GEN_4 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_STATIC_GEN_4.internal_reset(pointer, false);
        return Quat_TEMP_STATIC_GEN_4;
    }

    /*[-JNI;-NATIVE]
static Quat copy_addr;
copy_addr = Quat::sEulerAngles(*((Vec3* )inInput_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_sEulerAngles(long inInput_addr);

    public Vec3 GetEulerAngles() {
        long pointer = internal_native_GetEulerAngles(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetEulerAngles();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetEulerAngles(long this_addr);

    public float GetX() {
        return internal_native_GetX(native_address);
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->GetX();
*/
    public static native float internal_native_GetX(long this_addr);

    public float GetY() {
        return internal_native_GetY(native_address);
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->GetY();
*/
    public static native float internal_native_GetY(long this_addr);

    public float GetZ() {
        return internal_native_GetZ(native_address);
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->GetZ();
*/
    public static native float internal_native_GetZ(long this_addr);

    public float GetW() {
        return internal_native_GetW(native_address);
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->GetW();
*/
    public static native float internal_native_GetW(long this_addr);

    public Vec3 GetXYZ() {
        long pointer = internal_native_GetXYZ(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetXYZ();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetXYZ(long this_addr);

    public void SetX(float inX) {
        internal_native_SetX(native_address, inX);
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
nativeObject->SetX((float)inX);
*/
    public static native void internal_native_SetX(long this_addr, float inX);

    public void SetY(float inY) {
        internal_native_SetY(native_address, inY);
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
nativeObject->SetY((float)inY);
*/
    public static native void internal_native_SetY(long this_addr, float inY);

    public void SetZ(float inZ) {
        internal_native_SetZ(native_address, inZ);
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
nativeObject->SetZ((float)inZ);
*/
    public static native void internal_native_SetZ(long this_addr, float inZ);

    public void SetW(float inW) {
        internal_native_SetW(native_address, inW);
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
nativeObject->SetW((float)inW);
*/
    public static native void internal_native_SetW(long this_addr, float inW);

    public void Set(float inX, float inY, float inZ, float inW) {
        internal_native_Set(native_address, inX, inY, inZ, inW);
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
nativeObject->Set((float)inX, (float)inY, (float)inZ, (float)inW);
*/
    public static native void internal_native_Set(long this_addr, float inX, float inY, float inZ, float inW);

    public Vec3 InverseRotate(Vec3 inV) {
        long pointer = internal_native_InverseRotate(native_address, (inV != null ? inV.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_3 == null)
            Vec3_TEMP_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_3.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->InverseRotate(*((Vec3* )inV_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_InverseRotate(long this_addr, long inV_addr);

    public Vec3 RotateAxisX() {
        long pointer = internal_native_RotateAxisX(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_4 == null)
            Vec3_TEMP_GEN_4 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_4.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_4;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->RotateAxisX();
return (jlong)&copy_addr;*/
    public static native long internal_native_RotateAxisX(long this_addr);

    public Vec3 RotateAxisY() {
        long pointer = internal_native_RotateAxisY(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_5 == null)
            Vec3_TEMP_GEN_5 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_5.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_5;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->RotateAxisY();
return (jlong)&copy_addr;*/
    public static native long internal_native_RotateAxisY(long this_addr);

    public Vec3 RotateAxisZ() {
        long pointer = internal_native_RotateAxisZ(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_6 == null)
            Vec3_TEMP_GEN_6 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_6.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_6;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->RotateAxisZ();
return (jlong)&copy_addr;*/
    public static native long internal_native_RotateAxisZ(long this_addr);

    public float Dot(Quat inQ) {
        return internal_native_Dot(native_address, (inQ != null ? inQ.native_address : 0));
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->Dot(*((Quat* )inQ_addr));
*/
    public static native float internal_native_Dot(long this_addr, long inQ_addr);

    public Quat Conjugated() {
        long pointer = internal_native_Conjugated(native_address);
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_3 == null)
            Quat_TEMP_GEN_3 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_3.internal_reset(pointer, false);
        return Quat_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->Conjugated();
return (jlong)&copy_addr;*/
    public static native long internal_native_Conjugated(long this_addr);

    public Quat Inversed() {
        long pointer = internal_native_Inversed(native_address);
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_4 == null)
            Quat_TEMP_GEN_4 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_4.internal_reset(pointer, false);
        return Quat_TEMP_GEN_4;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->Inversed();
return (jlong)&copy_addr;*/
    public static native long internal_native_Inversed(long this_addr);

    public Quat EnsureWPositive() {
        long pointer = internal_native_EnsureWPositive(native_address);
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_5 == null)
            Quat_TEMP_GEN_5 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_5.internal_reset(pointer, false);
        return Quat_TEMP_GEN_5;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->EnsureWPositive();
return (jlong)&copy_addr;*/
    public static native long internal_native_EnsureWPositive(long this_addr);

    public Quat GetPerpendicular() {
        long pointer = internal_native_GetPerpendicular(native_address);
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_6 == null)
            Quat_TEMP_GEN_6 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_6.internal_reset(pointer, false);
        return Quat_TEMP_GEN_6;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->GetPerpendicular();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetPerpendicular(long this_addr);

    public float GetRotationAngle(Vec3 inAxis) {
        return internal_native_GetRotationAngle(native_address, (inAxis != null ? inAxis.native_address : 0));
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
return nativeObject->GetRotationAngle(*((Vec3* )inAxis_addr));
*/
    public static native float internal_native_GetRotationAngle(long this_addr, long inAxis_addr);

    public Quat GetTwist(Vec3 inAxis) {
        long pointer = internal_native_GetTwist(native_address, (inAxis != null ? inAxis.native_address : 0));
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_7 == null)
            Quat_TEMP_GEN_7 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_7.internal_reset(pointer, false);
        return Quat_TEMP_GEN_7;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->GetTwist(*((Vec3* )inAxis_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_GetTwist(long this_addr, long inAxis_addr);

    public void GetSwingTwist(Quat outSwing, Quat outTwist) {
        internal_native_GetSwingTwist(native_address, (outSwing != null ? outSwing.native_address : 0), (outTwist != null ? outTwist.native_address : 0));
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
nativeObject->GetSwingTwist(*((Quat* )outSwing_addr), *((Quat* )outTwist_addr));
*/
    public static native void internal_native_GetSwingTwist(long this_addr, long outSwing_addr, long outTwist_addr);

    public Quat LERP(Quat inDestination, float inFraction) {
        long pointer = internal_native_LERP(native_address, (inDestination != null ? inDestination.native_address : 0), inFraction);
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_8 == null)
            Quat_TEMP_GEN_8 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_8.internal_reset(pointer, false);
        return Quat_TEMP_GEN_8;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->LERP(*((Quat* )inDestination_addr), (float)inFraction);
return (jlong)&copy_addr;*/
    public static native long internal_native_LERP(long this_addr, long inDestination_addr, float inFraction);

    public Quat SLERP(Quat inDestination, float inFraction) {
        long pointer = internal_native_SLERP(native_address, (inDestination != null ? inDestination.native_address : 0), inFraction);
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_9 == null)
            Quat_TEMP_GEN_9 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_9.internal_reset(pointer, false);
        return Quat_TEMP_GEN_9;
    }

    /*[-JNI;-NATIVE]
Quat* nativeObject = (Quat*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->SLERP(*((Quat* )inDestination_addr), (float)inFraction);
return (jlong)&copy_addr;*/
    public static native long internal_native_SLERP(long this_addr, long inDestination_addr, float inFraction);
}
