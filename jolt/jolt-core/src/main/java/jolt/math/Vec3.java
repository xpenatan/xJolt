/*
  -------------------------------------------------------
   This file was generated by JParser
 
   Do not make changes to this file
  -------------------------------------------------------
*/
package jolt.math;

import jolt.idl.IDLBase;

public class Vec3 extends IDLBase {

    static private Vec3 Vec3_TEMP_STATIC_GEN_0;

    static private Vec3 Vec3_TEMP_STATIC_GEN_1;

    static private Vec3 Vec3_TEMP_STATIC_GEN_2;

    static private Vec3 Vec3_TEMP_STATIC_GEN_3;

    static private Vec3 Vec3_TEMP_STATIC_GEN_4;

    static private Vec3 Vec3_TEMP_STATIC_GEN_5;

    static private Vec3 Vec3_TEMP_STATIC_GEN_6;

    static private Vec3 Vec3_TEMP_STATIC_GEN_7;

    static private Vec3 Vec3_TEMP_STATIC_GEN_8;

    static private Vec3 Vec3_TEMP_STATIC_GEN_9;

    static private Vec3 Vec3_TEMP_STATIC_GEN_10;

    static private Vec3 Vec3_TEMP_STATIC_GEN_11;

    static private Vec3 Vec3_TEMP_STATIC_GEN_12;

    static private Vec3 Vec3_TEMP_STATIC_GEN_13;

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_2;

    private Vec3 Vec3_TEMP_GEN_3;

    private Vec3 Vec3_TEMP_GEN_4;

    private Vec3 Vec3_TEMP_GEN_5;

    private Vec3 Vec3_TEMP_GEN_6;

    private Vec4 Vec4_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_7;

    private Vec3 Vec3_TEMP_GEN_8;

    private Vec3 Vec3_TEMP_GEN_9;

    private Vec3 Vec3_TEMP_GEN_10;

    private Vec3 Vec3_TEMP_GEN_11;

    private Vec3 Vec3_TEMP_GEN_12;

    private Vec4 Vec4_TEMP_GEN_1;

    private Vec4 Vec4_TEMP_GEN_2;

    private Vec4 Vec4_TEMP_GEN_3;

    private Vec3 Vec3_TEMP_GEN_13;

    private Vec3 Vec3_TEMP_GEN_14;

    @Override
    public String toString() {
        return "X: " + GetX() + " Y: " + GetY() + " Z: " + GetZ();
    }

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public Vec3(byte b, char c) {
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      delete nativeObject;
    */
    public static native void internal_native_deleteNative(long this_addr);

    public static Vec3 sZero() {
        long pointer = internal_native_sZero();
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_STATIC_GEN_0 == null)
            Vec3_TEMP_STATIC_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_0;
    }

    /*
      [-JNI;-NATIVE]
      static Vec3 copy_addr;
      copy_addr = Vec3::sZero();
      return (jlong)&copy_addr;
    */
    public static native long internal_native_sZero();

    public static Vec3 sOne() {
        long pointer = internal_native_sOne();
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_STATIC_GEN_1 == null)
            Vec3_TEMP_STATIC_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_1.internal_reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_1;
    }

    /*
      [-JNI;-NATIVE]
      static Vec3 copy_addr;
      copy_addr = Vec3::sOne();
      return (jlong)&copy_addr;
    */
    public static native long internal_native_sOne();

    public static Vec3 sAxisX() {
        long pointer = internal_native_sAxisX();
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_STATIC_GEN_2 == null)
            Vec3_TEMP_STATIC_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_2.internal_reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_2;
    }

    /*
      [-JNI;-NATIVE]
      static Vec3 copy_addr;
      copy_addr = Vec3::sAxisX();
      return (jlong)&copy_addr;
    */
    public static native long internal_native_sAxisX();

    public static Vec3 sAxisY() {
        long pointer = internal_native_sAxisY();
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_STATIC_GEN_3 == null)
            Vec3_TEMP_STATIC_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_3.internal_reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_3;
    }

    /*
      [-JNI;-NATIVE]
      static Vec3 copy_addr;
      copy_addr = Vec3::sAxisY();
      return (jlong)&copy_addr;
    */
    public static native long internal_native_sAxisY();

    public static Vec3 sAxisZ() {
        long pointer = internal_native_sAxisZ();
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_STATIC_GEN_4 == null)
            Vec3_TEMP_STATIC_GEN_4 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_4.internal_reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_4;
    }

    /*
      [-JNI;-NATIVE]
      static Vec3 copy_addr;
      copy_addr = Vec3::sAxisZ();
      return (jlong)&copy_addr;
    */
    public static native long internal_native_sAxisZ();

    public static Vec3 sReplicate(float inValue) {
        long pointer = internal_native_sReplicate(inValue);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_STATIC_GEN_5 == null)
            Vec3_TEMP_STATIC_GEN_5 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_5.internal_reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_5;
    }

    /*
      [-JNI;-NATIVE]
      static Vec3 copy_addr;
      copy_addr = Vec3::sReplicate((float)inValue);
      return (jlong)&copy_addr;
    */
    public static native long internal_native_sReplicate(float inValue);

    public static Vec3 sMin(Vec3 inLHS, Vec3 inRHS) {
        long pointer = internal_native_sMin((inLHS != null ? inLHS.native_address : 0), (inRHS != null ? inRHS.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_STATIC_GEN_6 == null)
            Vec3_TEMP_STATIC_GEN_6 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_6.internal_reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_6;
    }

    /*
      [-JNI;-NATIVE]
      static Vec3 copy_addr;
      copy_addr = Vec3::sMin(*((Vec3* )inLHS_addr), *((Vec3* )inRHS_addr));
      return (jlong)&copy_addr;
    */
    public static native long internal_native_sMin(long inLHS_addr, long inRHS_addr);

    public static Vec3 sMax(Vec3 inLHS, Vec3 inRHS) {
        long pointer = internal_native_sMax((inLHS != null ? inLHS.native_address : 0), (inRHS != null ? inRHS.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_STATIC_GEN_7 == null)
            Vec3_TEMP_STATIC_GEN_7 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_7.internal_reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_7;
    }

    /*
      [-JNI;-NATIVE]
      static Vec3 copy_addr;
      copy_addr = Vec3::sMax(*((Vec3* )inLHS_addr), *((Vec3* )inRHS_addr));
      return (jlong)&copy_addr;
    */
    public static native long internal_native_sMax(long inLHS_addr, long inRHS_addr);

    public static Vec3 sClamp(Vec3 inValue, Vec3 inMin, Vec3 inMax) {
        long pointer = internal_native_sClamp((inValue != null ? inValue.native_address : 0), (inMin != null ? inMin.native_address : 0), (inMax != null ? inMax.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_STATIC_GEN_8 == null)
            Vec3_TEMP_STATIC_GEN_8 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_8.internal_reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_8;
    }

    /*
      [-JNI;-NATIVE]
      static Vec3 copy_addr;
      copy_addr = Vec3::sClamp(*((Vec3* )inValue_addr), *((Vec3* )inMin_addr), *((Vec3* )inMax_addr));
      return (jlong)&copy_addr;
    */
    public static native long internal_native_sClamp(long inValue_addr, long inMin_addr, long inMax_addr);

    public static Vec3 sFusedMultiplyAdd(Vec3 inMul1, Vec3 inMul2, Vec3 inAdd) {
        long pointer = internal_native_sFusedMultiplyAdd((inMul1 != null ? inMul1.native_address : 0), (inMul2 != null ? inMul2.native_address : 0), (inAdd != null ? inAdd.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_STATIC_GEN_9 == null)
            Vec3_TEMP_STATIC_GEN_9 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_9.internal_reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_9;
    }

    /*
      [-JNI;-NATIVE]
      static Vec3 copy_addr;
      copy_addr = Vec3::sFusedMultiplyAdd(*((Vec3* )inMul1_addr), *((Vec3* )inMul2_addr), *((Vec3* )inAdd_addr));
      return (jlong)&copy_addr;
    */
    public static native long internal_native_sFusedMultiplyAdd(long inMul1_addr, long inMul2_addr, long inAdd_addr);

    public static Vec3 sOr(Vec3 inV1, Vec3 inV2) {
        long pointer = internal_native_sOr((inV1 != null ? inV1.native_address : 0), (inV2 != null ? inV2.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_STATIC_GEN_10 == null)
            Vec3_TEMP_STATIC_GEN_10 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_10.internal_reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_10;
    }

    /*
      [-JNI;-NATIVE]
      static Vec3 copy_addr;
      copy_addr = Vec3::sOr(*((Vec3* )inV1_addr), *((Vec3* )inV2_addr));
      return (jlong)&copy_addr;
    */
    public static native long internal_native_sOr(long inV1_addr, long inV2_addr);

    public static Vec3 sXor(Vec3 inV1, Vec3 inV2) {
        long pointer = internal_native_sXor((inV1 != null ? inV1.native_address : 0), (inV2 != null ? inV2.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_STATIC_GEN_11 == null)
            Vec3_TEMP_STATIC_GEN_11 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_11.internal_reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_11;
    }

    /*
      [-JNI;-NATIVE]
      static Vec3 copy_addr;
      copy_addr = Vec3::sXor(*((Vec3* )inV1_addr), *((Vec3* )inV2_addr));
      return (jlong)&copy_addr;
    */
    public static native long internal_native_sXor(long inV1_addr, long inV2_addr);

    public static Vec3 sAnd(Vec3 inV1, Vec3 inV2) {
        long pointer = internal_native_sAnd((inV1 != null ? inV1.native_address : 0), (inV2 != null ? inV2.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_STATIC_GEN_12 == null)
            Vec3_TEMP_STATIC_GEN_12 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_12.internal_reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_12;
    }

    /*
      [-JNI;-NATIVE]
      static Vec3 copy_addr;
      copy_addr = Vec3::sAnd(*((Vec3* )inV1_addr), *((Vec3* )inV2_addr));
      return (jlong)&copy_addr;
    */
    public static native long internal_native_sAnd(long inV1_addr, long inV2_addr);

    public static Vec3 sUnitSpherical(float inTheta, float inPhi) {
        long pointer = internal_native_sUnitSpherical(inTheta, inPhi);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_STATIC_GEN_13 == null)
            Vec3_TEMP_STATIC_GEN_13 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_13.internal_reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_13;
    }

    /*
      [-JNI;-NATIVE]
      static Vec3 copy_addr;
      copy_addr = Vec3::sUnitSpherical((float)inTheta, (float)inPhi);
      return (jlong)&copy_addr;
    */
    public static native long internal_native_sUnitSpherical(float inTheta, float inPhi);

    public float GetComponent(int inCoordinate) {
        return internal_native_GetComponent(native_address, inCoordinate);
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      return ((*nativeObject)[inCoordinate]);
    */
    public static native float internal_native_GetComponent(long this_addr, int inCoordinate);

    public boolean Equals(Vec3 inV) {
        return internal_native_Equals(native_address, (inV != null ? inV.native_address : 0));
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      return ((*nativeObject == *((Vec3* )inV_addr)));
    */
    public static native boolean internal_native_Equals(long this_addr, long inV_addr);

    public boolean NotEquals(Vec3 inV) {
        return internal_native_NotEquals(native_address, (inV != null ? inV.native_address : 0));
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      return ((*nativeObject != *((Vec3* )inV_addr)));
    */
    public static native boolean internal_native_NotEquals(long this_addr, long inV_addr);

    public float LengthSq() {
        return internal_native_LengthSq(native_address);
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      return nativeObject->LengthSq();
    */
    public static native float internal_native_LengthSq(long this_addr);

    public float Length() {
        return internal_native_Length(native_address);
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      return nativeObject->Length();
    */
    public static native float internal_native_Length(long this_addr);

    public Vec3 Normalized() {
        long pointer = internal_native_Normalized(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      static Vec3 copy_addr;
      copy_addr = nativeObject->Normalized();
      return (jlong)&copy_addr;
    */
    public static native long internal_native_Normalized(long this_addr);

    public Vec3 NormalizedOr(Vec3 inZeroValue) {
        long pointer = internal_native_NormalizedOr(native_address, (inZeroValue != null ? inZeroValue.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      static Vec3 copy_addr;
      copy_addr = nativeObject->NormalizedOr(*((Vec3* )inZeroValue_addr));
      return (jlong)&copy_addr;
    */
    public static native long internal_native_NormalizedOr(long this_addr, long inZeroValue_addr);

    public Vec3 GetNormalizedPerpendicular() {
        long pointer = internal_native_GetNormalizedPerpendicular(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      static Vec3 copy_addr;
      copy_addr = nativeObject->GetNormalizedPerpendicular();
      return (jlong)&copy_addr;
    */
    public static native long internal_native_GetNormalizedPerpendicular(long this_addr);

    public float GetX() {
        return internal_native_GetX(native_address);
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      return nativeObject->GetX();
    */
    public static native float internal_native_GetX(long this_addr);

    public float GetY() {
        return internal_native_GetY(native_address);
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      return nativeObject->GetY();
    */
    public static native float internal_native_GetY(long this_addr);

    public float GetZ() {
        return internal_native_GetZ(native_address);
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      return nativeObject->GetZ();
    */
    public static native float internal_native_GetZ(long this_addr);

    public void SetX(float inX) {
        internal_native_SetX(native_address, inX);
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      nativeObject->SetX((float)inX);
    */
    public static native void internal_native_SetX(long this_addr, float inX);

    public void SetY(float inY) {
        internal_native_SetY(native_address, inY);
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      nativeObject->SetY((float)inY);
    */
    public static native void internal_native_SetY(long this_addr, float inY);

    public void SetZ(float inZ) {
        internal_native_SetZ(native_address, inZ);
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      nativeObject->SetZ((float)inZ);
    */
    public static native void internal_native_SetZ(long this_addr, float inZ);

    public void Set(float inX, float inY, float inZ) {
        internal_native_Set(native_address, inX, inY, inZ);
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      nativeObject->Set((float)inX, (float)inY, (float)inZ);
    */
    public static native void internal_native_Set(long this_addr, float inX, float inY, float inZ);

    public void SetComponent(int inCoordinate, float inValue) {
        internal_native_SetComponent(native_address, inCoordinate, inValue);
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      nativeObject->SetComponent(inCoordinate, (float)inValue);
    */
    public static native void internal_native_SetComponent(long this_addr, int inCoordinate, float inValue);

    public boolean IsNearZero(float inMaxDistSq) {
        return internal_native_IsNearZero(native_address, inMaxDistSq);
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      return nativeObject->IsNearZero((float)inMaxDistSq);
    */
    public static native boolean internal_native_IsNearZero(long this_addr, float inMaxDistSq);

    public boolean IsNearZero() {
        return internal_native_IsNearZero(native_address);
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      return nativeObject->IsNearZero();
    */
    public static native boolean internal_native_IsNearZero(long this_addr);

    public boolean IsClose(Vec3 inV, float inMaxDistSq) {
        return internal_native_IsClose(native_address, (inV != null ? inV.native_address : 0), inMaxDistSq);
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      return nativeObject->IsClose(*((Vec3* )inV_addr), (float)inMaxDistSq);
    */
    public static native boolean internal_native_IsClose(long this_addr, long inV_addr, float inMaxDistSq);

    public boolean IsClose(Vec3 inV) {
        return internal_native_IsClose(native_address, (inV != null ? inV.native_address : 0));
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      return nativeObject->IsClose(*((Vec3* )inV_addr));
    */
    public static native boolean internal_native_IsClose(long this_addr, long inV_addr);

    public boolean IsNormalized(float inTolerance) {
        return internal_native_IsNormalized(native_address, inTolerance);
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      return nativeObject->IsNormalized((float)inTolerance);
    */
    public static native boolean internal_native_IsNormalized(long this_addr, float inTolerance);

    public boolean IsNormalized() {
        return internal_native_IsNormalized(native_address);
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      return nativeObject->IsNormalized();
    */
    public static native boolean internal_native_IsNormalized(long this_addr);

    public int GetLowestComponentIndex() {
        return internal_native_GetLowestComponentIndex(native_address);
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      return nativeObject->GetLowestComponentIndex();
    */
    public static native int internal_native_GetLowestComponentIndex(long this_addr);

    public int GetHighestComponentIndex() {
        return internal_native_GetHighestComponentIndex(native_address);
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      return nativeObject->GetHighestComponentIndex();
    */
    public static native int internal_native_GetHighestComponentIndex(long this_addr);

    public Vec3 Abs() {
        long pointer = internal_native_Abs(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_3 == null)
            Vec3_TEMP_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_3.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_3;
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      static Vec3 copy_addr;
      copy_addr = nativeObject->Abs();
      return (jlong)&copy_addr;
    */
    public static native long internal_native_Abs(long this_addr);

    public Vec3 Reciprocal() {
        long pointer = internal_native_Reciprocal(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_4 == null)
            Vec3_TEMP_GEN_4 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_4.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_4;
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      static Vec3 copy_addr;
      copy_addr = nativeObject->Reciprocal();
      return (jlong)&copy_addr;
    */
    public static native long internal_native_Reciprocal(long this_addr);

    public Vec3 Cross(Vec3 inRHS) {
        long pointer = internal_native_Cross(native_address, (inRHS != null ? inRHS.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_5 == null)
            Vec3_TEMP_GEN_5 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_5.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_5;
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      static Vec3 copy_addr;
      copy_addr = nativeObject->Cross(*((Vec3* )inRHS_addr));
      return (jlong)&copy_addr;
    */
    public static native long internal_native_Cross(long this_addr, long inRHS_addr);

    public float Dot(Vec3 inRHS) {
        return internal_native_Dot(native_address, (inRHS != null ? inRHS.native_address : 0));
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      return nativeObject->Dot(*((Vec3* )inRHS_addr));
    */
    public static native float internal_native_Dot(long this_addr, long inRHS_addr);

    public Vec3 DotV(Vec3 inRHS) {
        long pointer = internal_native_DotV(native_address, (inRHS != null ? inRHS.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_6 == null)
            Vec3_TEMP_GEN_6 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_6.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_6;
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      static Vec3 copy_addr;
      copy_addr = nativeObject->DotV(*((Vec3* )inRHS_addr));
      return (jlong)&copy_addr;
    */
    public static native long internal_native_DotV(long this_addr, long inRHS_addr);

    public Vec4 DotV4(Vec3 inRHS) {
        long pointer = internal_native_DotV4(native_address, (inRHS != null ? inRHS.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec4_TEMP_GEN_0 == null)
            Vec4_TEMP_GEN_0 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec4_TEMP_GEN_0;
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      static Vec4 copy_addr;
      copy_addr = nativeObject->DotV4(*((Vec3* )inRHS_addr));
      return (jlong)&copy_addr;
    */
    public static native long internal_native_DotV4(long this_addr, long inRHS_addr);

    public Vec3 Add(Vec3 inV) {
        internal_native_Add(native_address, (inV != null ? inV.native_address : 0));
        return this;
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      return (jlong)&(*nativeObject += *((Vec3* )inV_addr));
    */
    public static native long internal_native_Add(long this_addr, long inV_addr);

    public Vec3 Sub(Vec3 inV) {
        internal_native_Sub(native_address, (inV != null ? inV.native_address : 0));
        return this;
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      return (jlong)&(*nativeObject -= *((Vec3* )inV_addr));
    */
    public static native long internal_native_Sub(long this_addr, long inV_addr);

    public Vec3 Mul(float inV) {
        internal_native_Mul(native_address, inV);
        return this;
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      return (jlong)&(*nativeObject *= (float)inV);
    */
    public static native long internal_native_Mul(long this_addr, float inV);

    public Vec3 Div(float inV) {
        internal_native_Div(native_address, inV);
        return this;
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      return (jlong)&(*nativeObject /= (float)inV);
    */
    public static native long internal_native_Div(long this_addr, float inV);

    public Vec3 MulVec3(Vec3 inV) {
        long pointer = internal_native_MulVec3(native_address, (inV != null ? inV.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_7 == null)
            Vec3_TEMP_GEN_7 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_7.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_7;
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      static Vec3 copy_addr;
      copy_addr = (*nativeObject * *((Vec3* )inV_addr));
      return (jlong)&copy_addr;
    */
    public static native long internal_native_MulVec3(long this_addr, long inV_addr);

    public Vec3 MulFloat(float inV) {
        long pointer = internal_native_MulFloat(native_address, inV);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_8 == null)
            Vec3_TEMP_GEN_8 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_8.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_8;
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      static Vec3 copy_addr;
      copy_addr = (*nativeObject * (float)inV);
      return (jlong)&copy_addr;
    */
    public static native long internal_native_MulFloat(long this_addr, float inV);

    public Vec3 DivVec3(Vec3 inV) {
        long pointer = internal_native_DivVec3(native_address, (inV != null ? inV.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_9 == null)
            Vec3_TEMP_GEN_9 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_9.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_9;
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      static Vec3 copy_addr;
      copy_addr = (*nativeObject / *((Vec3* )inV_addr));
      return (jlong)&copy_addr;
    */
    public static native long internal_native_DivVec3(long this_addr, long inV_addr);

    public Vec3 DivFloat(float inV) {
        long pointer = internal_native_DivFloat(native_address, inV);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_10 == null)
            Vec3_TEMP_GEN_10 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_10.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_10;
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      static Vec3 copy_addr;
      copy_addr = (*nativeObject / (float)inV);
      return (jlong)&copy_addr;
    */
    public static native long internal_native_DivFloat(long this_addr, float inV);

    public Vec3 AddVec3(Vec3 inV) {
        long pointer = internal_native_AddVec3(native_address, (inV != null ? inV.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_11 == null)
            Vec3_TEMP_GEN_11 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_11.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_11;
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      static Vec3 copy_addr;
      copy_addr = (*nativeObject + *((Vec3* )inV_addr));
      return (jlong)&copy_addr;
    */
    public static native long internal_native_AddVec3(long this_addr, long inV_addr);

    public Vec3 SubVec3(Vec3 inV) {
        long pointer = internal_native_SubVec3(native_address, (inV != null ? inV.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_12 == null)
            Vec3_TEMP_GEN_12 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_12.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_12;
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      static Vec3 copy_addr;
      copy_addr = (*nativeObject - *((Vec3* )inV_addr));
      return (jlong)&copy_addr;
    */
    public static native long internal_native_SubVec3(long this_addr, long inV_addr);

    public Vec4 SplatX() {
        long pointer = internal_native_SplatX(native_address);
        if (pointer == 0)
            return null;
        if (Vec4_TEMP_GEN_1 == null)
            Vec4_TEMP_GEN_1 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_GEN_1.internal_reset(pointer, false);
        return Vec4_TEMP_GEN_1;
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      static Vec4 copy_addr;
      copy_addr = nativeObject->SplatX();
      return (jlong)&copy_addr;
    */
    public static native long internal_native_SplatX(long this_addr);

    public Vec4 SplatY() {
        long pointer = internal_native_SplatY(native_address);
        if (pointer == 0)
            return null;
        if (Vec4_TEMP_GEN_2 == null)
            Vec4_TEMP_GEN_2 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_GEN_2.internal_reset(pointer, false);
        return Vec4_TEMP_GEN_2;
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      static Vec4 copy_addr;
      copy_addr = nativeObject->SplatY();
      return (jlong)&copy_addr;
    */
    public static native long internal_native_SplatY(long this_addr);

    public Vec4 SplatZ() {
        long pointer = internal_native_SplatZ(native_address);
        if (pointer == 0)
            return null;
        if (Vec4_TEMP_GEN_3 == null)
            Vec4_TEMP_GEN_3 = new Vec4((byte) 1, (char) 1);
        Vec4_TEMP_GEN_3.internal_reset(pointer, false);
        return Vec4_TEMP_GEN_3;
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      static Vec4 copy_addr;
      copy_addr = nativeObject->SplatZ();
      return (jlong)&copy_addr;
    */
    public static native long internal_native_SplatZ(long this_addr);

    public float ReduceMin() {
        return internal_native_ReduceMin(native_address);
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      return nativeObject->ReduceMin();
    */
    public static native float internal_native_ReduceMin(long this_addr);

    public float ReduceMax() {
        return internal_native_ReduceMax(native_address);
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      return nativeObject->ReduceMax();
    */
    public static native float internal_native_ReduceMax(long this_addr);

    public Vec3 Sqrt() {
        long pointer = internal_native_Sqrt(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_13 == null)
            Vec3_TEMP_GEN_13 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_13.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_13;
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      static Vec3 copy_addr;
      copy_addr = nativeObject->Sqrt();
      return (jlong)&copy_addr;
    */
    public static native long internal_native_Sqrt(long this_addr);

    public Vec3 GetSign() {
        long pointer = internal_native_GetSign(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_14 == null)
            Vec3_TEMP_GEN_14 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_14.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_14;
    }

    /*
      [-JNI;-NATIVE]
      Vec3* nativeObject = (Vec3*)this_addr;
      static Vec3 copy_addr;
      copy_addr = nativeObject->GetSign();
      return (jlong)&copy_addr;
    */
    public static native long internal_native_GetSign(long this_addr);
}
