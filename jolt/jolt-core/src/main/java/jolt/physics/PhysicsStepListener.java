/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics;

import jolt.idl.IDLBase;

public class PhysicsStepListener extends IDLBase {

    static private PhysicsStepListenerContext PhysicsStepListenerContext_TEMP_STATIC_GEN_0;

    /*[-JNI;-NATIVE]
class PhysicsStepListenerJS : public PhysicsStepListener {
private:
	JNIEnv* env;
	jobject obj;
public:
	inline static jclass jClassID = 0;
	inline static jmethodID OnStepJ_ID = 0;

void setupCallback(JNIEnv* env, jobject obj) {
	this->env = env;
	this->obj = env->NewGlobalRef(obj);
	if(PhysicsStepListenerJS::jClassID == 0) {
		PhysicsStepListenerJS::jClassID = (jclass)env->NewGlobalRef(env->GetObjectClass(obj));
		PhysicsStepListenerJS::OnStepJ_ID = env->GetMethodID(jClassID, "internal_OnStep", "(J)V");
	}
}
virtual void OnStep(const PhysicsStepListenerContext& inContext) {
   env->CallVoidMethod(obj, PhysicsStepListenerJS::OnStepJ_ID, (jlong)&inContext);
}
};
*/
    @Deprecated()
    public PhysicsStepListener(byte b, char c) {
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
PhysicsStepListenerJS* nativeObject = (PhysicsStepListenerJS*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public PhysicsStepListener() {
        long addr = internal_native_create();
        internal_reset(addr, true);
        setupCallback();
    }

    private void setupCallback() {
        internal_native_setupCallback(native_address);
    }

    protected void OnStep(PhysicsStepListenerContext inContext) {
    }

    private void internal_OnStep(long inContext_addr) {
        if (PhysicsStepListenerContext_TEMP_STATIC_GEN_0 == null)
            PhysicsStepListenerContext_TEMP_STATIC_GEN_0 = new PhysicsStepListenerContext((byte) 1, (char) 1);
        PhysicsStepListenerContext_TEMP_STATIC_GEN_0.internal_reset(inContext_addr, false);
        OnStep(PhysicsStepListenerContext_TEMP_STATIC_GEN_0);
    }

    /*[-JNI;-NATIVE]
return (jlong)new PhysicsStepListenerJS();
*/
    public static native long internal_native_create();

    /*[-JNI;-NATIVE]
PhysicsStepListenerJS* nativeObject = (PhysicsStepListenerJS*)this_addr;
nativeObject->setupCallback(env, object);
*/
    public native void internal_native_setupCallback(long this_addr);
}
