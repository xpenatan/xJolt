/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics;

import jolt.idl.IDLBase;
import jolt.physics.body.Body;
import jolt.physics.constraints.Constraint;
import jolt.physics.body.BodyID;

public class StateRecorderFilter extends IDLBase {

    static private Body Body_TEMP_STATIC_GEN_0;

    static private Constraint Constraint_TEMP_STATIC_GEN_0;

    static private BodyID BodyID_TEMP_STATIC_GEN_0;

    static private BodyID BodyID_TEMP_STATIC_GEN_1;

    static private BodyID BodyID_TEMP_STATIC_GEN_2;

    static private BodyID BodyID_TEMP_STATIC_GEN_3;

    /*[-JNI;-NATIVE]
class StateRecorderFilterJS : public StateRecorderFilter {
private:
	JNIEnv* env;
	jobject obj;
public:
	inline static jclass jClassID = 0;
	inline static jmethodID ShouldSaveBodyJ_ID = 0;
	inline static jmethodID ShouldSaveConstraintJ_ID = 0;
	inline static jmethodID ShouldSaveContactJJ_ID = 0;
	inline static jmethodID ShouldRestoreContactJJ_ID = 0;

void setupCallback(JNIEnv* env, jobject obj) {
	this->env = env;
	this->obj = env->NewGlobalRef(obj);
	if(StateRecorderFilterJS::jClassID == 0) {
		StateRecorderFilterJS::jClassID = (jclass)env->NewGlobalRef(env->GetObjectClass(obj));
		StateRecorderFilterJS::ShouldSaveBodyJ_ID = env->GetMethodID(jClassID, "internal_ShouldSaveBody", "(J)Z");
		StateRecorderFilterJS::ShouldSaveConstraintJ_ID = env->GetMethodID(jClassID, "internal_ShouldSaveConstraint", "(J)Z");
		StateRecorderFilterJS::ShouldSaveContactJJ_ID = env->GetMethodID(jClassID, "internal_ShouldSaveContact", "(JJ)Z");
		StateRecorderFilterJS::ShouldRestoreContactJJ_ID = env->GetMethodID(jClassID, "internal_ShouldRestoreContact", "(JJ)Z");
	}
}
virtual bool ShouldSaveBody(const Body& inBody) const {
   return env->CallBooleanMethod(obj, StateRecorderFilterJS::ShouldSaveBodyJ_ID, (jlong)&inBody);
}
virtual bool ShouldSaveConstraint(const Constraint& inConstraint) const {
   return env->CallBooleanMethod(obj, StateRecorderFilterJS::ShouldSaveConstraintJ_ID, (jlong)&inConstraint);
}
virtual bool ShouldSaveContact(const BodyID& inBody1, const BodyID& inBody2) const {
   return env->CallBooleanMethod(obj, StateRecorderFilterJS::ShouldSaveContactJJ_ID, (jlong)&inBody1, (jlong)&inBody2);
}
virtual bool ShouldRestoreContact(const BodyID& inBody1, const BodyID& inBody2) const {
   return env->CallBooleanMethod(obj, StateRecorderFilterJS::ShouldRestoreContactJJ_ID, (jlong)&inBody1, (jlong)&inBody2);
}
};
*/
    @Deprecated()
    public StateRecorderFilter(byte b, char c) {
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
StateRecorderFilterJS* nativeObject = (StateRecorderFilterJS*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public StateRecorderFilter() {
        long addr = internal_native_create();
        internal_reset(addr, true);
        setupCallback();
    }

    private void setupCallback() {
        internal_native_setupCallback(native_address);
    }

    protected boolean ShouldSaveBody(Body inBody) {
        return false;
    }

    private boolean internal_ShouldSaveBody(long inBody_addr) {
        if (Body_TEMP_STATIC_GEN_0 == null)
            Body_TEMP_STATIC_GEN_0 = new Body((byte) 1, (char) 1);
        Body_TEMP_STATIC_GEN_0.internal_reset(inBody_addr, false);
        return ShouldSaveBody(Body_TEMP_STATIC_GEN_0);
    }

    protected boolean ShouldSaveConstraint(Constraint inConstraint) {
        return false;
    }

    private boolean internal_ShouldSaveConstraint(long inConstraint_addr) {
        if (Constraint_TEMP_STATIC_GEN_0 == null)
            Constraint_TEMP_STATIC_GEN_0 = new Constraint((byte) 1, (char) 1);
        Constraint_TEMP_STATIC_GEN_0.internal_reset(inConstraint_addr, false);
        return ShouldSaveConstraint(Constraint_TEMP_STATIC_GEN_0);
    }

    protected boolean ShouldSaveContact(BodyID inBody1, BodyID inBody2) {
        return false;
    }

    private boolean internal_ShouldSaveContact(long inBody1_addr, long inBody2_addr) {
        if (BodyID_TEMP_STATIC_GEN_0 == null)
            BodyID_TEMP_STATIC_GEN_0 = new BodyID((byte) 1, (char) 1);
        BodyID_TEMP_STATIC_GEN_0.internal_reset(inBody1_addr, false);
        if (BodyID_TEMP_STATIC_GEN_1 == null)
            BodyID_TEMP_STATIC_GEN_1 = new BodyID((byte) 1, (char) 1);
        BodyID_TEMP_STATIC_GEN_1.internal_reset(inBody2_addr, false);
        return ShouldSaveContact(BodyID_TEMP_STATIC_GEN_0, BodyID_TEMP_STATIC_GEN_1);
    }

    protected boolean ShouldRestoreContact(BodyID inBody1, BodyID inBody2) {
        return false;
    }

    private boolean internal_ShouldRestoreContact(long inBody1_addr, long inBody2_addr) {
        if (BodyID_TEMP_STATIC_GEN_2 == null)
            BodyID_TEMP_STATIC_GEN_2 = new BodyID((byte) 1, (char) 1);
        BodyID_TEMP_STATIC_GEN_2.internal_reset(inBody1_addr, false);
        if (BodyID_TEMP_STATIC_GEN_3 == null)
            BodyID_TEMP_STATIC_GEN_3 = new BodyID((byte) 1, (char) 1);
        BodyID_TEMP_STATIC_GEN_3.internal_reset(inBody2_addr, false);
        return ShouldRestoreContact(BodyID_TEMP_STATIC_GEN_2, BodyID_TEMP_STATIC_GEN_3);
    }

    /*[-JNI;-NATIVE]
return (jlong)new StateRecorderFilterJS();
*/
    public static native long internal_native_create();

    /*[-JNI;-NATIVE]
StateRecorderFilterJS* nativeObject = (StateRecorderFilterJS*)this_addr;
nativeObject->setupCallback(env, object);
*/
    public native void internal_native_setupCallback(long this_addr);
}
