/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.body;

import jolt.idl.IDLBase;
import jolt.physics.softbody.SoftBodyCreationSettings;
import jolt.enums.EActivation;
import jolt.physics.collision.broadphase.BodyInterface_AddState;
import jolt.math.TwoBodyConstraintSettings;
import jolt.physics.constraints.TwoBodyConstraint;
import jolt.physics.collision.shape.Shape;
import jolt.math.Vec3;
import jolt.math.Quat;
import jolt.math.Mat44;
import jolt.geometry.AABox;
import jolt.physics.collision.broadphase.BroadPhaseLayerFilter;
import jolt.physics.collision.ObjectLayerFilter;
import jolt.enums.EBodyType;
import jolt.enums.EMotionType;
import jolt.enums.EMotionQuality;
import jolt.physics.collision.CollisionGroup;
import jolt.physics.collision.TransformedShape;
import jolt.physics.collision.shape.SubShapeID;
import jolt.physics.collision.PhysicsMaterial;

public class BodyInterface extends IDLBase {

    private Body Body_TEMP_GEN_0;

    private BodyID BodyID_TEMP_GEN_0;

    private BodyID BodyID_TEMP_GEN_1;

    private BodyInterface_AddState BodyInterface_AddState_TEMP_GEN_0;

    private TwoBodyConstraint TwoBodyConstraint_TEMP_GEN_0;

    private Shape Shape_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_0;

    private Quat Quat_TEMP_GEN_0;

    private Mat44 Mat44_TEMP_GEN_0;

    private Mat44 Mat44_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_2;

    private Vec3 Vec3_TEMP_GEN_3;

    private Mat44 Mat44_TEMP_GEN_2;

    private CollisionGroup CollisionGroup_TEMP_GEN_0;

    private TransformedShape TransformedShape_TEMP_GEN_0;

    private PhysicsMaterial PhysicsMaterial_TEMP_GEN_0;

    static public final BodyInterface T_01 = new BodyInterface((byte) 1, (char) 1);

    static public final BodyInterface T_02 = new BodyInterface((byte) 1, (char) 1);

    static public final BodyInterface T_03 = new BodyInterface((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public BodyInterface(byte b, char c) {
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public Body CreateBody(BodyCreationSettings inSettings) {
        long pointer = internal_native_CreateBody(native_address, (inSettings != null ? inSettings.native_address : 0));
        if (pointer == 0)
            return null;
        Body Body_NEW = new Body((byte) 1, (char) 1);
        Body_NEW.internal_reset(pointer, false);
        return Body_NEW;
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
Body* obj = nativeObject->CreateBody(*((BodyCreationSettings* )inSettings_addr));
return (jlong)obj;
*/
    public static native long internal_native_CreateBody(long this_addr, long inSettings_addr);

    public Body CreateSoftBody(SoftBodyCreationSettings inSettings) {
        long pointer = internal_native_CreateSoftBody(native_address, (inSettings != null ? inSettings.native_address : 0));
        if (pointer == 0)
            return null;
        Body Body_NEW = new Body((byte) 1, (char) 1);
        Body_NEW.internal_reset(pointer, false);
        return Body_NEW;
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
Body* obj = nativeObject->CreateSoftBody(*((SoftBodyCreationSettings* )inSettings_addr));
return (jlong)obj;
*/
    public static native long internal_native_CreateSoftBody(long this_addr, long inSettings_addr);

    public Body CreateBodyWithID(BodyID inBodyID, BodyCreationSettings inSettings) {
        long pointer = internal_native_CreateBodyWithID(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inSettings != null ? inSettings.native_address : 0));
        if (pointer == 0)
            return null;
        Body Body_NEW = new Body((byte) 1, (char) 1);
        Body_NEW.internal_reset(pointer, false);
        return Body_NEW;
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
Body* obj = nativeObject->CreateBodyWithID(*((BodyID* )inBodyID_addr), *((BodyCreationSettings* )inSettings_addr));
return (jlong)obj;
*/
    public static native long internal_native_CreateBodyWithID(long this_addr, long inBodyID_addr, long inSettings_addr);

    public Body CreateSoftBodyWithID(BodyID inBodyID, SoftBodyCreationSettings inSettings) {
        long pointer = internal_native_CreateSoftBodyWithID(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inSettings != null ? inSettings.native_address : 0));
        if (pointer == 0)
            return null;
        Body Body_NEW = new Body((byte) 1, (char) 1);
        Body_NEW.internal_reset(pointer, false);
        return Body_NEW;
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
Body* obj = nativeObject->CreateSoftBodyWithID(*((BodyID* )inBodyID_addr), *((SoftBodyCreationSettings* )inSettings_addr));
return (jlong)obj;
*/
    public static native long internal_native_CreateSoftBodyWithID(long this_addr, long inBodyID_addr, long inSettings_addr);

    public Body CreateBodyWithoutID(BodyCreationSettings inSettings) {
        long pointer = internal_native_CreateBodyWithoutID(native_address, (inSettings != null ? inSettings.native_address : 0));
        if (pointer == 0)
            return null;
        Body Body_NEW = new Body((byte) 1, (char) 1);
        Body_NEW.internal_reset(pointer, false);
        return Body_NEW;
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
Body* obj = nativeObject->CreateBodyWithoutID(*((BodyCreationSettings* )inSettings_addr));
return (jlong)obj;
*/
    public static native long internal_native_CreateBodyWithoutID(long this_addr, long inSettings_addr);

    public Body CreateSoftBodyWithoutID(SoftBodyCreationSettings inSettings) {
        long pointer = internal_native_CreateSoftBodyWithoutID(native_address, (inSettings != null ? inSettings.native_address : 0));
        if (pointer == 0)
            return null;
        Body Body_NEW = new Body((byte) 1, (char) 1);
        Body_NEW.internal_reset(pointer, false);
        return Body_NEW;
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
Body* obj = nativeObject->CreateSoftBodyWithoutID(*((SoftBodyCreationSettings* )inSettings_addr));
return (jlong)obj;
*/
    public static native long internal_native_CreateSoftBodyWithoutID(long this_addr, long inSettings_addr);

    public void DestroyBodyWithoutID(Body inBody) {
        internal_native_DestroyBodyWithoutID(native_address, (inBody != null ? inBody.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->DestroyBodyWithoutID((Body* )inBody_addr);
*/
    public static native void internal_native_DestroyBodyWithoutID(long this_addr, long inBody_addr);

    public boolean AssignBodyID(Body ioBody) {
        return internal_native_AssignBodyID(native_address, (ioBody != null ? ioBody.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
return nativeObject->AssignBodyID((Body* )ioBody_addr);
*/
    public static native boolean internal_native_AssignBodyID(long this_addr, long ioBody_addr);

    public boolean AssignBodyID(Body ioBody, BodyID inBodyID) {
        return internal_native_AssignBodyID(native_address, (ioBody != null ? ioBody.native_address : 0), (inBodyID != null ? inBodyID.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
return nativeObject->AssignBodyID((Body* )ioBody_addr, *((BodyID* )inBodyID_addr));
*/
    public static native boolean internal_native_AssignBodyID(long this_addr, long ioBody_addr, long inBodyID_addr);

    public Body UnassignBodyID(BodyID inBodyID) {
        long pointer = internal_native_UnassignBodyID(native_address, (inBodyID != null ? inBodyID.native_address : 0));
        if (pointer == 0)
            return null;
        if (Body_TEMP_GEN_0 == null)
            Body_TEMP_GEN_0 = new Body((byte) 1, (char) 1);
        Body_TEMP_GEN_0.internal_reset(pointer, false);
        return Body_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
Body* obj = nativeObject->UnassignBodyID(*((BodyID* )inBodyID_addr));
return (jlong)obj;
*/
    public static native long internal_native_UnassignBodyID(long this_addr, long inBodyID_addr);

    public void UnassignBodyIDs(BodyIDMemRef inBodyIDs, int inNumber, BodyPtrMemRef outBodies) {
        internal_native_UnassignBodyIDs(native_address, (inBodyIDs != null ? inBodyIDs.native_address : 0), inNumber, (outBodies != null ? outBodies.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->UnassignBodyIDs((BodyIDMemRef* )inBodyIDs_addr, (int)inNumber, (BodyPtrMemRef* )outBodies_addr);
*/
    public static native void internal_native_UnassignBodyIDs(long this_addr, long inBodyIDs_addr, int inNumber, long outBodies_addr);

    public void DestroyBody(BodyID inBodyID) {
        internal_native_DestroyBody(native_address, (inBodyID != null ? inBodyID.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->DestroyBody(*((BodyID* )inBodyID_addr));
*/
    public static native void internal_native_DestroyBody(long this_addr, long inBodyID_addr);

    public void DestroyBodies(BodyIDMemRef inBodyIDs, int inNumber) {
        internal_native_DestroyBodies(native_address, (inBodyIDs != null ? inBodyIDs.native_address : 0), inNumber);
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->DestroyBodies((BodyIDMemRef* )inBodyIDs_addr, (int)inNumber);
*/
    public static native void internal_native_DestroyBodies(long this_addr, long inBodyIDs_addr, int inNumber);

    public void AddBody(BodyID inBodyID, EActivation inActivationMode) {
        internal_native_AddBody(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inActivationMode != null ? inActivationMode.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->AddBody(*((BodyID* )inBodyID_addr), (::EActivation)inActivationMode);
*/
    public static native void internal_native_AddBody(long this_addr, long inBodyID_addr, long inActivationMode);

    public void RemoveBody(BodyID inBodyID) {
        internal_native_RemoveBody(native_address, (inBodyID != null ? inBodyID.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->RemoveBody(*((BodyID* )inBodyID_addr));
*/
    public static native void internal_native_RemoveBody(long this_addr, long inBodyID_addr);

    public boolean IsAdded(BodyID inBodyID) {
        return internal_native_IsAdded(native_address, (inBodyID != null ? inBodyID.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
return nativeObject->IsAdded(*((BodyID* )inBodyID_addr));
*/
    public static native boolean internal_native_IsAdded(long this_addr, long inBodyID_addr);

    public BodyID CreateAndAddBody(BodyCreationSettings inSettings, EActivation inActivationMode) {
        long pointer = internal_native_CreateAndAddBody(native_address, (inSettings != null ? inSettings.native_address : 0), (inActivationMode != null ? inActivationMode.getValue() : 0));
        if (pointer == 0)
            return null;
        if (BodyID_TEMP_GEN_0 == null)
            BodyID_TEMP_GEN_0 = new BodyID((byte) 1, (char) 1);
        BodyID_TEMP_GEN_0.internal_reset(pointer, false);
        return BodyID_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
static BodyID copy_addr;
copy_addr = nativeObject->CreateAndAddBody(*((BodyCreationSettings* )inSettings_addr), (::EActivation)inActivationMode);
return (jlong)&copy_addr;*/
    public static native long internal_native_CreateAndAddBody(long this_addr, long inSettings_addr, long inActivationMode);

    public BodyID CreateAndAddSoftBody(SoftBodyCreationSettings inSettings, EActivation inActivationMode) {
        long pointer = internal_native_CreateAndAddSoftBody(native_address, (inSettings != null ? inSettings.native_address : 0), (inActivationMode != null ? inActivationMode.getValue() : 0));
        if (pointer == 0)
            return null;
        if (BodyID_TEMP_GEN_1 == null)
            BodyID_TEMP_GEN_1 = new BodyID((byte) 1, (char) 1);
        BodyID_TEMP_GEN_1.internal_reset(pointer, false);
        return BodyID_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
static BodyID copy_addr;
copy_addr = nativeObject->CreateAndAddSoftBody(*((SoftBodyCreationSettings* )inSettings_addr), (::EActivation)inActivationMode);
return (jlong)&copy_addr;*/
    public static native long internal_native_CreateAndAddSoftBody(long this_addr, long inSettings_addr, long inActivationMode);

    public BodyInterface_AddState AddBodiesPrepare(BodyIDMemRef ioBodies, int inNumber) {
        long pointer = internal_native_AddBodiesPrepare(native_address, (ioBodies != null ? ioBodies.native_address : 0), inNumber);
        if (pointer == 0)
            return null;
        if (BodyInterface_AddState_TEMP_GEN_0 == null)
            BodyInterface_AddState_TEMP_GEN_0 = new BodyInterface_AddState((byte) 1, (char) 1);
        BodyInterface_AddState_TEMP_GEN_0.internal_reset(pointer, false);
        return BodyInterface_AddState_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
BodyInterface_AddState* obj = nativeObject->AddBodiesPrepare((BodyIDMemRef* )ioBodies_addr, (int)inNumber);
return (jlong)obj;
*/
    public static native long internal_native_AddBodiesPrepare(long this_addr, long ioBodies_addr, int inNumber);

    public void AddBodiesFinalize(BodyIDMemRef ioBodies, int inNumber, BodyInterface_AddState inAddState, EActivation inActivationMode) {
        internal_native_AddBodiesFinalize(native_address, (ioBodies != null ? ioBodies.native_address : 0), inNumber, (inAddState != null ? inAddState.native_address : 0), (inActivationMode != null ? inActivationMode.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->AddBodiesFinalize((BodyIDMemRef* )ioBodies_addr, (int)inNumber, (BodyInterface_AddState* )inAddState_addr, (::EActivation)inActivationMode);
*/
    public static native void internal_native_AddBodiesFinalize(long this_addr, long ioBodies_addr, int inNumber, long inAddState_addr, long inActivationMode);

    public void AddBodiesAbort(BodyIDMemRef ioBodies, int inNumber, BodyInterface_AddState inAddState) {
        internal_native_AddBodiesAbort(native_address, (ioBodies != null ? ioBodies.native_address : 0), inNumber, (inAddState != null ? inAddState.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->AddBodiesAbort((BodyIDMemRef* )ioBodies_addr, (int)inNumber, (BodyInterface_AddState* )inAddState_addr);
*/
    public static native void internal_native_AddBodiesAbort(long this_addr, long ioBodies_addr, int inNumber, long inAddState_addr);

    public void RemoveBodies(BodyIDMemRef ioBodies, int inNumber) {
        internal_native_RemoveBodies(native_address, (ioBodies != null ? ioBodies.native_address : 0), inNumber);
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->RemoveBodies((BodyIDMemRef* )ioBodies_addr, (int)inNumber);
*/
    public static native void internal_native_RemoveBodies(long this_addr, long ioBodies_addr, int inNumber);

    public TwoBodyConstraint CreateConstraint(TwoBodyConstraintSettings inSettings, BodyID inBodyID1, BodyID inBodyID2) {
        long pointer = internal_native_CreateConstraint(native_address, (inSettings != null ? inSettings.native_address : 0), (inBodyID1 != null ? inBodyID1.native_address : 0), (inBodyID2 != null ? inBodyID2.native_address : 0));
        if (pointer == 0)
            return null;
        if (TwoBodyConstraint_TEMP_GEN_0 == null)
            TwoBodyConstraint_TEMP_GEN_0 = new TwoBodyConstraint((byte) 1, (char) 1);
        TwoBodyConstraint_TEMP_GEN_0.internal_reset(pointer, false);
        return TwoBodyConstraint_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
TwoBodyConstraint* obj = nativeObject->CreateConstraint((TwoBodyConstraintSettings* )inSettings_addr, *((BodyID* )inBodyID1_addr), *((BodyID* )inBodyID2_addr));
return (jlong)obj;
*/
    public static native long internal_native_CreateConstraint(long this_addr, long inSettings_addr, long inBodyID1_addr, long inBodyID2_addr);

    public void ActivateConstraint(TwoBodyConstraint inConstraint) {
        internal_native_ActivateConstraint(native_address, (inConstraint != null ? inConstraint.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->ActivateConstraint((TwoBodyConstraint* )inConstraint_addr);
*/
    public static native void internal_native_ActivateConstraint(long this_addr, long inConstraint_addr);

    public Shape GetShape(BodyID inBodyID) {
        long pointer = internal_native_GetShape(native_address, (inBodyID != null ? inBodyID.native_address : 0));
        if (pointer == 0)
            return null;
        if (Shape_TEMP_GEN_0 == null)
            Shape_TEMP_GEN_0 = new Shape((byte) 1, (char) 1);
        Shape_TEMP_GEN_0.internal_reset(pointer, false);
        return Shape_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
const Shape* obj = nativeObject->GetShape(*((BodyID* )inBodyID_addr));
return (jlong)obj;
*/
    public static native long internal_native_GetShape(long this_addr, long inBodyID_addr);

    public void SetShape(BodyID inBodyID, Shape inShape, boolean inUpdateMassProperties, EActivation inActivationMode) {
        internal_native_SetShape(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inShape != null ? inShape.native_address : 0), inUpdateMassProperties, (inActivationMode != null ? inActivationMode.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->SetShape(*((BodyID* )inBodyID_addr), (Shape* )inShape_addr, inUpdateMassProperties, (::EActivation)inActivationMode);
*/
    public static native void internal_native_SetShape(long this_addr, long inBodyID_addr, long inShape_addr, boolean inUpdateMassProperties, long inActivationMode);

    public void NotifyShapeChanged(BodyID inBodyID, Vec3 inPreviousCenterOfMass, boolean inUpdateMassProperties, EActivation inActivationMode) {
        internal_native_NotifyShapeChanged(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inPreviousCenterOfMass != null ? inPreviousCenterOfMass.native_address : 0), inUpdateMassProperties, (inActivationMode != null ? inActivationMode.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->NotifyShapeChanged(*((BodyID* )inBodyID_addr), *((Vec3* )inPreviousCenterOfMass_addr), inUpdateMassProperties, (::EActivation)inActivationMode);
*/
    public static native void internal_native_NotifyShapeChanged(long this_addr, long inBodyID_addr, long inPreviousCenterOfMass_addr, boolean inUpdateMassProperties, long inActivationMode);

    public void SetObjectLayer(BodyID inBodyID, int inLayer) {
        internal_native_SetObjectLayer(native_address, (inBodyID != null ? inBodyID.native_address : 0), inLayer);
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->SetObjectLayer(*((BodyID* )inBodyID_addr), inLayer);
*/
    public static native void internal_native_SetObjectLayer(long this_addr, long inBodyID_addr, int inLayer);

    public int GetObjectLayer(BodyID inBodyID) {
        return internal_native_GetObjectLayer(native_address, (inBodyID != null ? inBodyID.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
return nativeObject->GetObjectLayer(*((BodyID* )inBodyID_addr));
*/
    public static native int internal_native_GetObjectLayer(long this_addr, long inBodyID_addr);

    public void SetPositionAndRotation(BodyID inBodyID, Vec3 inPosition, Quat inRotation, EActivation inActivationMode) {
        internal_native_SetPositionAndRotation(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inPosition != null ? inPosition.native_address : 0), (inRotation != null ? inRotation.native_address : 0), (inActivationMode != null ? inActivationMode.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->SetPositionAndRotation(*((BodyID* )inBodyID_addr), *((Vec3* )inPosition_addr), *((Quat* )inRotation_addr), (::EActivation)inActivationMode);
*/
    public static native void internal_native_SetPositionAndRotation(long this_addr, long inBodyID_addr, long inPosition_addr, long inRotation_addr, long inActivationMode);

    public void SetPositionAndRotationWhenChanged(BodyID inBodyID, Vec3 inPosition, Quat inRotation, EActivation inActivationMode) {
        internal_native_SetPositionAndRotationWhenChanged(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inPosition != null ? inPosition.native_address : 0), (inRotation != null ? inRotation.native_address : 0), (inActivationMode != null ? inActivationMode.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->SetPositionAndRotationWhenChanged(*((BodyID* )inBodyID_addr), *((Vec3* )inPosition_addr), *((Quat* )inRotation_addr), (::EActivation)inActivationMode);
*/
    public static native void internal_native_SetPositionAndRotationWhenChanged(long this_addr, long inBodyID_addr, long inPosition_addr, long inRotation_addr, long inActivationMode);

    public void GetPositionAndRotation(BodyID inBodyID, Vec3 outPosition, Quat outRotation) {
        internal_native_GetPositionAndRotation(native_address, (inBodyID != null ? inBodyID.native_address : 0), (outPosition != null ? outPosition.native_address : 0), (outRotation != null ? outRotation.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->GetPositionAndRotation(*((BodyID* )inBodyID_addr), *((Vec3* )outPosition_addr), *((Quat* )outRotation_addr));
*/
    public static native void internal_native_GetPositionAndRotation(long this_addr, long inBodyID_addr, long outPosition_addr, long outRotation_addr);

    public void SetPosition(BodyID inBodyID, Vec3 inPosition, EActivation inActivationMode) {
        internal_native_SetPosition(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inPosition != null ? inPosition.native_address : 0), (inActivationMode != null ? inActivationMode.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->SetPosition(*((BodyID* )inBodyID_addr), *((Vec3* )inPosition_addr), (::EActivation)inActivationMode);
*/
    public static native void internal_native_SetPosition(long this_addr, long inBodyID_addr, long inPosition_addr, long inActivationMode);

    public Vec3 GetPosition(BodyID inBodyID) {
        long pointer = internal_native_GetPosition(native_address, (inBodyID != null ? inBodyID.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetPosition(*((BodyID* )inBodyID_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_GetPosition(long this_addr, long inBodyID_addr);

    public void SetRotation(BodyID inBodyID, Quat inRotation, EActivation inActivationMode) {
        internal_native_SetRotation(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inRotation != null ? inRotation.native_address : 0), (inActivationMode != null ? inActivationMode.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->SetRotation(*((BodyID* )inBodyID_addr), *((Quat* )inRotation_addr), (::EActivation)inActivationMode);
*/
    public static native void internal_native_SetRotation(long this_addr, long inBodyID_addr, long inRotation_addr, long inActivationMode);

    public Quat GetRotation(BodyID inBodyID) {
        long pointer = internal_native_GetRotation(native_address, (inBodyID != null ? inBodyID.native_address : 0));
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_0 == null)
            Quat_TEMP_GEN_0 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_0.internal_reset(pointer, false);
        return Quat_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->GetRotation(*((BodyID* )inBodyID_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_GetRotation(long this_addr, long inBodyID_addr);

    public Mat44 GetWorldTransform(BodyID inBodyID) {
        long pointer = internal_native_GetWorldTransform(native_address, (inBodyID != null ? inBodyID.native_address : 0));
        if (pointer == 0)
            return null;
        if (Mat44_TEMP_GEN_0 == null)
            Mat44_TEMP_GEN_0 = new Mat44((byte) 1, (char) 1);
        Mat44_TEMP_GEN_0.internal_reset(pointer, false);
        return Mat44_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
static Mat44 copy_addr;
copy_addr = nativeObject->GetWorldTransform(*((BodyID* )inBodyID_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_GetWorldTransform(long this_addr, long inBodyID_addr);

    public Mat44 GetCenterOfMassTransform(BodyID inBodyID) {
        long pointer = internal_native_GetCenterOfMassTransform(native_address, (inBodyID != null ? inBodyID.native_address : 0));
        if (pointer == 0)
            return null;
        if (Mat44_TEMP_GEN_1 == null)
            Mat44_TEMP_GEN_1 = new Mat44((byte) 1, (char) 1);
        Mat44_TEMP_GEN_1.internal_reset(pointer, false);
        return Mat44_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
static Mat44 copy_addr;
copy_addr = nativeObject->GetCenterOfMassTransform(*((BodyID* )inBodyID_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_GetCenterOfMassTransform(long this_addr, long inBodyID_addr);

    public void SetLinearAndAngularVelocity(BodyID inBodyID, Vec3 inLinearVelocity, Vec3 inAngularVelocity) {
        internal_native_SetLinearAndAngularVelocity(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inLinearVelocity != null ? inLinearVelocity.native_address : 0), (inAngularVelocity != null ? inAngularVelocity.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->SetLinearAndAngularVelocity(*((BodyID* )inBodyID_addr), *((Vec3* )inLinearVelocity_addr), *((Vec3* )inAngularVelocity_addr));
*/
    public static native void internal_native_SetLinearAndAngularVelocity(long this_addr, long inBodyID_addr, long inLinearVelocity_addr, long inAngularVelocity_addr);

    public void GetLinearAndAngularVelocity(BodyID inBodyID, Vec3 outLinearVelocity, Vec3 outAngularVelocity) {
        internal_native_GetLinearAndAngularVelocity(native_address, (inBodyID != null ? inBodyID.native_address : 0), (outLinearVelocity != null ? outLinearVelocity.native_address : 0), (outAngularVelocity != null ? outAngularVelocity.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->GetLinearAndAngularVelocity(*((BodyID* )inBodyID_addr), *((Vec3* )outLinearVelocity_addr), *((Vec3* )outAngularVelocity_addr));
*/
    public static native void internal_native_GetLinearAndAngularVelocity(long this_addr, long inBodyID_addr, long outLinearVelocity_addr, long outAngularVelocity_addr);

    public void SetLinearVelocity(BodyID inBodyID, Vec3 inLinearVelocity) {
        internal_native_SetLinearVelocity(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inLinearVelocity != null ? inLinearVelocity.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->SetLinearVelocity(*((BodyID* )inBodyID_addr), *((Vec3* )inLinearVelocity_addr));
*/
    public static native void internal_native_SetLinearVelocity(long this_addr, long inBodyID_addr, long inLinearVelocity_addr);

    public Vec3 GetLinearVelocity(BodyID inBodyID) {
        long pointer = internal_native_GetLinearVelocity(native_address, (inBodyID != null ? inBodyID.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetLinearVelocity(*((BodyID* )inBodyID_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_GetLinearVelocity(long this_addr, long inBodyID_addr);

    public void AddLinearVelocity(BodyID inBodyID, Vec3 inLinearVelocity) {
        internal_native_AddLinearVelocity(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inLinearVelocity != null ? inLinearVelocity.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->AddLinearVelocity(*((BodyID* )inBodyID_addr), *((Vec3* )inLinearVelocity_addr));
*/
    public static native void internal_native_AddLinearVelocity(long this_addr, long inBodyID_addr, long inLinearVelocity_addr);

    public void AddLinearAndAngularVelocity(BodyID inBodyID, Vec3 inLinearVelocity, Vec3 inAngularVelocity) {
        internal_native_AddLinearAndAngularVelocity(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inLinearVelocity != null ? inLinearVelocity.native_address : 0), (inAngularVelocity != null ? inAngularVelocity.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->AddLinearAndAngularVelocity(*((BodyID* )inBodyID_addr), *((Vec3* )inLinearVelocity_addr), *((Vec3* )inAngularVelocity_addr));
*/
    public static native void internal_native_AddLinearAndAngularVelocity(long this_addr, long inBodyID_addr, long inLinearVelocity_addr, long inAngularVelocity_addr);

    public void SetAngularVelocity(BodyID inBodyID, Vec3 inAngularVelocity) {
        internal_native_SetAngularVelocity(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inAngularVelocity != null ? inAngularVelocity.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->SetAngularVelocity(*((BodyID* )inBodyID_addr), *((Vec3* )inAngularVelocity_addr));
*/
    public static native void internal_native_SetAngularVelocity(long this_addr, long inBodyID_addr, long inAngularVelocity_addr);

    public Vec3 GetAngularVelocity(BodyID inBodyID) {
        long pointer = internal_native_GetAngularVelocity(native_address, (inBodyID != null ? inBodyID.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetAngularVelocity(*((BodyID* )inBodyID_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_GetAngularVelocity(long this_addr, long inBodyID_addr);

    public Vec3 GetPointVelocity(BodyID inBodyID, Vec3 inPoint) {
        long pointer = internal_native_GetPointVelocity(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inPoint != null ? inPoint.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_3 == null)
            Vec3_TEMP_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_3.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetPointVelocity(*((BodyID* )inBodyID_addr), *((Vec3* )inPoint_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_GetPointVelocity(long this_addr, long inBodyID_addr, long inPoint_addr);

    public void SetPositionRotationAndVelocity(BodyID inBodyID, Vec3 inPosition, Quat inRotation, Vec3 inLinearVelocity, Vec3 inAngularVelocity) {
        internal_native_SetPositionRotationAndVelocity(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inPosition != null ? inPosition.native_address : 0), (inRotation != null ? inRotation.native_address : 0), (inLinearVelocity != null ? inLinearVelocity.native_address : 0), (inAngularVelocity != null ? inAngularVelocity.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->SetPositionRotationAndVelocity(*((BodyID* )inBodyID_addr), *((Vec3* )inPosition_addr), *((Quat* )inRotation_addr), *((Vec3* )inLinearVelocity_addr), *((Vec3* )inAngularVelocity_addr));
*/
    public static native void internal_native_SetPositionRotationAndVelocity(long this_addr, long inBodyID_addr, long inPosition_addr, long inRotation_addr, long inLinearVelocity_addr, long inAngularVelocity_addr);

    public void MoveKinematic(BodyID inBodyID, Vec3 inPosition, Quat inRotation, float inDeltaTime) {
        internal_native_MoveKinematic(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inPosition != null ? inPosition.native_address : 0), (inRotation != null ? inRotation.native_address : 0), inDeltaTime);
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->MoveKinematic(*((BodyID* )inBodyID_addr), *((Vec3* )inPosition_addr), *((Quat* )inRotation_addr), (float)inDeltaTime);
*/
    public static native void internal_native_MoveKinematic(long this_addr, long inBodyID_addr, long inPosition_addr, long inRotation_addr, float inDeltaTime);

    public void ActivateBody(BodyID inBodyID) {
        internal_native_ActivateBody(native_address, (inBodyID != null ? inBodyID.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->ActivateBody(*((BodyID* )inBodyID_addr));
*/
    public static native void internal_native_ActivateBody(long this_addr, long inBodyID_addr);

    public void ActivateBodies(BodyIDMemRef inBodyIDs, int inNumber) {
        internal_native_ActivateBodies(native_address, (inBodyIDs != null ? inBodyIDs.native_address : 0), inNumber);
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->ActivateBodies((BodyIDMemRef* )inBodyIDs_addr, (int)inNumber);
*/
    public static native void internal_native_ActivateBodies(long this_addr, long inBodyIDs_addr, int inNumber);

    public void ActivateBodiesInAABox(AABox inBox, BroadPhaseLayerFilter inBroadPhaseLayerFilter, ObjectLayerFilter inObjectLayerFilter) {
        internal_native_ActivateBodiesInAABox(native_address, (inBox != null ? inBox.native_address : 0), (inBroadPhaseLayerFilter != null ? inBroadPhaseLayerFilter.native_address : 0), (inObjectLayerFilter != null ? inObjectLayerFilter.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->ActivateBodiesInAABox(*((AABox* )inBox_addr), *((BroadPhaseLayerFilter* )inBroadPhaseLayerFilter_addr), *((ObjectLayerFilter* )inObjectLayerFilter_addr));
*/
    public static native void internal_native_ActivateBodiesInAABox(long this_addr, long inBox_addr, long inBroadPhaseLayerFilter_addr, long inObjectLayerFilter_addr);

    public void DeactivateBody(BodyID inBodyID) {
        internal_native_DeactivateBody(native_address, (inBodyID != null ? inBodyID.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->DeactivateBody(*((BodyID* )inBodyID_addr));
*/
    public static native void internal_native_DeactivateBody(long this_addr, long inBodyID_addr);

    public void DeactivateBodies(BodyIDMemRef inBodyIDs, int inNumber) {
        internal_native_DeactivateBodies(native_address, (inBodyIDs != null ? inBodyIDs.native_address : 0), inNumber);
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->DeactivateBodies((BodyIDMemRef* )inBodyIDs_addr, (int)inNumber);
*/
    public static native void internal_native_DeactivateBodies(long this_addr, long inBodyIDs_addr, int inNumber);

    public boolean IsActive(BodyID inBodyID) {
        return internal_native_IsActive(native_address, (inBodyID != null ? inBodyID.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
return nativeObject->IsActive(*((BodyID* )inBodyID_addr));
*/
    public static native boolean internal_native_IsActive(long this_addr, long inBodyID_addr);

    public void ResetSleepTimer(BodyID inBodyID) {
        internal_native_ResetSleepTimer(native_address, (inBodyID != null ? inBodyID.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->ResetSleepTimer(*((BodyID* )inBodyID_addr));
*/
    public static native void internal_native_ResetSleepTimer(long this_addr, long inBodyID_addr);

    public EBodyType GetBodyType(BodyID inBodyID) {
        int value = internal_native_GetBodyType(native_address, (inBodyID != null ? inBodyID.native_address : 0));
        return EBodyType.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
return (int)nativeObject->GetBodyType(*((BodyID* )inBodyID_addr));
*/
    public static native int internal_native_GetBodyType(long this_addr, long inBodyID_addr);

    public void SetMotionType(BodyID inBodyID, EMotionType inMotionType, EActivation inActivationMode) {
        internal_native_SetMotionType(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inMotionType != null ? inMotionType.getValue() : 0), (inActivationMode != null ? inActivationMode.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->SetMotionType(*((BodyID* )inBodyID_addr), (::EMotionType)inMotionType, (::EActivation)inActivationMode);
*/
    public static native void internal_native_SetMotionType(long this_addr, long inBodyID_addr, long inMotionType, long inActivationMode);

    public EMotionType GetMotionType(BodyID inBodyID) {
        int value = internal_native_GetMotionType(native_address, (inBodyID != null ? inBodyID.native_address : 0));
        return EMotionType.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
return (int)nativeObject->GetMotionType(*((BodyID* )inBodyID_addr));
*/
    public static native int internal_native_GetMotionType(long this_addr, long inBodyID_addr);

    public void SetMotionQuality(BodyID inBodyID, EMotionQuality inMotionQuality) {
        internal_native_SetMotionQuality(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inMotionQuality != null ? inMotionQuality.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->SetMotionQuality(*((BodyID* )inBodyID_addr), (::EMotionQuality)inMotionQuality);
*/
    public static native void internal_native_SetMotionQuality(long this_addr, long inBodyID_addr, long inMotionQuality);

    public EMotionQuality GetMotionQuality(BodyID inBodyID) {
        int value = internal_native_GetMotionQuality(native_address, (inBodyID != null ? inBodyID.native_address : 0));
        return EMotionQuality.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
return (int)nativeObject->GetMotionQuality(*((BodyID* )inBodyID_addr));
*/
    public static native int internal_native_GetMotionQuality(long this_addr, long inBodyID_addr);

    public Mat44 GetInverseInertia(BodyID inBodyID) {
        long pointer = internal_native_GetInverseInertia(native_address, (inBodyID != null ? inBodyID.native_address : 0));
        if (pointer == 0)
            return null;
        if (Mat44_TEMP_GEN_2 == null)
            Mat44_TEMP_GEN_2 = new Mat44((byte) 1, (char) 1);
        Mat44_TEMP_GEN_2.internal_reset(pointer, false);
        return Mat44_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
static Mat44 copy_addr;
copy_addr = nativeObject->GetInverseInertia(*((BodyID* )inBodyID_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_GetInverseInertia(long this_addr, long inBodyID_addr);

    public void SetRestitution(BodyID inBodyID, float inRestitution) {
        internal_native_SetRestitution(native_address, (inBodyID != null ? inBodyID.native_address : 0), inRestitution);
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->SetRestitution(*((BodyID* )inBodyID_addr), (float)inRestitution);
*/
    public static native void internal_native_SetRestitution(long this_addr, long inBodyID_addr, float inRestitution);

    public float GetRestitution(BodyID inBodyID) {
        return internal_native_GetRestitution(native_address, (inBodyID != null ? inBodyID.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
return nativeObject->GetRestitution(*((BodyID* )inBodyID_addr));
*/
    public static native float internal_native_GetRestitution(long this_addr, long inBodyID_addr);

    public void SetFriction(BodyID inBodyID, float inFriction) {
        internal_native_SetFriction(native_address, (inBodyID != null ? inBodyID.native_address : 0), inFriction);
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->SetFriction(*((BodyID* )inBodyID_addr), (float)inFriction);
*/
    public static native void internal_native_SetFriction(long this_addr, long inBodyID_addr, float inFriction);

    public float GetFriction(BodyID inBodyID) {
        return internal_native_GetFriction(native_address, (inBodyID != null ? inBodyID.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
return nativeObject->GetFriction(*((BodyID* )inBodyID_addr));
*/
    public static native float internal_native_GetFriction(long this_addr, long inBodyID_addr);

    public void SetGravityFactor(BodyID inBodyID, float inFactor) {
        internal_native_SetGravityFactor(native_address, (inBodyID != null ? inBodyID.native_address : 0), inFactor);
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->SetGravityFactor(*((BodyID* )inBodyID_addr), (float)inFactor);
*/
    public static native void internal_native_SetGravityFactor(long this_addr, long inBodyID_addr, float inFactor);

    public float GetGravityFactor(BodyID inBodyID) {
        return internal_native_GetGravityFactor(native_address, (inBodyID != null ? inBodyID.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
return nativeObject->GetGravityFactor(*((BodyID* )inBodyID_addr));
*/
    public static native float internal_native_GetGravityFactor(long this_addr, long inBodyID_addr);

    public void SetUseManifoldReduction(BodyID inBodyID, boolean inUseReduction) {
        internal_native_SetUseManifoldReduction(native_address, (inBodyID != null ? inBodyID.native_address : 0), inUseReduction);
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->SetUseManifoldReduction(*((BodyID* )inBodyID_addr), inUseReduction);
*/
    public static native void internal_native_SetUseManifoldReduction(long this_addr, long inBodyID_addr, boolean inUseReduction);

    public boolean GetUseManifoldReduction(BodyID inBodyID) {
        return internal_native_GetUseManifoldReduction(native_address, (inBodyID != null ? inBodyID.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
return nativeObject->GetUseManifoldReduction(*((BodyID* )inBodyID_addr));
*/
    public static native boolean internal_native_GetUseManifoldReduction(long this_addr, long inBodyID_addr);

    public void SetCollisionGroup(BodyID inBodyID, CollisionGroup inCollisionGroup) {
        internal_native_SetCollisionGroup(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inCollisionGroup != null ? inCollisionGroup.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->SetCollisionGroup(*((BodyID* )inBodyID_addr), *((CollisionGroup* )inCollisionGroup_addr));
*/
    public static native void internal_native_SetCollisionGroup(long this_addr, long inBodyID_addr, long inCollisionGroup_addr);

    public CollisionGroup GetCollisionGroup(BodyID inBodyID) {
        long pointer = internal_native_GetCollisionGroup(native_address, (inBodyID != null ? inBodyID.native_address : 0));
        if (pointer == 0)
            return null;
        if (CollisionGroup_TEMP_GEN_0 == null)
            CollisionGroup_TEMP_GEN_0 = new CollisionGroup((byte) 1, (char) 1);
        CollisionGroup_TEMP_GEN_0.internal_reset(pointer, false);
        return CollisionGroup_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
return (jlong)&nativeObject->GetCollisionGroup(*((BodyID* )inBodyID_addr));
*/
    public static native long internal_native_GetCollisionGroup(long this_addr, long inBodyID_addr);

    public void AddForce(BodyID inBodyID, Vec3 inForce, EActivation inActivationMode) {
        internal_native_AddForce(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inForce != null ? inForce.native_address : 0), (inActivationMode != null ? inActivationMode.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->AddForce(*((BodyID* )inBodyID_addr), *((Vec3* )inForce_addr), (::EActivation)inActivationMode);
*/
    public static native void internal_native_AddForce(long this_addr, long inBodyID_addr, long inForce_addr, long inActivationMode);

    public void AddForce(BodyID inBodyID, Vec3 inForce, Vec3 inPoint, EActivation inActivationMode) {
        internal_native_AddForce(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inForce != null ? inForce.native_address : 0), (inPoint != null ? inPoint.native_address : 0), (inActivationMode != null ? inActivationMode.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->AddForce(*((BodyID* )inBodyID_addr), *((Vec3* )inForce_addr), *((Vec3* )inPoint_addr), (::EActivation)inActivationMode);
*/
    public static native void internal_native_AddForce(long this_addr, long inBodyID_addr, long inForce_addr, long inPoint_addr, long inActivationMode);

    public void AddTorque(BodyID inBodyID, Vec3 inTorque, EActivation inActivationMode) {
        internal_native_AddTorque(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inTorque != null ? inTorque.native_address : 0), (inActivationMode != null ? inActivationMode.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->AddTorque(*((BodyID* )inBodyID_addr), *((Vec3* )inTorque_addr), (::EActivation)inActivationMode);
*/
    public static native void internal_native_AddTorque(long this_addr, long inBodyID_addr, long inTorque_addr, long inActivationMode);

    public void AddForceAndTorque(BodyID inBodyID, Vec3 inForce, Vec3 inTorque, EActivation inActivationMode) {
        internal_native_AddForceAndTorque(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inForce != null ? inForce.native_address : 0), (inTorque != null ? inTorque.native_address : 0), (inActivationMode != null ? inActivationMode.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->AddForceAndTorque(*((BodyID* )inBodyID_addr), *((Vec3* )inForce_addr), *((Vec3* )inTorque_addr), (::EActivation)inActivationMode);
*/
    public static native void internal_native_AddForceAndTorque(long this_addr, long inBodyID_addr, long inForce_addr, long inTorque_addr, long inActivationMode);

    public boolean ApplyBuoyancyImpulse(BodyID inBodyID, Vec3 inSurfacePosition, Vec3 inSurfaceNormal, float inBuoyancy, float inLinearDrag, float inAngularDrag, Vec3 inFluidVelocity, Vec3 inGravity, float inDeltaTime) {
        return internal_native_ApplyBuoyancyImpulse(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inSurfacePosition != null ? inSurfacePosition.native_address : 0), (inSurfaceNormal != null ? inSurfaceNormal.native_address : 0), inBuoyancy, inLinearDrag, inAngularDrag, (inFluidVelocity != null ? inFluidVelocity.native_address : 0), (inGravity != null ? inGravity.native_address : 0), inDeltaTime);
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
return nativeObject->ApplyBuoyancyImpulse(*((BodyID* )inBodyID_addr), *((Vec3* )inSurfacePosition_addr), *((Vec3* )inSurfaceNormal_addr), (float)inBuoyancy, (float)inLinearDrag, (float)inAngularDrag, *((Vec3* )inFluidVelocity_addr), *((Vec3* )inGravity_addr), (float)inDeltaTime);
*/
    public static native boolean internal_native_ApplyBuoyancyImpulse(long this_addr, long inBodyID_addr, long inSurfacePosition_addr, long inSurfaceNormal_addr, float inBuoyancy, float inLinearDrag, float inAngularDrag, long inFluidVelocity_addr, long inGravity_addr, float inDeltaTime);

    public void AddImpulse(BodyID inBodyID, Vec3 inImpulse) {
        internal_native_AddImpulse(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inImpulse != null ? inImpulse.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->AddImpulse(*((BodyID* )inBodyID_addr), *((Vec3* )inImpulse_addr));
*/
    public static native void internal_native_AddImpulse(long this_addr, long inBodyID_addr, long inImpulse_addr);

    public void AddImpulse(BodyID inBodyID, Vec3 inImpulse, Vec3 inPosition) {
        internal_native_AddImpulse(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inImpulse != null ? inImpulse.native_address : 0), (inPosition != null ? inPosition.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->AddImpulse(*((BodyID* )inBodyID_addr), *((Vec3* )inImpulse_addr), *((Vec3* )inPosition_addr));
*/
    public static native void internal_native_AddImpulse(long this_addr, long inBodyID_addr, long inImpulse_addr, long inPosition_addr);

    public void AddAngularImpulse(BodyID inBodyID, Vec3 inAngularImpulse) {
        internal_native_AddAngularImpulse(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inAngularImpulse != null ? inAngularImpulse.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->AddAngularImpulse(*((BodyID* )inBodyID_addr), *((Vec3* )inAngularImpulse_addr));
*/
    public static native void internal_native_AddAngularImpulse(long this_addr, long inBodyID_addr, long inAngularImpulse_addr);

    public TransformedShape GetTransformedShape(BodyID inBodyID) {
        long pointer = internal_native_GetTransformedShape(native_address, (inBodyID != null ? inBodyID.native_address : 0));
        if (pointer == 0)
            return null;
        if (TransformedShape_TEMP_GEN_0 == null)
            TransformedShape_TEMP_GEN_0 = new TransformedShape((byte) 1, (char) 1);
        TransformedShape_TEMP_GEN_0.internal_reset(pointer, false);
        return TransformedShape_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
static TransformedShape copy_addr;
copy_addr = nativeObject->GetTransformedShape(*((BodyID* )inBodyID_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_GetTransformedShape(long this_addr, long inBodyID_addr);

    public long GetUserData(BodyID inBodyID) {
        return internal_native_GetUserData(native_address, (inBodyID != null ? inBodyID.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
return nativeObject->GetUserData(*((BodyID* )inBodyID_addr));
*/
    public static native long internal_native_GetUserData(long this_addr, long inBodyID_addr);

    public void SetUserData(BodyID inBodyID, long inUserData) {
        internal_native_SetUserData(native_address, (inBodyID != null ? inBodyID.native_address : 0), inUserData);
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->SetUserData(*((BodyID* )inBodyID_addr), inUserData);
*/
    public static native void internal_native_SetUserData(long this_addr, long inBodyID_addr, long inUserData);

    public PhysicsMaterial GetMaterial(BodyID inBodyID, SubShapeID inSubShapeID) {
        long pointer = internal_native_GetMaterial(native_address, (inBodyID != null ? inBodyID.native_address : 0), (inSubShapeID != null ? inSubShapeID.native_address : 0));
        if (pointer == 0)
            return null;
        if (PhysicsMaterial_TEMP_GEN_0 == null)
            PhysicsMaterial_TEMP_GEN_0 = new PhysicsMaterial((byte) 1, (char) 1);
        PhysicsMaterial_TEMP_GEN_0.internal_reset(pointer, false);
        return PhysicsMaterial_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
const PhysicsMaterial* obj = nativeObject->GetMaterial(*((BodyID* )inBodyID_addr), *((SubShapeID* )inSubShapeID_addr));
return (jlong)obj;
*/
    public static native long internal_native_GetMaterial(long this_addr, long inBodyID_addr, long inSubShapeID_addr);

    public void InvalidateContactCache(BodyID inBodyID) {
        internal_native_InvalidateContactCache(native_address, (inBodyID != null ? inBodyID.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyInterface* nativeObject = (BodyInterface*)this_addr;
nativeObject->InvalidateContactCache(*((BodyID* )inBodyID_addr));
*/
    public static native void internal_native_InvalidateContactCache(long this_addr, long inBodyID_addr);
}
