/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.body;

import jolt.idl.IDLBase;
import jolt.core.SharedMutex;
import jolt.core.MutexMask;

public class BodyLockInterface extends IDLBase {

    private Body Body_TEMP_GEN_0;

    private SharedMutex SharedMutex_TEMP_GEN_0;

    private SharedMutex SharedMutex_TEMP_GEN_1;

    private MutexMask MutexMask_TEMP_GEN_0;

    static public final BodyLockInterface T_01 = new BodyLockInterface((byte) 1, (char) 1);

    static public final BodyLockInterface T_02 = new BodyLockInterface((byte) 1, (char) 1);

    static public final BodyLockInterface T_03 = new BodyLockInterface((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public BodyLockInterface(byte b, char c) {
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
BodyLockInterface* nativeObject = (BodyLockInterface*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public Body TryGetBody(BodyID inBodyID) {
        long pointer = internal_native_TryGetBody(native_address, (inBodyID != null ? inBodyID.native_address : 0));
        if (pointer == 0)
            return null;
        if (Body_TEMP_GEN_0 == null)
            Body_TEMP_GEN_0 = new Body((byte) 1, (char) 1);
        Body_TEMP_GEN_0.internal_reset(pointer, false);
        return Body_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
BodyLockInterface* nativeObject = (BodyLockInterface*)this_addr;
Body* obj = nativeObject->TryGetBody(*((BodyID* )inBodyID_addr));
return (jlong)obj;
*/
    public static native long internal_native_TryGetBody(long this_addr, long inBodyID_addr);

    public SharedMutex LockRead(BodyID inBodyID) {
        long pointer = internal_native_LockRead(native_address, (inBodyID != null ? inBodyID.native_address : 0));
        if (pointer == 0)
            return null;
        if (SharedMutex_TEMP_GEN_0 == null)
            SharedMutex_TEMP_GEN_0 = new SharedMutex((byte) 1, (char) 1);
        SharedMutex_TEMP_GEN_0.internal_reset(pointer, false);
        return SharedMutex_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
BodyLockInterface* nativeObject = (BodyLockInterface*)this_addr;
SharedMutex* obj = nativeObject->LockRead(*((BodyID* )inBodyID_addr));
return (jlong)obj;
*/
    public static native long internal_native_LockRead(long this_addr, long inBodyID_addr);

    public void UnlockRead(SharedMutex inMutex) {
        internal_native_UnlockRead(native_address, (inMutex != null ? inMutex.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyLockInterface* nativeObject = (BodyLockInterface*)this_addr;
nativeObject->UnlockRead((SharedMutex* )inMutex_addr);
*/
    public static native void internal_native_UnlockRead(long this_addr, long inMutex_addr);

    public SharedMutex LockWrite(BodyID inBodyID) {
        long pointer = internal_native_LockWrite(native_address, (inBodyID != null ? inBodyID.native_address : 0));
        if (pointer == 0)
            return null;
        if (SharedMutex_TEMP_GEN_1 == null)
            SharedMutex_TEMP_GEN_1 = new SharedMutex((byte) 1, (char) 1);
        SharedMutex_TEMP_GEN_1.internal_reset(pointer, false);
        return SharedMutex_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
BodyLockInterface* nativeObject = (BodyLockInterface*)this_addr;
SharedMutex* obj = nativeObject->LockWrite(*((BodyID* )inBodyID_addr));
return (jlong)obj;
*/
    public static native long internal_native_LockWrite(long this_addr, long inBodyID_addr);

    public void UnlockWrite(SharedMutex inMutex) {
        internal_native_UnlockWrite(native_address, (inMutex != null ? inMutex.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyLockInterface* nativeObject = (BodyLockInterface*)this_addr;
nativeObject->UnlockWrite((SharedMutex* )inMutex_addr);
*/
    public static native void internal_native_UnlockWrite(long this_addr, long inMutex_addr);

    public MutexMask GetMutexMask(IDLArrayBodyID inBodies, int inNumber) {
        long pointer = internal_native_GetMutexMask(native_address, (inBodies != null ? inBodies.getPointer() : 0), inNumber);
        if (pointer == 0)
            return null;
        if (MutexMask_TEMP_GEN_0 == null)
            MutexMask_TEMP_GEN_0 = new MutexMask((byte) 1, (char) 1);
        MutexMask_TEMP_GEN_0.internal_reset(pointer, false);
        return MutexMask_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
BodyLockInterface* nativeObject = (BodyLockInterface*)this_addr;
static MutexMask copy_addr;
copy_addr = nativeObject->GetMutexMask((BodyID*)inBodies_addr, (int)inNumber);
return (jlong)&copy_addr;*/
    public static native long internal_native_GetMutexMask(long this_addr, long inBodies_addr, int inNumber);

    public void LockRead(MutexMask inMutexMask) {
        internal_native_LockRead_0(native_address, (inMutexMask != null ? inMutexMask.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyLockInterface* nativeObject = (BodyLockInterface*)this_addr;
nativeObject->LockRead(*((MutexMask* )inMutexMask_addr));
*/
    public static native void internal_native_LockRead_0(long this_addr, long inMutexMask_addr);

    public void UnlockRead(MutexMask inMutexMask) {
        internal_native_UnlockRead_0(native_address, (inMutexMask != null ? inMutexMask.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyLockInterface* nativeObject = (BodyLockInterface*)this_addr;
nativeObject->UnlockRead(*((MutexMask* )inMutexMask_addr));
*/
    public static native void internal_native_UnlockRead_0(long this_addr, long inMutexMask_addr);

    public void LockWrite(MutexMask inMutexMask) {
        internal_native_LockWrite_0(native_address, (inMutexMask != null ? inMutexMask.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyLockInterface* nativeObject = (BodyLockInterface*)this_addr;
nativeObject->LockWrite(*((MutexMask* )inMutexMask_addr));
*/
    public static native void internal_native_LockWrite_0(long this_addr, long inMutexMask_addr);

    public void UnlockWrite(MutexMask inMutexMask) {
        internal_native_UnlockWrite_0(native_address, (inMutexMask != null ? inMutexMask.native_address : 0));
    }

    /*[-JNI;-NATIVE]
BodyLockInterface* nativeObject = (BodyLockInterface*)this_addr;
nativeObject->UnlockWrite(*((MutexMask* )inMutexMask_addr));
*/
    public static native void internal_native_UnlockWrite_0(long this_addr, long inMutexMask_addr);
}
