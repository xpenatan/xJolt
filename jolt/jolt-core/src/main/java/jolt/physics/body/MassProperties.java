/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.body;

import jolt.idl.IDLBase;
import jolt.math.Vec3;
import jolt.math.Mat44;

public class MassProperties extends IDLBase {

    static private Vec3 Vec3_TEMP_STATIC_GEN_0;

    private Mat44 Mat44_TEMP_GEN_0;

    static public final MassProperties T_01 = new MassProperties((byte) 1, (char) 1);

    static public final MassProperties T_02 = new MassProperties((byte) 1, (char) 1);

    static public final MassProperties T_03 = new MassProperties((byte) 1, (char) 1);

    public MassProperties() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new MassProperties();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public MassProperties(byte b, char c) {
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
MassProperties* nativeObject = (MassProperties*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void SetMassAndInertiaOfSolidBox(Vec3 inBoxSize, float inDensity) {
        internal_native_SetMassAndInertiaOfSolidBox(native_address, (inBoxSize != null ? inBoxSize.native_address : 0), inDensity);
    }

    /*[-JNI;-NATIVE]
MassProperties* nativeObject = (MassProperties*)this_addr;
nativeObject->SetMassAndInertiaOfSolidBox(*((Vec3* )inBoxSize_addr), (float)inDensity);
*/
    public static native void internal_native_SetMassAndInertiaOfSolidBox(long this_addr, long inBoxSize_addr, float inDensity);

    public void ScaleToMass(float inMass) {
        internal_native_ScaleToMass(native_address, inMass);
    }

    /*[-JNI;-NATIVE]
MassProperties* nativeObject = (MassProperties*)this_addr;
nativeObject->ScaleToMass((float)inMass);
*/
    public static native void internal_native_ScaleToMass(long this_addr, float inMass);

    public static Vec3 sGetEquivalentSolidBoxSize(float inMass, Vec3 inInertiaDiagonal) {
        long pointer = internal_native_sGetEquivalentSolidBoxSize(inMass, (inInertiaDiagonal != null ? inInertiaDiagonal.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_STATIC_GEN_0 == null)
            Vec3_TEMP_STATIC_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_STATIC_GEN_0;
    }

    /*[-JNI;-NATIVE]
static Vec3 copy_addr;
copy_addr = MassProperties::sGetEquivalentSolidBoxSize((float)inMass, *((Vec3* )inInertiaDiagonal_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_sGetEquivalentSolidBoxSize(float inMass, long inInertiaDiagonal_addr);

    public void Rotate(Mat44 inRotation) {
        internal_native_Rotate(native_address, (inRotation != null ? inRotation.native_address : 0));
    }

    /*[-JNI;-NATIVE]
MassProperties* nativeObject = (MassProperties*)this_addr;
nativeObject->Rotate(*((Mat44* )inRotation_addr));
*/
    public static native void internal_native_Rotate(long this_addr, long inRotation_addr);

    public void Translate(Vec3 inTranslation) {
        internal_native_Translate(native_address, (inTranslation != null ? inTranslation.native_address : 0));
    }

    /*[-JNI;-NATIVE]
MassProperties* nativeObject = (MassProperties*)this_addr;
nativeObject->Translate(*((Vec3* )inTranslation_addr));
*/
    public static native void internal_native_Translate(long this_addr, long inTranslation_addr);

    public void Scale(Vec3 inScale) {
        internal_native_Scale(native_address, (inScale != null ? inScale.native_address : 0));
    }

    /*[-JNI;-NATIVE]
MassProperties* nativeObject = (MassProperties*)this_addr;
nativeObject->Scale(*((Vec3* )inScale_addr));
*/
    public static native void internal_native_Scale(long this_addr, long inScale_addr);

    public float get_mMass() {
        return internal_native_get_mMass(native_address);
    }

    /*[-JNI;-NATIVE]
MassProperties* nativeObject = (MassProperties*)this_addr;
return nativeObject->mMass;
*/
    public static native float internal_native_get_mMass(long this_addr);

    public void set_mMass(float mMass) {
        internal_native_set_mMass(native_address, mMass);
    }

    /*[-JNI;-NATIVE]
MassProperties* nativeObject = (MassProperties*)this_addr;
nativeObject->mMass = mMass;
*/
    public static native void internal_native_set_mMass(long this_addr, float mMass);

    public Mat44 get_mInertia() {
        long pointer = internal_native_get_mInertia(native_address);
        if (pointer == 0)
            return null;
        if (Mat44_TEMP_GEN_0 == null)
            Mat44_TEMP_GEN_0 = new Mat44((byte) 1, (char) 1);
        Mat44_TEMP_GEN_0.internal_reset(pointer, false);
        return Mat44_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
MassProperties* nativeObject = (MassProperties*)this_addr;
return (jlong)&nativeObject->mInertia;
*/
    public static native long internal_native_get_mInertia(long this_addr);

    public void set_mInertia(Mat44 mInertia) {
        internal_native_set_mInertia(native_address, (mInertia != null ? mInertia.native_address : 0));
    }

    /*[-JNI;-NATIVE]
MassProperties* nativeObject = (MassProperties*)this_addr;
nativeObject->mInertia = *((Mat44*)mInertia_addr);
*/
    public static native void internal_native_set_mInertia(long this_addr, long mInertia_addr);
}
