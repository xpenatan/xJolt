/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.character;

import jolt.idl.IDLBase;
import jolt.math.Vec3;
import jolt.physics.collision.shape.Shape;
import jolt.enums.EGroundState;
import jolt.physics.collision.PhysicsMaterial;
import jolt.physics.body.BodyID;

public class CharacterBase extends IDLBase {

    private Vec3 Vec3_TEMP_GEN_0;

    private Shape Shape_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_2;

    private Vec3 Vec3_TEMP_GEN_3;

    private PhysicsMaterial PhysicsMaterial_TEMP_GEN_0;

    private BodyID BodyID_TEMP_GEN_0;

    static public final CharacterBase T_01 = new CharacterBase((byte) 1, (char) 1);

    static public final CharacterBase T_02 = new CharacterBase((byte) 1, (char) 1);

    static public final CharacterBase T_03 = new CharacterBase((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public CharacterBase(byte b, char c) {
    }

    public int GetRefCount() {
        return internal_native_GetRefCount(native_address);
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
return nativeObject->GetRefCount();
*/
    public static native int internal_native_GetRefCount(long this_addr);

    public void AddRef() {
        internal_native_AddRef(native_address);
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
nativeObject->AddRef();
*/
    public static native void internal_native_AddRef(long this_addr);

    public void Release() {
        internal_native_Release(native_address);
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
nativeObject->Release();
*/
    public static native void internal_native_Release(long this_addr);

    public void SetMaxSlopeAngle(float inMaxSlopeAngle) {
        internal_native_SetMaxSlopeAngle(native_address, inMaxSlopeAngle);
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
nativeObject->SetMaxSlopeAngle((float)inMaxSlopeAngle);
*/
    public static native void internal_native_SetMaxSlopeAngle(long this_addr, float inMaxSlopeAngle);

    public float GetCosMaxSlopeAngle() {
        return internal_native_GetCosMaxSlopeAngle(native_address);
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
return nativeObject->GetCosMaxSlopeAngle();
*/
    public static native float internal_native_GetCosMaxSlopeAngle(long this_addr);

    public void SetUp(Vec3 inUp) {
        internal_native_SetUp(native_address, (inUp != null ? inUp.native_address : 0));
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
nativeObject->SetUp(*((Vec3* )inUp_addr));
*/
    public static native void internal_native_SetUp(long this_addr, long inUp_addr);

    public Vec3 GetUp() {
        long pointer = internal_native_GetUp(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetUp();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetUp(long this_addr);

    public Shape GetShape() {
        long pointer = internal_native_GetShape(native_address);
        if (pointer == 0)
            return null;
        if (Shape_TEMP_GEN_0 == null)
            Shape_TEMP_GEN_0 = new Shape((byte) 1, (char) 1);
        Shape_TEMP_GEN_0.internal_reset(pointer, false);
        return Shape_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
const Shape* obj = nativeObject->GetShape();
return (jlong)obj;
*/
    public static native long internal_native_GetShape(long this_addr);

    public EGroundState GetGroundState() {
        int value = internal_native_GetGroundState(native_address);
        return EGroundState.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
return (int)nativeObject->GetGroundState();
*/
    public static native int internal_native_GetGroundState(long this_addr);

    public boolean IsSlopeTooSteep(Vec3 inNormal) {
        return internal_native_IsSlopeTooSteep(native_address, (inNormal != null ? inNormal.native_address : 0));
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
return nativeObject->IsSlopeTooSteep(*((Vec3* )inNormal_addr));
*/
    public static native boolean internal_native_IsSlopeTooSteep(long this_addr, long inNormal_addr);

    public boolean IsSupported() {
        return internal_native_IsSupported(native_address);
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
return nativeObject->IsSupported();
*/
    public static native boolean internal_native_IsSupported(long this_addr);

    public Vec3 GetGroundPosition() {
        long pointer = internal_native_GetGroundPosition(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetGroundPosition();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetGroundPosition(long this_addr);

    public Vec3 GetGroundNormal() {
        long pointer = internal_native_GetGroundNormal(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetGroundNormal();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetGroundNormal(long this_addr);

    public Vec3 GetGroundVelocity() {
        long pointer = internal_native_GetGroundVelocity(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_3 == null)
            Vec3_TEMP_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_3.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetGroundVelocity();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetGroundVelocity(long this_addr);

    public PhysicsMaterial GetGroundMaterial() {
        long pointer = internal_native_GetGroundMaterial(native_address);
        if (pointer == 0)
            return null;
        if (PhysicsMaterial_TEMP_GEN_0 == null)
            PhysicsMaterial_TEMP_GEN_0 = new PhysicsMaterial((byte) 1, (char) 1);
        PhysicsMaterial_TEMP_GEN_0.internal_reset(pointer, false);
        return PhysicsMaterial_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
const PhysicsMaterial* obj = nativeObject->GetGroundMaterial();
return (jlong)obj;
*/
    public static native long internal_native_GetGroundMaterial(long this_addr);

    public BodyID GetGroundBodyID() {
        long pointer = internal_native_GetGroundBodyID(native_address);
        if (pointer == 0)
            return null;
        if (BodyID_TEMP_GEN_0 == null)
            BodyID_TEMP_GEN_0 = new BodyID((byte) 1, (char) 1);
        BodyID_TEMP_GEN_0.internal_reset(pointer, false);
        return BodyID_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
CharacterBase* nativeObject = (CharacterBase*)this_addr;
static BodyID copy_addr;
copy_addr = nativeObject->GetGroundBodyID();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetGroundBodyID(long this_addr);
}
