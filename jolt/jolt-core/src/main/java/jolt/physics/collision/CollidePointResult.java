/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.collision;

import jolt.idl.IDLBase;
import jolt.physics.body.BodyID;
import jolt.physics.collision.shape.SubShapeID;

public class CollidePointResult extends IDLBase {

    private BodyID BodyID_TEMP_GEN_0;

    private SubShapeID SubShapeID_TEMP_GEN_0;

    static public final CollidePointResult T_01 = new CollidePointResult((byte) 1, (char) 1);

    static public final CollidePointResult T_02 = new CollidePointResult((byte) 1, (char) 1);

    static public final CollidePointResult T_03 = new CollidePointResult((byte) 1, (char) 1);

    public CollidePointResult() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new CollidePointResult();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public CollidePointResult(byte b, char c) {
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
CollidePointResult* nativeObject = (CollidePointResult*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public BodyID get_mBodyID() {
        long pointer = internal_native_get_mBodyID(native_address);
        if (pointer == 0)
            return null;
        if (BodyID_TEMP_GEN_0 == null)
            BodyID_TEMP_GEN_0 = new BodyID((byte) 1, (char) 1);
        BodyID_TEMP_GEN_0.internal_reset(pointer, false);
        return BodyID_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
CollidePointResult* nativeObject = (CollidePointResult*)this_addr;
return (jlong)&nativeObject->mBodyID;
*/
    public static native long internal_native_get_mBodyID(long this_addr);

    public void set_mBodyID(BodyID mBodyID) {
        internal_native_set_mBodyID(native_address, (mBodyID != null ? mBodyID.native_address : 0));
    }

    /*[-JNI;-NATIVE]
CollidePointResult* nativeObject = (CollidePointResult*)this_addr;
nativeObject->mBodyID = *((BodyID*)mBodyID_addr);
*/
    public static native void internal_native_set_mBodyID(long this_addr, long mBodyID_addr);

    public SubShapeID get_mSubShapeID2() {
        long pointer = internal_native_get_mSubShapeID2(native_address);
        if (pointer == 0)
            return null;
        if (SubShapeID_TEMP_GEN_0 == null)
            SubShapeID_TEMP_GEN_0 = new SubShapeID((byte) 1, (char) 1);
        SubShapeID_TEMP_GEN_0.internal_reset(pointer, false);
        return SubShapeID_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
CollidePointResult* nativeObject = (CollidePointResult*)this_addr;
return (jlong)&nativeObject->mSubShapeID2;
*/
    public static native long internal_native_get_mSubShapeID2(long this_addr);

    public void set_mSubShapeID2(SubShapeID mSubShapeID2) {
        internal_native_set_mSubShapeID2(native_address, (mSubShapeID2 != null ? mSubShapeID2.native_address : 0));
    }

    /*[-JNI;-NATIVE]
CollidePointResult* nativeObject = (CollidePointResult*)this_addr;
nativeObject->mSubShapeID2 = *((SubShapeID*)mSubShapeID2_addr);
*/
    public static native void internal_native_set_mSubShapeID2(long this_addr, long mSubShapeID2_addr);
}
