/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.collision;

import jolt.physics.body.Body;
import jolt.math.Vec3;
import jolt.physics.collision.shape.SubShapeIDPair;

public class ContactListenerEm extends ContactListener {

    static private Body Body_TEMP_STATIC_GEN_0;

    static private Body Body_TEMP_STATIC_GEN_1;

    static private Vec3 Vec3_TEMP_STATIC_GEN_0;

    static private CollideShapeResult CollideShapeResult_TEMP_STATIC_GEN_0;

    static private Body Body_TEMP_STATIC_GEN_2;

    static private Body Body_TEMP_STATIC_GEN_3;

    static private ContactManifold ContactManifold_TEMP_STATIC_GEN_0;

    static private ContactSettings ContactSettings_TEMP_STATIC_GEN_0;

    static private Body Body_TEMP_STATIC_GEN_4;

    static private Body Body_TEMP_STATIC_GEN_5;

    static private ContactManifold ContactManifold_TEMP_STATIC_GEN_1;

    static private ContactSettings ContactSettings_TEMP_STATIC_GEN_1;

    static private SubShapeIDPair SubShapeIDPair_TEMP_STATIC_GEN_0;

    /*[-JNI;-NATIVE]
class ContactListenerJS : public ContactListenerEm {
private:
	JNIEnv* env;
	jobject obj;
public:
	inline static jclass jClassID = 0;
	inline static jmethodID OnContactValidateJJJJ_ID = 0;
	inline static jmethodID OnContactAddedJJJJ_ID = 0;
	inline static jmethodID OnContactPersistedJJJJ_ID = 0;
	inline static jmethodID OnContactRemovedJ_ID = 0;

void setupCallback(JNIEnv* env, jobject obj) {
	this->env = env;
	this->obj = env->NewGlobalRef(obj);
	if(ContactListenerJS::jClassID == 0) {
		ContactListenerJS::jClassID = (jclass)env->NewGlobalRef(env->GetObjectClass(obj));
		ContactListenerJS::OnContactValidateJJJJ_ID = env->GetMethodID(jClassID, "internal_OnContactValidate", "(JJJJ)I");
		ContactListenerJS::OnContactAddedJJJJ_ID = env->GetMethodID(jClassID, "internal_OnContactAdded", "(JJJJ)V");
		ContactListenerJS::OnContactPersistedJJJJ_ID = env->GetMethodID(jClassID, "internal_OnContactPersisted", "(JJJJ)V");
		ContactListenerJS::OnContactRemovedJ_ID = env->GetMethodID(jClassID, "internal_OnContactRemoved", "(J)V");
	}
}
virtual int OnContactValidate(const Body& inBody1, const Body& inBody2, const Vec3* inBaseOffset, const CollideShapeResult& inCollisionResult) {
   return env->CallIntMethod(obj, ContactListenerJS::OnContactValidateJJJJ_ID, (jlong)&inBody1, (jlong)&inBody2, (jlong)inBaseOffset, (jlong)&inCollisionResult);
}
virtual void OnContactAdded(const Body& inBody1, const Body& inBody2, const ContactManifold& inManifold, ContactSettings& ioSettings) {
   env->CallVoidMethod(obj, ContactListenerJS::OnContactAddedJJJJ_ID, (jlong)&inBody1, (jlong)&inBody2, (jlong)&inManifold, (jlong)&ioSettings);
}
virtual void OnContactPersisted(const Body& inBody1, const Body& inBody2, const ContactManifold& inManifold, ContactSettings& ioSettings) {
   env->CallVoidMethod(obj, ContactListenerJS::OnContactPersistedJJJJ_ID, (jlong)&inBody1, (jlong)&inBody2, (jlong)&inManifold, (jlong)&ioSettings);
}
virtual void OnContactRemoved(const SubShapeIDPair& inSubShapePair) {
   env->CallVoidMethod(obj, ContactListenerJS::OnContactRemovedJ_ID, (jlong)&inSubShapePair);
}
};
*/
    @Deprecated()
    public ContactListenerEm(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
ContactListenerJS* nativeObject = (ContactListenerJS*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public ContactListenerEm() {
        super((byte) 1, (char) 1);
        long addr = internal_native_create();
        internal_reset(addr, true);
        setupCallback();
    }

    private void setupCallback() {
        internal_native_setupCallback(native_address);
    }

    protected int OnContactValidate(Body inBody1, Body inBody2, Vec3 inBaseOffset, CollideShapeResult inCollisionResult) {
        return 0;
    }

    private int internal_OnContactValidate(long inBody1_addr, long inBody2_addr, long inBaseOffset_addr, long inCollisionResult_addr) {
        if (Body_TEMP_STATIC_GEN_0 == null)
            Body_TEMP_STATIC_GEN_0 = new Body((byte) 1, (char) 1);
        Body_TEMP_STATIC_GEN_0.internal_reset(inBody1_addr, false);
        if (Body_TEMP_STATIC_GEN_1 == null)
            Body_TEMP_STATIC_GEN_1 = new Body((byte) 1, (char) 1);
        Body_TEMP_STATIC_GEN_1.internal_reset(inBody2_addr, false);
        if (Vec3_TEMP_STATIC_GEN_0 == null)
            Vec3_TEMP_STATIC_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_0.internal_reset(inBaseOffset_addr, false);
        if (CollideShapeResult_TEMP_STATIC_GEN_0 == null)
            CollideShapeResult_TEMP_STATIC_GEN_0 = new CollideShapeResult((byte) 1, (char) 1);
        CollideShapeResult_TEMP_STATIC_GEN_0.internal_reset(inCollisionResult_addr, false);
        return OnContactValidate(Body_TEMP_STATIC_GEN_0, Body_TEMP_STATIC_GEN_1, Vec3_TEMP_STATIC_GEN_0, CollideShapeResult_TEMP_STATIC_GEN_0);
    }

    protected void OnContactAdded(Body inBody1, Body inBody2, ContactManifold inManifold, ContactSettings ioSettings) {
    }

    private void internal_OnContactAdded(long inBody1_addr, long inBody2_addr, long inManifold_addr, long ioSettings_addr) {
        if (Body_TEMP_STATIC_GEN_2 == null)
            Body_TEMP_STATIC_GEN_2 = new Body((byte) 1, (char) 1);
        Body_TEMP_STATIC_GEN_2.internal_reset(inBody1_addr, false);
        if (Body_TEMP_STATIC_GEN_3 == null)
            Body_TEMP_STATIC_GEN_3 = new Body((byte) 1, (char) 1);
        Body_TEMP_STATIC_GEN_3.internal_reset(inBody2_addr, false);
        if (ContactManifold_TEMP_STATIC_GEN_0 == null)
            ContactManifold_TEMP_STATIC_GEN_0 = new ContactManifold((byte) 1, (char) 1);
        ContactManifold_TEMP_STATIC_GEN_0.internal_reset(inManifold_addr, false);
        if (ContactSettings_TEMP_STATIC_GEN_0 == null)
            ContactSettings_TEMP_STATIC_GEN_0 = new ContactSettings((byte) 1, (char) 1);
        ContactSettings_TEMP_STATIC_GEN_0.internal_reset(ioSettings_addr, false);
        OnContactAdded(Body_TEMP_STATIC_GEN_2, Body_TEMP_STATIC_GEN_3, ContactManifold_TEMP_STATIC_GEN_0, ContactSettings_TEMP_STATIC_GEN_0);
    }

    protected void OnContactPersisted(Body inBody1, Body inBody2, ContactManifold inManifold, ContactSettings ioSettings) {
    }

    private void internal_OnContactPersisted(long inBody1_addr, long inBody2_addr, long inManifold_addr, long ioSettings_addr) {
        if (Body_TEMP_STATIC_GEN_4 == null)
            Body_TEMP_STATIC_GEN_4 = new Body((byte) 1, (char) 1);
        Body_TEMP_STATIC_GEN_4.internal_reset(inBody1_addr, false);
        if (Body_TEMP_STATIC_GEN_5 == null)
            Body_TEMP_STATIC_GEN_5 = new Body((byte) 1, (char) 1);
        Body_TEMP_STATIC_GEN_5.internal_reset(inBody2_addr, false);
        if (ContactManifold_TEMP_STATIC_GEN_1 == null)
            ContactManifold_TEMP_STATIC_GEN_1 = new ContactManifold((byte) 1, (char) 1);
        ContactManifold_TEMP_STATIC_GEN_1.internal_reset(inManifold_addr, false);
        if (ContactSettings_TEMP_STATIC_GEN_1 == null)
            ContactSettings_TEMP_STATIC_GEN_1 = new ContactSettings((byte) 1, (char) 1);
        ContactSettings_TEMP_STATIC_GEN_1.internal_reset(ioSettings_addr, false);
        OnContactPersisted(Body_TEMP_STATIC_GEN_4, Body_TEMP_STATIC_GEN_5, ContactManifold_TEMP_STATIC_GEN_1, ContactSettings_TEMP_STATIC_GEN_1);
    }

    protected void OnContactRemoved(SubShapeIDPair inSubShapePair) {
    }

    private void internal_OnContactRemoved(long inSubShapePair_addr) {
        if (SubShapeIDPair_TEMP_STATIC_GEN_0 == null)
            SubShapeIDPair_TEMP_STATIC_GEN_0 = new SubShapeIDPair((byte) 1, (char) 1);
        SubShapeIDPair_TEMP_STATIC_GEN_0.internal_reset(inSubShapePair_addr, false);
        OnContactRemoved(SubShapeIDPair_TEMP_STATIC_GEN_0);
    }

    /*[-JNI;-NATIVE]
return (jlong)new ContactListenerJS();
*/
    public static native long internal_native_create();

    /*[-JNI;-NATIVE]
ContactListenerJS* nativeObject = (ContactListenerJS*)this_addr;
nativeObject->setupCallback(env, object);
*/
    public native void internal_native_setupCallback(long this_addr);
}
