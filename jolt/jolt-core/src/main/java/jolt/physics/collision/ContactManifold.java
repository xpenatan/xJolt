/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.collision;

import jolt.idl.IDLBase;
import jolt.math.Vec3;
import jolt.physics.collision.shape.SubShapeID;

public class ContactManifold extends IDLBase {

    private ContactManifold ContactManifold_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_2;

    private Vec3 Vec3_TEMP_GEN_3;

    private SubShapeID SubShapeID_TEMP_GEN_0;

    private SubShapeID SubShapeID_TEMP_GEN_1;

    private ContactPoints ContactPoints_TEMP_GEN_0;

    private ContactPoints ContactPoints_TEMP_GEN_1;

    static public final ContactManifold T_01 = new ContactManifold((byte) 1, (char) 1);

    static public final ContactManifold T_02 = new ContactManifold((byte) 1, (char) 1);

    static public final ContactManifold T_03 = new ContactManifold((byte) 1, (char) 1);

    public ContactManifold() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new ContactManifold();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public ContactManifold(byte b, char c) {
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
ContactManifold* nativeObject = (ContactManifold*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public ContactManifold SwapShapes() {
        long pointer = internal_native_SwapShapes(native_address);
        if (pointer == 0)
            return null;
        if (ContactManifold_TEMP_GEN_0 == null)
            ContactManifold_TEMP_GEN_0 = new ContactManifold((byte) 1, (char) 1);
        ContactManifold_TEMP_GEN_0.internal_reset(pointer, false);
        return ContactManifold_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
ContactManifold* nativeObject = (ContactManifold*)this_addr;
static ContactManifold copy_addr;
copy_addr = nativeObject->SwapShapes();
return (jlong)&copy_addr;*/
    public static native long internal_native_SwapShapes(long this_addr);

    public Vec3 GetWorldSpaceContactPointOn1(int inIndex) {
        long pointer = internal_native_GetWorldSpaceContactPointOn1(native_address, inIndex);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
ContactManifold* nativeObject = (ContactManifold*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetWorldSpaceContactPointOn1(inIndex);
return (jlong)&copy_addr;*/
    public static native long internal_native_GetWorldSpaceContactPointOn1(long this_addr, int inIndex);

    public Vec3 GetWorldSpaceContactPointOn2(int inIndex) {
        long pointer = internal_native_GetWorldSpaceContactPointOn2(native_address, inIndex);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
ContactManifold* nativeObject = (ContactManifold*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetWorldSpaceContactPointOn2(inIndex);
return (jlong)&copy_addr;*/
    public static native long internal_native_GetWorldSpaceContactPointOn2(long this_addr, int inIndex);

    public Vec3 get_mBaseOffset() {
        long pointer = internal_native_get_mBaseOffset(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
ContactManifold* nativeObject = (ContactManifold*)this_addr;
return (jlong)&nativeObject->mBaseOffset;
*/
    public static native long internal_native_get_mBaseOffset(long this_addr);

    public void set_mBaseOffset(Vec3 mBaseOffset) {
        internal_native_set_mBaseOffset(native_address, (mBaseOffset != null ? mBaseOffset.native_address : 0));
    }

    /*[-JNI;-NATIVE]
ContactManifold* nativeObject = (ContactManifold*)this_addr;
nativeObject->mBaseOffset = *((Vec3*)mBaseOffset_addr);
*/
    public static native void internal_native_set_mBaseOffset(long this_addr, long mBaseOffset_addr);

    public Vec3 get_mWorldSpaceNormal() {
        long pointer = internal_native_get_mWorldSpaceNormal(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_3 == null)
            Vec3_TEMP_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_3.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
ContactManifold* nativeObject = (ContactManifold*)this_addr;
return (jlong)&nativeObject->mWorldSpaceNormal;
*/
    public static native long internal_native_get_mWorldSpaceNormal(long this_addr);

    public void set_mWorldSpaceNormal(Vec3 mWorldSpaceNormal) {
        internal_native_set_mWorldSpaceNormal(native_address, (mWorldSpaceNormal != null ? mWorldSpaceNormal.native_address : 0));
    }

    /*[-JNI;-NATIVE]
ContactManifold* nativeObject = (ContactManifold*)this_addr;
nativeObject->mWorldSpaceNormal = *((Vec3*)mWorldSpaceNormal_addr);
*/
    public static native void internal_native_set_mWorldSpaceNormal(long this_addr, long mWorldSpaceNormal_addr);

    public float get_mPenetrationDepth() {
        return internal_native_get_mPenetrationDepth(native_address);
    }

    /*[-JNI;-NATIVE]
ContactManifold* nativeObject = (ContactManifold*)this_addr;
return nativeObject->mPenetrationDepth;
*/
    public static native float internal_native_get_mPenetrationDepth(long this_addr);

    public void set_mPenetrationDepth(float mPenetrationDepth) {
        internal_native_set_mPenetrationDepth(native_address, mPenetrationDepth);
    }

    /*[-JNI;-NATIVE]
ContactManifold* nativeObject = (ContactManifold*)this_addr;
nativeObject->mPenetrationDepth = mPenetrationDepth;
*/
    public static native void internal_native_set_mPenetrationDepth(long this_addr, float mPenetrationDepth);

    public SubShapeID get_mSubShapeID1() {
        long pointer = internal_native_get_mSubShapeID1(native_address);
        if (pointer == 0)
            return null;
        if (SubShapeID_TEMP_GEN_0 == null)
            SubShapeID_TEMP_GEN_0 = new SubShapeID((byte) 1, (char) 1);
        SubShapeID_TEMP_GEN_0.internal_reset(pointer, false);
        return SubShapeID_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
ContactManifold* nativeObject = (ContactManifold*)this_addr;
return (jlong)&nativeObject->mSubShapeID1;
*/
    public static native long internal_native_get_mSubShapeID1(long this_addr);

    public void set_mSubShapeID1(SubShapeID mSubShapeID1) {
        internal_native_set_mSubShapeID1(native_address, (mSubShapeID1 != null ? mSubShapeID1.native_address : 0));
    }

    /*[-JNI;-NATIVE]
ContactManifold* nativeObject = (ContactManifold*)this_addr;
nativeObject->mSubShapeID1 = *((SubShapeID*)mSubShapeID1_addr);
*/
    public static native void internal_native_set_mSubShapeID1(long this_addr, long mSubShapeID1_addr);

    public SubShapeID get_mSubShapeID2() {
        long pointer = internal_native_get_mSubShapeID2(native_address);
        if (pointer == 0)
            return null;
        if (SubShapeID_TEMP_GEN_1 == null)
            SubShapeID_TEMP_GEN_1 = new SubShapeID((byte) 1, (char) 1);
        SubShapeID_TEMP_GEN_1.internal_reset(pointer, false);
        return SubShapeID_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
ContactManifold* nativeObject = (ContactManifold*)this_addr;
return (jlong)&nativeObject->mSubShapeID2;
*/
    public static native long internal_native_get_mSubShapeID2(long this_addr);

    public void set_mSubShapeID2(SubShapeID mSubShapeID2) {
        internal_native_set_mSubShapeID2(native_address, (mSubShapeID2 != null ? mSubShapeID2.native_address : 0));
    }

    /*[-JNI;-NATIVE]
ContactManifold* nativeObject = (ContactManifold*)this_addr;
nativeObject->mSubShapeID2 = *((SubShapeID*)mSubShapeID2_addr);
*/
    public static native void internal_native_set_mSubShapeID2(long this_addr, long mSubShapeID2_addr);

    public ContactPoints get_mRelativeContactPointsOn1() {
        long pointer = internal_native_get_mRelativeContactPointsOn1(native_address);
        if (pointer == 0)
            return null;
        if (ContactPoints_TEMP_GEN_0 == null)
            ContactPoints_TEMP_GEN_0 = new ContactPoints((byte) 1, (char) 1);
        ContactPoints_TEMP_GEN_0.internal_reset(pointer, false);
        return ContactPoints_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
ContactManifold* nativeObject = (ContactManifold*)this_addr;
return (jlong)&nativeObject->mRelativeContactPointsOn1;
*/
    public static native long internal_native_get_mRelativeContactPointsOn1(long this_addr);

    public void set_mRelativeContactPointsOn1(ContactPoints mRelativeContactPointsOn1) {
        internal_native_set_mRelativeContactPointsOn1(native_address, (mRelativeContactPointsOn1 != null ? mRelativeContactPointsOn1.native_address : 0));
    }

    /*[-JNI;-NATIVE]
ContactManifold* nativeObject = (ContactManifold*)this_addr;
nativeObject->mRelativeContactPointsOn1 = *((ContactPoints*)mRelativeContactPointsOn1_addr);
*/
    public static native void internal_native_set_mRelativeContactPointsOn1(long this_addr, long mRelativeContactPointsOn1_addr);

    public ContactPoints get_mRelativeContactPointsOn2() {
        long pointer = internal_native_get_mRelativeContactPointsOn2(native_address);
        if (pointer == 0)
            return null;
        if (ContactPoints_TEMP_GEN_1 == null)
            ContactPoints_TEMP_GEN_1 = new ContactPoints((byte) 1, (char) 1);
        ContactPoints_TEMP_GEN_1.internal_reset(pointer, false);
        return ContactPoints_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
ContactManifold* nativeObject = (ContactManifold*)this_addr;
return (jlong)&nativeObject->mRelativeContactPointsOn2;
*/
    public static native long internal_native_get_mRelativeContactPointsOn2(long this_addr);

    public void set_mRelativeContactPointsOn2(ContactPoints mRelativeContactPointsOn2) {
        internal_native_set_mRelativeContactPointsOn2(native_address, (mRelativeContactPointsOn2 != null ? mRelativeContactPointsOn2.native_address : 0));
    }

    /*[-JNI;-NATIVE]
ContactManifold* nativeObject = (ContactManifold*)this_addr;
nativeObject->mRelativeContactPointsOn2 = *((ContactPoints*)mRelativeContactPointsOn2_addr);
*/
    public static native void internal_native_set_mRelativeContactPointsOn2(long this_addr, long mRelativeContactPointsOn2_addr);
}
