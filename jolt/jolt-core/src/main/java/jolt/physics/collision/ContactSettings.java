/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.collision;

import jolt.idl.IDLBase;
import jolt.math.Vec3;

public class ContactSettings extends IDLBase {

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    static public final ContactSettings T_01 = new ContactSettings((byte) 1, (char) 1);

    static public final ContactSettings T_02 = new ContactSettings((byte) 1, (char) 1);

    static public final ContactSettings T_03 = new ContactSettings((byte) 1, (char) 1);

    public ContactSettings() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new ContactSettings();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public ContactSettings(byte b, char c) {
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
ContactSettings* nativeObject = (ContactSettings*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public float get_mCombinedFriction() {
        return internal_native_get_mCombinedFriction(native_address);
    }

    /*[-JNI;-NATIVE]
ContactSettings* nativeObject = (ContactSettings*)this_addr;
return nativeObject->mCombinedFriction;
*/
    public static native float internal_native_get_mCombinedFriction(long this_addr);

    public void set_mCombinedFriction(float mCombinedFriction) {
        internal_native_set_mCombinedFriction(native_address, mCombinedFriction);
    }

    /*[-JNI;-NATIVE]
ContactSettings* nativeObject = (ContactSettings*)this_addr;
nativeObject->mCombinedFriction = mCombinedFriction;
*/
    public static native void internal_native_set_mCombinedFriction(long this_addr, float mCombinedFriction);

    public float get_mCombinedRestitution() {
        return internal_native_get_mCombinedRestitution(native_address);
    }

    /*[-JNI;-NATIVE]
ContactSettings* nativeObject = (ContactSettings*)this_addr;
return nativeObject->mCombinedRestitution;
*/
    public static native float internal_native_get_mCombinedRestitution(long this_addr);

    public void set_mCombinedRestitution(float mCombinedRestitution) {
        internal_native_set_mCombinedRestitution(native_address, mCombinedRestitution);
    }

    /*[-JNI;-NATIVE]
ContactSettings* nativeObject = (ContactSettings*)this_addr;
nativeObject->mCombinedRestitution = mCombinedRestitution;
*/
    public static native void internal_native_set_mCombinedRestitution(long this_addr, float mCombinedRestitution);

    public float get_mInvMassScale1() {
        return internal_native_get_mInvMassScale1(native_address);
    }

    /*[-JNI;-NATIVE]
ContactSettings* nativeObject = (ContactSettings*)this_addr;
return nativeObject->mInvMassScale1;
*/
    public static native float internal_native_get_mInvMassScale1(long this_addr);

    public void set_mInvMassScale1(float mInvMassScale1) {
        internal_native_set_mInvMassScale1(native_address, mInvMassScale1);
    }

    /*[-JNI;-NATIVE]
ContactSettings* nativeObject = (ContactSettings*)this_addr;
nativeObject->mInvMassScale1 = mInvMassScale1;
*/
    public static native void internal_native_set_mInvMassScale1(long this_addr, float mInvMassScale1);

    public float get_mInvInertiaScale1() {
        return internal_native_get_mInvInertiaScale1(native_address);
    }

    /*[-JNI;-NATIVE]
ContactSettings* nativeObject = (ContactSettings*)this_addr;
return nativeObject->mInvInertiaScale1;
*/
    public static native float internal_native_get_mInvInertiaScale1(long this_addr);

    public void set_mInvInertiaScale1(float mInvInertiaScale1) {
        internal_native_set_mInvInertiaScale1(native_address, mInvInertiaScale1);
    }

    /*[-JNI;-NATIVE]
ContactSettings* nativeObject = (ContactSettings*)this_addr;
nativeObject->mInvInertiaScale1 = mInvInertiaScale1;
*/
    public static native void internal_native_set_mInvInertiaScale1(long this_addr, float mInvInertiaScale1);

    public float get_mInvMassScale2() {
        return internal_native_get_mInvMassScale2(native_address);
    }

    /*[-JNI;-NATIVE]
ContactSettings* nativeObject = (ContactSettings*)this_addr;
return nativeObject->mInvMassScale2;
*/
    public static native float internal_native_get_mInvMassScale2(long this_addr);

    public void set_mInvMassScale2(float mInvMassScale2) {
        internal_native_set_mInvMassScale2(native_address, mInvMassScale2);
    }

    /*[-JNI;-NATIVE]
ContactSettings* nativeObject = (ContactSettings*)this_addr;
nativeObject->mInvMassScale2 = mInvMassScale2;
*/
    public static native void internal_native_set_mInvMassScale2(long this_addr, float mInvMassScale2);

    public float get_mInvInertiaScale2() {
        return internal_native_get_mInvInertiaScale2(native_address);
    }

    /*[-JNI;-NATIVE]
ContactSettings* nativeObject = (ContactSettings*)this_addr;
return nativeObject->mInvInertiaScale2;
*/
    public static native float internal_native_get_mInvInertiaScale2(long this_addr);

    public void set_mInvInertiaScale2(float mInvInertiaScale2) {
        internal_native_set_mInvInertiaScale2(native_address, mInvInertiaScale2);
    }

    /*[-JNI;-NATIVE]
ContactSettings* nativeObject = (ContactSettings*)this_addr;
nativeObject->mInvInertiaScale2 = mInvInertiaScale2;
*/
    public static native void internal_native_set_mInvInertiaScale2(long this_addr, float mInvInertiaScale2);

    public boolean get_mIsSensor() {
        return internal_native_get_mIsSensor(native_address);
    }

    /*[-JNI;-NATIVE]
ContactSettings* nativeObject = (ContactSettings*)this_addr;
return nativeObject->mIsSensor;
*/
    public static native boolean internal_native_get_mIsSensor(long this_addr);

    public void set_mIsSensor(boolean mIsSensor) {
        internal_native_set_mIsSensor(native_address, mIsSensor);
    }

    /*[-JNI;-NATIVE]
ContactSettings* nativeObject = (ContactSettings*)this_addr;
nativeObject->mIsSensor = mIsSensor;
*/
    public static native void internal_native_set_mIsSensor(long this_addr, boolean mIsSensor);

    public Vec3 get_mRelativeLinearSurfaceVelocity() {
        long pointer = internal_native_get_mRelativeLinearSurfaceVelocity(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
ContactSettings* nativeObject = (ContactSettings*)this_addr;
return (jlong)&nativeObject->mRelativeLinearSurfaceVelocity;
*/
    public static native long internal_native_get_mRelativeLinearSurfaceVelocity(long this_addr);

    public void set_mRelativeLinearSurfaceVelocity(Vec3 mRelativeLinearSurfaceVelocity) {
        internal_native_set_mRelativeLinearSurfaceVelocity(native_address, (mRelativeLinearSurfaceVelocity != null ? mRelativeLinearSurfaceVelocity.native_address : 0));
    }

    /*[-JNI;-NATIVE]
ContactSettings* nativeObject = (ContactSettings*)this_addr;
nativeObject->mRelativeLinearSurfaceVelocity = *((Vec3*)mRelativeLinearSurfaceVelocity_addr);
*/
    public static native void internal_native_set_mRelativeLinearSurfaceVelocity(long this_addr, long mRelativeLinearSurfaceVelocity_addr);

    public Vec3 get_mRelativeAngularSurfaceVelocity() {
        long pointer = internal_native_get_mRelativeAngularSurfaceVelocity(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
ContactSettings* nativeObject = (ContactSettings*)this_addr;
return (jlong)&nativeObject->mRelativeAngularSurfaceVelocity;
*/
    public static native long internal_native_get_mRelativeAngularSurfaceVelocity(long this_addr);

    public void set_mRelativeAngularSurfaceVelocity(Vec3 mRelativeAngularSurfaceVelocity) {
        internal_native_set_mRelativeAngularSurfaceVelocity(native_address, (mRelativeAngularSurfaceVelocity != null ? mRelativeAngularSurfaceVelocity.native_address : 0));
    }

    /*[-JNI;-NATIVE]
ContactSettings* nativeObject = (ContactSettings*)this_addr;
nativeObject->mRelativeAngularSurfaceVelocity = *((Vec3*)mRelativeAngularSurfaceVelocity_addr);
*/
    public static native void internal_native_set_mRelativeAngularSurfaceVelocity(long this_addr, long mRelativeAngularSurfaceVelocity_addr);
}
