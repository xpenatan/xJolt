/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.collision;

import jolt.idl.IDLBase;

public class GroupFilter extends IDLBase {

    static private CollisionGroup CollisionGroup_TEMP_STATIC_GEN_0;

    static private CollisionGroup CollisionGroup_TEMP_STATIC_GEN_1;

    /*[-JNI;-NATIVE]
class GroupFilterJS : public GroupFilter {
private:
	JNIEnv* env;
	jobject obj;
public:
	inline static jclass jClassID = 0;
	inline static jmethodID CanCollideJJ_ID = 0;

void setupCallback(JNIEnv* env, jobject obj) {
	this->env = env;
	this->obj = env->NewGlobalRef(obj);
	if(GroupFilterJS::jClassID == 0) {
		GroupFilterJS::jClassID = (jclass)env->NewGlobalRef(env->GetObjectClass(obj));
		GroupFilterJS::CanCollideJJ_ID = env->GetMethodID(jClassID, "internal_CanCollide", "(JJ)Z");
	}
}
virtual bool CanCollide(const CollisionGroup& inGroup1, const CollisionGroup& inGroup2) const {
   return env->CallBooleanMethod(obj, GroupFilterJS::CanCollideJJ_ID, (jlong)&inGroup1, (jlong)&inGroup2);
}
};
*/
    @Deprecated()
    public GroupFilter(byte b, char c) {
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
GroupFilterJS* nativeObject = (GroupFilterJS*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public int GetRefCount() {
        return internal_native_GetRefCount(native_address);
    }

    /*[-JNI;-NATIVE]
GroupFilter* nativeObject = (GroupFilter*)this_addr;
return nativeObject->GetRefCount();
*/
    public static native int internal_native_GetRefCount(long this_addr);

    public void AddRef() {
        internal_native_AddRef(native_address);
    }

    /*[-JNI;-NATIVE]
GroupFilter* nativeObject = (GroupFilter*)this_addr;
nativeObject->AddRef();
*/
    public static native void internal_native_AddRef(long this_addr);

    public void Release() {
        internal_native_Release(native_address);
    }

    /*[-JNI;-NATIVE]
GroupFilter* nativeObject = (GroupFilter*)this_addr;
nativeObject->Release();
*/
    public static native void internal_native_Release(long this_addr);

    public GroupFilter() {
        long addr = internal_native_create();
        internal_reset(addr, true);
        setupCallback();
    }

    private void setupCallback() {
        internal_native_setupCallback(native_address);
    }

    protected boolean CanCollide(CollisionGroup inGroup1, CollisionGroup inGroup2) {
        return false;
    }

    private boolean internal_CanCollide(long inGroup1_addr, long inGroup2_addr) {
        if (CollisionGroup_TEMP_STATIC_GEN_0 == null)
            CollisionGroup_TEMP_STATIC_GEN_0 = new CollisionGroup((byte) 1, (char) 1);
        CollisionGroup_TEMP_STATIC_GEN_0.internal_reset(inGroup1_addr, false);
        if (CollisionGroup_TEMP_STATIC_GEN_1 == null)
            CollisionGroup_TEMP_STATIC_GEN_1 = new CollisionGroup((byte) 1, (char) 1);
        CollisionGroup_TEMP_STATIC_GEN_1.internal_reset(inGroup2_addr, false);
        return CanCollide(CollisionGroup_TEMP_STATIC_GEN_0, CollisionGroup_TEMP_STATIC_GEN_1);
    }

    /*[-JNI;-NATIVE]
return (jlong)new GroupFilterJS();
*/
    public static native long internal_native_create();

    /*[-JNI;-NATIVE]
GroupFilterJS* nativeObject = (GroupFilterJS*)this_addr;
nativeObject->setupCallback(env, object);
*/
    public native void internal_native_setupCallback(long this_addr);
}
