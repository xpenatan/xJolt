/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.collision;

import jolt.physics.collision.broadphase.ObjectVsBroadPhaseLayerFilter;
import jolt.physics.collision.broadphase.BroadPhaseLayer;

public class ObjectVsBroadPhaseLayerFilterEm extends ObjectVsBroadPhaseLayerFilter {

    static private BroadPhaseLayer BroadPhaseLayer_TEMP_STATIC_GEN_0;

    /*[-JNI;-NATIVE]
class ObjectVsBroadPhaseLayerFilterJS : public ObjectVsBroadPhaseLayerFilterEm {
private:
	JNIEnv* env;
	jobject obj;
public:
	inline static jclass jClassID = 0;
	inline static jmethodID ShouldCollideIJ_ID = 0;

void setupCallback(JNIEnv* env, jobject obj) {
	this->env = env;
	this->obj = env->NewGlobalRef(obj);
	if(ObjectVsBroadPhaseLayerFilterJS::jClassID == 0) {
		ObjectVsBroadPhaseLayerFilterJS::jClassID = (jclass)env->NewGlobalRef(env->GetObjectClass(obj));
		ObjectVsBroadPhaseLayerFilterJS::ShouldCollideIJ_ID = env->GetMethodID(jClassID, "internal_ShouldCollide", "(IJ)Z");
	}
}
virtual bool ShouldCollide(unsigned int inLayer1, BroadPhaseLayer* inLayer2) const {
   return env->CallBooleanMethod(obj, ObjectVsBroadPhaseLayerFilterJS::ShouldCollideIJ_ID, inLayer1, (jlong)inLayer2);
}
};
*/
    @Deprecated()
    public ObjectVsBroadPhaseLayerFilterEm(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
ObjectVsBroadPhaseLayerFilterJS* nativeObject = (ObjectVsBroadPhaseLayerFilterJS*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public ObjectVsBroadPhaseLayerFilterEm() {
        super((byte) 1, (char) 1);
        long addr = internal_native_create();
        internal_reset(addr, true);
        setupCallback();
    }

    private void setupCallback() {
        internal_native_setupCallback(native_address);
    }

    protected boolean ShouldCollide(int inLayer1, BroadPhaseLayer inLayer2) {
        return false;
    }

    private boolean internal_ShouldCollide(int inLayer1, long inLayer2_addr) {
        if (BroadPhaseLayer_TEMP_STATIC_GEN_0 == null)
            BroadPhaseLayer_TEMP_STATIC_GEN_0 = new BroadPhaseLayer((byte) 1, (char) 1);
        BroadPhaseLayer_TEMP_STATIC_GEN_0.internal_reset(inLayer2_addr, false);
        return ShouldCollide(inLayer1, BroadPhaseLayer_TEMP_STATIC_GEN_0);
    }

    /*[-JNI;-NATIVE]
return (jlong)new ObjectVsBroadPhaseLayerFilterJS();
*/
    public static native long internal_native_create();

    /*[-JNI;-NATIVE]
ObjectVsBroadPhaseLayerFilterJS* nativeObject = (ObjectVsBroadPhaseLayerFilterJS*)this_addr;
nativeObject->setupCallback(env, object);
*/
    public native void internal_native_setupCallback(long this_addr);
}
