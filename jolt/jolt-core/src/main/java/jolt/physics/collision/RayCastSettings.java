/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.collision;

import jolt.idl.IDLBase;
import jolt.enums.EBackFaceMode;

public class RayCastSettings extends IDLBase {

    static public final RayCastSettings T_01 = new RayCastSettings((byte) 1, (char) 1);

    static public final RayCastSettings T_02 = new RayCastSettings((byte) 1, (char) 1);

    static public final RayCastSettings T_03 = new RayCastSettings((byte) 1, (char) 1);

    public RayCastSettings() {
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new RayCastSettings();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public RayCastSettings(byte b, char c) {
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
RayCastSettings* nativeObject = (RayCastSettings*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public EBackFaceMode get_mBackFaceModeTriangles() {
        int value = internal_native_get_mBackFaceModeTriangles(native_address);
        return EBackFaceMode.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
RayCastSettings* nativeObject = (RayCastSettings*)this_addr;
return (jint)nativeObject->mBackFaceModeTriangles;
*/
    public static native int internal_native_get_mBackFaceModeTriangles(long this_addr);

    public void set_mBackFaceModeTriangles(EBackFaceMode mBackFaceModeTriangles) {
        internal_native_set_mBackFaceModeTriangles(native_address, (mBackFaceModeTriangles != null ? mBackFaceModeTriangles.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
RayCastSettings* nativeObject = (RayCastSettings*)this_addr;
nativeObject->mBackFaceModeTriangles = (::EBackFaceMode)mBackFaceModeTriangles;
*/
    public static native void internal_native_set_mBackFaceModeTriangles(long this_addr, long mBackFaceModeTriangles);

    public EBackFaceMode get_mBackFaceModeConvex() {
        int value = internal_native_get_mBackFaceModeConvex(native_address);
        return EBackFaceMode.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
RayCastSettings* nativeObject = (RayCastSettings*)this_addr;
return (jint)nativeObject->mBackFaceModeConvex;
*/
    public static native int internal_native_get_mBackFaceModeConvex(long this_addr);

    public void set_mBackFaceModeConvex(EBackFaceMode mBackFaceModeConvex) {
        internal_native_set_mBackFaceModeConvex(native_address, (mBackFaceModeConvex != null ? mBackFaceModeConvex.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
RayCastSettings* nativeObject = (RayCastSettings*)this_addr;
nativeObject->mBackFaceModeConvex = (::EBackFaceMode)mBackFaceModeConvex;
*/
    public static native void internal_native_set_mBackFaceModeConvex(long this_addr, long mBackFaceModeConvex);

    public boolean get_mTreatConvexAsSolid() {
        return internal_native_get_mTreatConvexAsSolid(native_address);
    }

    /*[-JNI;-NATIVE]
RayCastSettings* nativeObject = (RayCastSettings*)this_addr;
return nativeObject->mTreatConvexAsSolid;
*/
    public static native boolean internal_native_get_mTreatConvexAsSolid(long this_addr);

    public void set_mTreatConvexAsSolid(boolean mTreatConvexAsSolid) {
        internal_native_set_mTreatConvexAsSolid(native_address, mTreatConvexAsSolid);
    }

    /*[-JNI;-NATIVE]
RayCastSettings* nativeObject = (RayCastSettings*)this_addr;
nativeObject->mTreatConvexAsSolid = mTreatConvexAsSolid;
*/
    public static native void internal_native_set_mTreatConvexAsSolid(long this_addr, boolean mTreatConvexAsSolid);
}
