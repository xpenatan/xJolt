/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.collision;

import jolt.idl.IDLBase;
import jolt.RRayCast;
import jolt.physics.softbody.CastRayCollector;
import jolt.math.Vec3;
import jolt.physics.softbody.CollidePointCollector;
import jolt.physics.collision.shape.Shape;
import jolt.math.Mat44;
import jolt.physics.softbody.CollideShapeCollector;
import jolt.physics.collision.shape.ShapeCastSettings;
import jolt.physics.softbody.CastShapeCollector;
import jolt.geometry.AABox;
import jolt.physics.softbody.TransformedShapeCollector;
import jolt.math.Quat;
import jolt.physics.collision.shape.SubShapeID;
import jolt.math.Float3;
import jolt.physics.body.BodyID;

public class TransformedShape extends IDLBase {

    private Vec3 Vec3_TEMP_GEN_0;

    private Mat44 Mat44_TEMP_GEN_0;

    private Mat44 Mat44_TEMP_GEN_1;

    private Mat44 Mat44_TEMP_GEN_2;

    private AABox AABox_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private PhysicsMaterial PhysicsMaterial_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_2;

    private Quat Quat_TEMP_GEN_0;

    private Shape Shape_TEMP_GEN_0;

    private Float3 Float3_TEMP_GEN_0;

    private BodyID BodyID_TEMP_GEN_0;

    static public final TransformedShape T_01 = new TransformedShape((byte) 1, (char) 1);

    static public final TransformedShape T_02 = new TransformedShape((byte) 1, (char) 1);

    static public final TransformedShape T_03 = new TransformedShape((byte) 1, (char) 1);

    public TransformedShape() {
        long addr = internal_native_create();
        internal_reset(addr, false);
    }

    /*[-JNI;-NATIVE]
return (jlong)new TransformedShape();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public TransformedShape(byte b, char c) {
    }

    public void CastRay(RRayCast inRay, RayCastResult ioHit) {
        internal_native_CastRay(native_address, (inRay != null ? inRay.native_address : 0), (ioHit != null ? ioHit.native_address : 0));
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
nativeObject->CastRay(*((RRayCast* )inRay_addr), *((RayCastResult* )ioHit_addr));
*/
    public static native void internal_native_CastRay(long this_addr, long inRay_addr, long ioHit_addr);

    public void CastRay(RRayCast inRay, RayCastSettings inRayCastSettings, CastRayCollector ioCollector, ShapeFilter inShapeFilter) {
        internal_native_CastRay(native_address, (inRay != null ? inRay.native_address : 0), (inRayCastSettings != null ? inRayCastSettings.native_address : 0), (ioCollector != null ? ioCollector.native_address : 0), (inShapeFilter != null ? inShapeFilter.native_address : 0));
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
nativeObject->CastRay(*((RRayCast* )inRay_addr), *((RayCastSettings* )inRayCastSettings_addr), *((CastRayCollector* )ioCollector_addr), *((ShapeFilter* )inShapeFilter_addr));
*/
    public static native void internal_native_CastRay(long this_addr, long inRay_addr, long inRayCastSettings_addr, long ioCollector_addr, long inShapeFilter_addr);

    public void CollidePoint(Vec3 inPoint, CollidePointCollector ioCollector, ShapeFilter inShapeFilter) {
        internal_native_CollidePoint(native_address, (inPoint != null ? inPoint.native_address : 0), (ioCollector != null ? ioCollector.native_address : 0), (inShapeFilter != null ? inShapeFilter.native_address : 0));
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
nativeObject->CollidePoint(*((Vec3* )inPoint_addr), *((CollidePointCollector* )ioCollector_addr), *((ShapeFilter* )inShapeFilter_addr));
*/
    public static native void internal_native_CollidePoint(long this_addr, long inPoint_addr, long ioCollector_addr, long inShapeFilter_addr);

    public void CollideShape(Shape inShape, Vec3 inShapeScale, Mat44 inCenterOfMassTransform, CollideShapeSettings inCollideShapeSettings, Vec3 inBaseOffset, CollideShapeCollector ioCollector, ShapeFilter inShapeFilter) {
        internal_native_CollideShape(native_address, (inShape != null ? inShape.native_address : 0), (inShapeScale != null ? inShapeScale.native_address : 0), (inCenterOfMassTransform != null ? inCenterOfMassTransform.native_address : 0), (inCollideShapeSettings != null ? inCollideShapeSettings.native_address : 0), (inBaseOffset != null ? inBaseOffset.native_address : 0), (ioCollector != null ? ioCollector.native_address : 0), (inShapeFilter != null ? inShapeFilter.native_address : 0));
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
nativeObject->CollideShape((Shape* )inShape_addr, *((Vec3* )inShapeScale_addr), *((Mat44* )inCenterOfMassTransform_addr), *((CollideShapeSettings* )inCollideShapeSettings_addr), *((Vec3* )inBaseOffset_addr), *((CollideShapeCollector* )ioCollector_addr), *((ShapeFilter* )inShapeFilter_addr));
*/
    public static native void internal_native_CollideShape(long this_addr, long inShape_addr, long inShapeScale_addr, long inCenterOfMassTransform_addr, long inCollideShapeSettings_addr, long inBaseOffset_addr, long ioCollector_addr, long inShapeFilter_addr);

    public void CastShape(RShapeCast inShapeCast, ShapeCastSettings inShapeCastSettings, Vec3 inBaseOffset, CastShapeCollector ioCollector, ShapeFilter inShapeFilter) {
        internal_native_CastShape(native_address, (inShapeCast != null ? inShapeCast.native_address : 0), (inShapeCastSettings != null ? inShapeCastSettings.native_address : 0), (inBaseOffset != null ? inBaseOffset.native_address : 0), (ioCollector != null ? ioCollector.native_address : 0), (inShapeFilter != null ? inShapeFilter.native_address : 0));
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
nativeObject->CastShape(*((RShapeCast* )inShapeCast_addr), *((ShapeCastSettings* )inShapeCastSettings_addr), *((Vec3* )inBaseOffset_addr), *((CastShapeCollector* )ioCollector_addr), *((ShapeFilter* )inShapeFilter_addr));
*/
    public static native void internal_native_CastShape(long this_addr, long inShapeCast_addr, long inShapeCastSettings_addr, long inBaseOffset_addr, long ioCollector_addr, long inShapeFilter_addr);

    public void CollectTransformedShapes(AABox inBox, TransformedShapeCollector ioCollector, ShapeFilter inShapeFilter) {
        internal_native_CollectTransformedShapes(native_address, (inBox != null ? inBox.native_address : 0), (ioCollector != null ? ioCollector.native_address : 0), (inShapeFilter != null ? inShapeFilter.native_address : 0));
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
nativeObject->CollectTransformedShapes(*((AABox* )inBox_addr), *((TransformedShapeCollector* )ioCollector_addr), *((ShapeFilter* )inShapeFilter_addr));
*/
    public static native void internal_native_CollectTransformedShapes(long this_addr, long inBox_addr, long ioCollector_addr, long inShapeFilter_addr);

    public Vec3 GetShapeScale() {
        long pointer = internal_native_GetShapeScale(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetShapeScale();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetShapeScale(long this_addr);

    public void SetShapeScale(Vec3 inScale) {
        internal_native_SetShapeScale(native_address, (inScale != null ? inScale.native_address : 0));
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
nativeObject->SetShapeScale(*((Vec3* )inScale_addr));
*/
    public static native void internal_native_SetShapeScale(long this_addr, long inScale_addr);

    public Mat44 GetCenterOfMassTransform() {
        long pointer = internal_native_GetCenterOfMassTransform(native_address);
        if (pointer == 0)
            return null;
        if (Mat44_TEMP_GEN_0 == null)
            Mat44_TEMP_GEN_0 = new Mat44((byte) 1, (char) 1);
        Mat44_TEMP_GEN_0.internal_reset(pointer, false);
        return Mat44_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
static Mat44 copy_addr;
copy_addr = nativeObject->GetCenterOfMassTransform();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetCenterOfMassTransform(long this_addr);

    public Mat44 GetInverseCenterOfMassTransform() {
        long pointer = internal_native_GetInverseCenterOfMassTransform(native_address);
        if (pointer == 0)
            return null;
        if (Mat44_TEMP_GEN_1 == null)
            Mat44_TEMP_GEN_1 = new Mat44((byte) 1, (char) 1);
        Mat44_TEMP_GEN_1.internal_reset(pointer, false);
        return Mat44_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
static Mat44 copy_addr;
copy_addr = nativeObject->GetInverseCenterOfMassTransform();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetInverseCenterOfMassTransform(long this_addr);

    public void SetWorldTransform(Vec3 inPosition, Quat inRotation, Vec3 inScale) {
        internal_native_SetWorldTransform(native_address, (inPosition != null ? inPosition.native_address : 0), (inRotation != null ? inRotation.native_address : 0), (inScale != null ? inScale.native_address : 0));
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
nativeObject->SetWorldTransform(*((Vec3* )inPosition_addr), *((Quat* )inRotation_addr), *((Vec3* )inScale_addr));
*/
    public static native void internal_native_SetWorldTransform(long this_addr, long inPosition_addr, long inRotation_addr, long inScale_addr);

    public void SetWorldTransform(Mat44 inTransform) {
        internal_native_SetWorldTransform(native_address, (inTransform != null ? inTransform.native_address : 0));
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
nativeObject->SetWorldTransform(*((Mat44* )inTransform_addr));
*/
    public static native void internal_native_SetWorldTransform(long this_addr, long inTransform_addr);

    public Mat44 GetWorldTransform() {
        long pointer = internal_native_GetWorldTransform(native_address);
        if (pointer == 0)
            return null;
        if (Mat44_TEMP_GEN_2 == null)
            Mat44_TEMP_GEN_2 = new Mat44((byte) 1, (char) 1);
        Mat44_TEMP_GEN_2.internal_reset(pointer, false);
        return Mat44_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
static Mat44 copy_addr;
copy_addr = nativeObject->GetWorldTransform();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetWorldTransform(long this_addr);

    public AABox GetWorldSpaceBounds() {
        long pointer = internal_native_GetWorldSpaceBounds(native_address);
        if (pointer == 0)
            return null;
        if (AABox_TEMP_GEN_0 == null)
            AABox_TEMP_GEN_0 = new AABox((byte) 1, (char) 1);
        AABox_TEMP_GEN_0.internal_reset(pointer, false);
        return AABox_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
static AABox copy_addr;
copy_addr = nativeObject->GetWorldSpaceBounds();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetWorldSpaceBounds(long this_addr);

    public Vec3 GetWorldSpaceSurfaceNormal(SubShapeID inSubShapeID, Vec3 inPosition) {
        long pointer = internal_native_GetWorldSpaceSurfaceNormal(native_address, (inSubShapeID != null ? inSubShapeID.native_address : 0), (inPosition != null ? inPosition.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetWorldSpaceSurfaceNormal(*((SubShapeID* )inSubShapeID_addr), *((Vec3* )inPosition_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_GetWorldSpaceSurfaceNormal(long this_addr, long inSubShapeID_addr, long inPosition_addr);

    public PhysicsMaterial GetMaterial(SubShapeID inSubShapeID) {
        long pointer = internal_native_GetMaterial(native_address, (inSubShapeID != null ? inSubShapeID.native_address : 0));
        if (pointer == 0)
            return null;
        if (PhysicsMaterial_TEMP_GEN_0 == null)
            PhysicsMaterial_TEMP_GEN_0 = new PhysicsMaterial((byte) 1, (char) 1);
        PhysicsMaterial_TEMP_GEN_0.internal_reset(pointer, false);
        return PhysicsMaterial_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
const PhysicsMaterial* obj = nativeObject->GetMaterial(*((SubShapeID* )inSubShapeID_addr));
return (jlong)obj;
*/
    public static native long internal_native_GetMaterial(long this_addr, long inSubShapeID_addr);

    public Vec3 get_mShapePositionCOM() {
        long pointer = internal_native_get_mShapePositionCOM(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
return (jlong)&nativeObject->mShapePositionCOM;
*/
    public static native long internal_native_get_mShapePositionCOM(long this_addr);

    public void set_mShapePositionCOM(Vec3 mShapePositionCOM) {
        internal_native_set_mShapePositionCOM(native_address, (mShapePositionCOM != null ? mShapePositionCOM.native_address : 0));
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
nativeObject->mShapePositionCOM = *((Vec3*)mShapePositionCOM_addr);
*/
    public static native void internal_native_set_mShapePositionCOM(long this_addr, long mShapePositionCOM_addr);

    public Quat get_mShapeRotation() {
        long pointer = internal_native_get_mShapeRotation(native_address);
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_0 == null)
            Quat_TEMP_GEN_0 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_0.internal_reset(pointer, false);
        return Quat_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
return (jlong)&nativeObject->mShapeRotation;
*/
    public static native long internal_native_get_mShapeRotation(long this_addr);

    public void set_mShapeRotation(Quat mShapeRotation) {
        internal_native_set_mShapeRotation(native_address, (mShapeRotation != null ? mShapeRotation.native_address : 0));
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
nativeObject->mShapeRotation = *((Quat*)mShapeRotation_addr);
*/
    public static native void internal_native_set_mShapeRotation(long this_addr, long mShapeRotation_addr);

    public Shape get_mShape() {
        long pointer = internal_native_get_mShape(native_address);
        if (pointer == 0)
            return null;
        if (Shape_TEMP_GEN_0 == null)
            Shape_TEMP_GEN_0 = new Shape((byte) 1, (char) 1);
        Shape_TEMP_GEN_0.internal_reset(pointer, false);
        return Shape_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
const Shape* attr = nativeObject->mShape;
return (jlong)attr;
*/
    public static native long internal_native_get_mShape(long this_addr);

    public void set_mShape(Shape mShape) {
        internal_native_set_mShape(native_address, (mShape != null ? mShape.native_address : 0));
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
nativeObject->mShape = (Shape*)mShape_addr;
*/
    public static native void internal_native_set_mShape(long this_addr, long mShape_addr);

    public Float3 get_mShapeScale() {
        long pointer = internal_native_get_mShapeScale(native_address);
        if (pointer == 0)
            return null;
        if (Float3_TEMP_GEN_0 == null)
            Float3_TEMP_GEN_0 = new Float3((byte) 1, (char) 1);
        Float3_TEMP_GEN_0.internal_reset(pointer, false);
        return Float3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
return (jlong)&nativeObject->mShapeScale;
*/
    public static native long internal_native_get_mShapeScale(long this_addr);

    public void set_mShapeScale(Float3 mShapeScale) {
        internal_native_set_mShapeScale(native_address, (mShapeScale != null ? mShapeScale.native_address : 0));
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
nativeObject->mShapeScale = *((Float3*)mShapeScale_addr);
*/
    public static native void internal_native_set_mShapeScale(long this_addr, long mShapeScale_addr);

    public BodyID get_mBodyID() {
        long pointer = internal_native_get_mBodyID(native_address);
        if (pointer == 0)
            return null;
        if (BodyID_TEMP_GEN_0 == null)
            BodyID_TEMP_GEN_0 = new BodyID((byte) 1, (char) 1);
        BodyID_TEMP_GEN_0.internal_reset(pointer, false);
        return BodyID_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
return (jlong)&nativeObject->mBodyID;
*/
    public static native long internal_native_get_mBodyID(long this_addr);

    public void set_mBodyID(BodyID mBodyID) {
        internal_native_set_mBodyID(native_address, (mBodyID != null ? mBodyID.native_address : 0));
    }

    /*[-JNI;-NATIVE]
TransformedShape* nativeObject = (TransformedShape*)this_addr;
nativeObject->mBodyID = *((BodyID*)mBodyID_addr);
*/
    public static native void internal_native_set_mBodyID(long this_addr, long mBodyID_addr);
}
