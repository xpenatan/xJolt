/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.collision.shape;

import jolt.idl.IDLBase;
import jolt.enums.EShapeType;
import jolt.enums.EShapeSubType;
import jolt.geometry.AABox;
import jolt.math.Mat44;
import jolt.math.Vec3;
import jolt.physics.body.MassProperties;
import jolt.physics.collision.PhysicsMaterial;
import jolt.math.Quat;
import jolt.physics.collision.TransformedShape;

public class Shape extends IDLBase {

    private AABox AABox_TEMP_GEN_0;

    private AABox AABox_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_0;

    private MassProperties MassProperties_TEMP_GEN_0;

    private Shape Shape_TEMP_GEN_0;

    private PhysicsMaterial PhysicsMaterial_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private TransformedShape TransformedShape_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_2;

    private ShapeResult ShapeResult_TEMP_GEN_0;

    static public final Shape T_01 = new Shape((byte) 1, (char) 1);

    static public final Shape T_02 = new Shape((byte) 1, (char) 1);

    static public final Shape T_03 = new Shape((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public Shape(byte b, char c) {
    }

    public int GetRefCount() {
        return internal_native_GetRefCount(native_address);
    }

    /*[-JNI;-NATIVE]
Shape* nativeObject = (Shape*)this_addr;
return nativeObject->GetRefCount();
*/
    public static native int internal_native_GetRefCount(long this_addr);

    public void AddRef() {
        internal_native_AddRef(native_address);
    }

    /*[-JNI;-NATIVE]
Shape* nativeObject = (Shape*)this_addr;
nativeObject->AddRef();
*/
    public static native void internal_native_AddRef(long this_addr);

    public void Release() {
        internal_native_Release(native_address);
    }

    /*[-JNI;-NATIVE]
Shape* nativeObject = (Shape*)this_addr;
nativeObject->Release();
*/
    public static native void internal_native_Release(long this_addr);

    public EShapeType GetType() {
        int value = internal_native_GetType(native_address);
        return EShapeType.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
Shape* nativeObject = (Shape*)this_addr;
return (int)nativeObject->GetType();
*/
    public static native int internal_native_GetType(long this_addr);

    public EShapeSubType GetSubType() {
        int value = internal_native_GetSubType(native_address);
        return EShapeSubType.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
Shape* nativeObject = (Shape*)this_addr;
return (int)nativeObject->GetSubType();
*/
    public static native int internal_native_GetSubType(long this_addr);

    public boolean MustBeStatic() {
        return internal_native_MustBeStatic(native_address);
    }

    /*[-JNI;-NATIVE]
Shape* nativeObject = (Shape*)this_addr;
return nativeObject->MustBeStatic();
*/
    public static native boolean internal_native_MustBeStatic(long this_addr);

    public AABox GetLocalBounds() {
        long pointer = internal_native_GetLocalBounds(native_address);
        if (pointer == 0)
            return null;
        if (AABox_TEMP_GEN_0 == null)
            AABox_TEMP_GEN_0 = new AABox((byte) 1, (char) 1);
        AABox_TEMP_GEN_0.internal_reset(pointer, false);
        return AABox_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Shape* nativeObject = (Shape*)this_addr;
static AABox copy_addr;
copy_addr = nativeObject->GetLocalBounds();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetLocalBounds(long this_addr);

    public AABox GetWorldSpaceBounds(Mat44 inCenterOfMassTransform, Vec3 inScale) {
        long pointer = internal_native_GetWorldSpaceBounds(native_address, (inCenterOfMassTransform != null ? inCenterOfMassTransform.native_address : 0), (inScale != null ? inScale.native_address : 0));
        if (pointer == 0)
            return null;
        if (AABox_TEMP_GEN_1 == null)
            AABox_TEMP_GEN_1 = new AABox((byte) 1, (char) 1);
        AABox_TEMP_GEN_1.internal_reset(pointer, false);
        return AABox_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
Shape* nativeObject = (Shape*)this_addr;
static AABox copy_addr;
copy_addr = nativeObject->GetWorldSpaceBounds(*((Mat44* )inCenterOfMassTransform_addr), *((Vec3* )inScale_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_GetWorldSpaceBounds(long this_addr, long inCenterOfMassTransform_addr, long inScale_addr);

    public Vec3 GetCenterOfMass() {
        long pointer = internal_native_GetCenterOfMass(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Shape* nativeObject = (Shape*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetCenterOfMass();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetCenterOfMass(long this_addr);

    public long GetUserData() {
        return internal_native_GetUserData(native_address);
    }

    /*[-JNI;-NATIVE]
Shape* nativeObject = (Shape*)this_addr;
return nativeObject->GetUserData();
*/
    public static native long internal_native_GetUserData(long this_addr);

    public void SetUserData(long inUserData) {
        internal_native_SetUserData(native_address, inUserData);
    }

    /*[-JNI;-NATIVE]
Shape* nativeObject = (Shape*)this_addr;
nativeObject->SetUserData(inUserData);
*/
    public static native void internal_native_SetUserData(long this_addr, long inUserData);

    public int GetSubShapeIDBitsRecursive() {
        return internal_native_GetSubShapeIDBitsRecursive(native_address);
    }

    /*[-JNI;-NATIVE]
Shape* nativeObject = (Shape*)this_addr;
return nativeObject->GetSubShapeIDBitsRecursive();
*/
    public static native int internal_native_GetSubShapeIDBitsRecursive(long this_addr);

    public float GetInnerRadius() {
        return internal_native_GetInnerRadius(native_address);
    }

    /*[-JNI;-NATIVE]
Shape* nativeObject = (Shape*)this_addr;
return nativeObject->GetInnerRadius();
*/
    public static native float internal_native_GetInnerRadius(long this_addr);

    public MassProperties GetMassProperties() {
        long pointer = internal_native_GetMassProperties(native_address);
        if (pointer == 0)
            return null;
        if (MassProperties_TEMP_GEN_0 == null)
            MassProperties_TEMP_GEN_0 = new MassProperties((byte) 1, (char) 1);
        MassProperties_TEMP_GEN_0.internal_reset(pointer, false);
        return MassProperties_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Shape* nativeObject = (Shape*)this_addr;
static MassProperties copy_addr;
copy_addr = nativeObject->GetMassProperties();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetMassProperties(long this_addr);

    public Shape GetLeafShape(SubShapeID inSubShapeID, SubShapeID outRemainder) {
        long pointer = internal_native_GetLeafShape(native_address, (inSubShapeID != null ? inSubShapeID.native_address : 0), (outRemainder != null ? outRemainder.native_address : 0));
        if (pointer == 0)
            return null;
        if (Shape_TEMP_GEN_0 == null)
            Shape_TEMP_GEN_0 = new Shape((byte) 1, (char) 1);
        Shape_TEMP_GEN_0.internal_reset(pointer, false);
        return Shape_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Shape* nativeObject = (Shape*)this_addr;
const Shape* obj = nativeObject->GetLeafShape(*((SubShapeID* )inSubShapeID_addr), *((SubShapeID* )outRemainder_addr));
return (jlong)obj;
*/
    public static native long internal_native_GetLeafShape(long this_addr, long inSubShapeID_addr, long outRemainder_addr);

    public PhysicsMaterial GetMaterial(SubShapeID inSubShapeID) {
        long pointer = internal_native_GetMaterial(native_address, (inSubShapeID != null ? inSubShapeID.native_address : 0));
        if (pointer == 0)
            return null;
        if (PhysicsMaterial_TEMP_GEN_0 == null)
            PhysicsMaterial_TEMP_GEN_0 = new PhysicsMaterial((byte) 1, (char) 1);
        PhysicsMaterial_TEMP_GEN_0.internal_reset(pointer, false);
        return PhysicsMaterial_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Shape* nativeObject = (Shape*)this_addr;
const PhysicsMaterial* obj = nativeObject->GetMaterial(*((SubShapeID* )inSubShapeID_addr));
return (jlong)obj;
*/
    public static native long internal_native_GetMaterial(long this_addr, long inSubShapeID_addr);

    public Vec3 GetSurfaceNormal(SubShapeID inSubShapeID, Vec3 inLocalSurfacePosition) {
        long pointer = internal_native_GetSurfaceNormal(native_address, (inSubShapeID != null ? inSubShapeID.native_address : 0), (inLocalSurfacePosition != null ? inLocalSurfacePosition.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
Shape* nativeObject = (Shape*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetSurfaceNormal(*((SubShapeID* )inSubShapeID_addr), *((Vec3* )inLocalSurfacePosition_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_GetSurfaceNormal(long this_addr, long inSubShapeID_addr, long inLocalSurfacePosition_addr);

    public long GetSubShapeUserData(SubShapeID inSubShapeID) {
        return internal_native_GetSubShapeUserData(native_address, (inSubShapeID != null ? inSubShapeID.native_address : 0));
    }

    /*[-JNI;-NATIVE]
Shape* nativeObject = (Shape*)this_addr;
return nativeObject->GetSubShapeUserData(*((SubShapeID* )inSubShapeID_addr));
*/
    public static native long internal_native_GetSubShapeUserData(long this_addr, long inSubShapeID_addr);

    public TransformedShape GetSubShapeTransformedShape(SubShapeID inSubShapeID, Vec3 inPositionCOM, Quat inRotation, Vec3 inScale, SubShapeID outRemainder) {
        long pointer = internal_native_GetSubShapeTransformedShape(native_address, (inSubShapeID != null ? inSubShapeID.native_address : 0), (inPositionCOM != null ? inPositionCOM.native_address : 0), (inRotation != null ? inRotation.native_address : 0), (inScale != null ? inScale.native_address : 0), (outRemainder != null ? outRemainder.native_address : 0));
        if (pointer == 0)
            return null;
        if (TransformedShape_TEMP_GEN_0 == null)
            TransformedShape_TEMP_GEN_0 = new TransformedShape((byte) 1, (char) 1);
        TransformedShape_TEMP_GEN_0.internal_reset(pointer, false);
        return TransformedShape_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Shape* nativeObject = (Shape*)this_addr;
static TransformedShape copy_addr;
copy_addr = nativeObject->GetSubShapeTransformedShape(*((SubShapeID* )inSubShapeID_addr), *((Vec3* )inPositionCOM_addr), *((Quat* )inRotation_addr), *((Vec3* )inScale_addr), *((SubShapeID* )outRemainder_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_GetSubShapeTransformedShape(long this_addr, long inSubShapeID_addr, long inPositionCOM_addr, long inRotation_addr, long inScale_addr, long outRemainder_addr);

    public float GetVolume() {
        return internal_native_GetVolume(native_address);
    }

    /*[-JNI;-NATIVE]
Shape* nativeObject = (Shape*)this_addr;
return nativeObject->GetVolume();
*/
    public static native float internal_native_GetVolume(long this_addr);

    public boolean IsValidScale(Vec3 inScale) {
        return internal_native_IsValidScale(native_address, (inScale != null ? inScale.native_address : 0));
    }

    /*[-JNI;-NATIVE]
Shape* nativeObject = (Shape*)this_addr;
return nativeObject->IsValidScale(*((Vec3* )inScale_addr));
*/
    public static native boolean internal_native_IsValidScale(long this_addr, long inScale_addr);

    public Vec3 MakeScaleValid(Vec3 inScale) {
        long pointer = internal_native_MakeScaleValid(native_address, (inScale != null ? inScale.native_address : 0));
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
Shape* nativeObject = (Shape*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->MakeScaleValid(*((Vec3* )inScale_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_MakeScaleValid(long this_addr, long inScale_addr);

    public ShapeResult ScaleShape(Vec3 inScale) {
        long pointer = internal_native_ScaleShape(native_address, (inScale != null ? inScale.native_address : 0));
        if (pointer == 0)
            return null;
        if (ShapeResult_TEMP_GEN_0 == null)
            ShapeResult_TEMP_GEN_0 = new ShapeResult((byte) 1, (char) 1);
        ShapeResult_TEMP_GEN_0.internal_reset(pointer, false);
        return ShapeResult_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
Shape* nativeObject = (Shape*)this_addr;
static Shape::ShapeResult copy_addr;
copy_addr = nativeObject->ScaleShape(*((Vec3* )inScale_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_ScaleShape(long this_addr, long inScale_addr);
}
