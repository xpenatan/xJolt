/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.constraints;

import jolt.math.TwoBodyConstraintSettings;
import jolt.enums.EConstraintSpace;
import jolt.math.Vec3;

public class ConeConstraintSettings extends TwoBodyConstraintSettings {

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_2;

    private Vec3 Vec3_TEMP_GEN_3;

    static public final ConeConstraintSettings T_01 = new ConeConstraintSettings((byte) 1, (char) 1);

    static public final ConeConstraintSettings T_02 = new ConeConstraintSettings((byte) 1, (char) 1);

    static public final ConeConstraintSettings T_03 = new ConeConstraintSettings((byte) 1, (char) 1);

    public ConeConstraintSettings() {
        super((byte) 1, (char) 1);
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new ConeConstraintSettings();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public ConeConstraintSettings(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
ConeConstraintSettings* nativeObject = (ConeConstraintSettings*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public EConstraintSpace get_mSpace() {
        int value = internal_native_get_mSpace(native_address);
        return EConstraintSpace.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
ConeConstraintSettings* nativeObject = (ConeConstraintSettings*)this_addr;
return (jint)nativeObject->mSpace;
*/
    public static native int internal_native_get_mSpace(long this_addr);

    public void set_mSpace(EConstraintSpace mSpace) {
        internal_native_set_mSpace(native_address, (mSpace != null ? mSpace.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
ConeConstraintSettings* nativeObject = (ConeConstraintSettings*)this_addr;
nativeObject->mSpace = (::EConstraintSpace)mSpace;
*/
    public static native void internal_native_set_mSpace(long this_addr, long mSpace);

    public Vec3 get_mPoint1() {
        long pointer = internal_native_get_mPoint1(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
ConeConstraintSettings* nativeObject = (ConeConstraintSettings*)this_addr;
return (jlong)&nativeObject->mPoint1;
*/
    public static native long internal_native_get_mPoint1(long this_addr);

    public void set_mPoint1(Vec3 mPoint1) {
        internal_native_set_mPoint1(native_address, (mPoint1 != null ? mPoint1.native_address : 0));
    }

    /*[-JNI;-NATIVE]
ConeConstraintSettings* nativeObject = (ConeConstraintSettings*)this_addr;
nativeObject->mPoint1 = *((Vec3*)mPoint1_addr);
*/
    public static native void internal_native_set_mPoint1(long this_addr, long mPoint1_addr);

    public Vec3 get_mTwistAxis1() {
        long pointer = internal_native_get_mTwistAxis1(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
ConeConstraintSettings* nativeObject = (ConeConstraintSettings*)this_addr;
return (jlong)&nativeObject->mTwistAxis1;
*/
    public static native long internal_native_get_mTwistAxis1(long this_addr);

    public void set_mTwistAxis1(Vec3 mTwistAxis1) {
        internal_native_set_mTwistAxis1(native_address, (mTwistAxis1 != null ? mTwistAxis1.native_address : 0));
    }

    /*[-JNI;-NATIVE]
ConeConstraintSettings* nativeObject = (ConeConstraintSettings*)this_addr;
nativeObject->mTwistAxis1 = *((Vec3*)mTwistAxis1_addr);
*/
    public static native void internal_native_set_mTwistAxis1(long this_addr, long mTwistAxis1_addr);

    public Vec3 get_mPoint2() {
        long pointer = internal_native_get_mPoint2(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
ConeConstraintSettings* nativeObject = (ConeConstraintSettings*)this_addr;
return (jlong)&nativeObject->mPoint2;
*/
    public static native long internal_native_get_mPoint2(long this_addr);

    public void set_mPoint2(Vec3 mPoint2) {
        internal_native_set_mPoint2(native_address, (mPoint2 != null ? mPoint2.native_address : 0));
    }

    /*[-JNI;-NATIVE]
ConeConstraintSettings* nativeObject = (ConeConstraintSettings*)this_addr;
nativeObject->mPoint2 = *((Vec3*)mPoint2_addr);
*/
    public static native void internal_native_set_mPoint2(long this_addr, long mPoint2_addr);

    public Vec3 get_mTwistAxis2() {
        long pointer = internal_native_get_mTwistAxis2(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_3 == null)
            Vec3_TEMP_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_3.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
ConeConstraintSettings* nativeObject = (ConeConstraintSettings*)this_addr;
return (jlong)&nativeObject->mTwistAxis2;
*/
    public static native long internal_native_get_mTwistAxis2(long this_addr);

    public void set_mTwistAxis2(Vec3 mTwistAxis2) {
        internal_native_set_mTwistAxis2(native_address, (mTwistAxis2 != null ? mTwistAxis2.native_address : 0));
    }

    /*[-JNI;-NATIVE]
ConeConstraintSettings* nativeObject = (ConeConstraintSettings*)this_addr;
nativeObject->mTwistAxis2 = *((Vec3*)mTwistAxis2_addr);
*/
    public static native void internal_native_set_mTwistAxis2(long this_addr, long mTwistAxis2_addr);

    public float get_mHalfConeAngle() {
        return internal_native_get_mHalfConeAngle(native_address);
    }

    /*[-JNI;-NATIVE]
ConeConstraintSettings* nativeObject = (ConeConstraintSettings*)this_addr;
return nativeObject->mHalfConeAngle;
*/
    public static native float internal_native_get_mHalfConeAngle(long this_addr);

    public void set_mHalfConeAngle(float mHalfConeAngle) {
        internal_native_set_mHalfConeAngle(native_address, mHalfConeAngle);
    }

    /*[-JNI;-NATIVE]
ConeConstraintSettings* nativeObject = (ConeConstraintSettings*)this_addr;
nativeObject->mHalfConeAngle = mHalfConeAngle;
*/
    public static native void internal_native_set_mHalfConeAngle(long this_addr, float mHalfConeAngle);
}
