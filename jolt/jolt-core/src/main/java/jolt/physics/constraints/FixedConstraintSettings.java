/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.constraints;

import jolt.math.TwoBodyConstraintSettings;
import jolt.enums.EConstraintSpace;
import jolt.math.Vec3;

public class FixedConstraintSettings extends TwoBodyConstraintSettings {

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_2;

    private Vec3 Vec3_TEMP_GEN_3;

    private Vec3 Vec3_TEMP_GEN_4;

    private Vec3 Vec3_TEMP_GEN_5;

    static public final FixedConstraintSettings T_01 = new FixedConstraintSettings((byte) 1, (char) 1);

    static public final FixedConstraintSettings T_02 = new FixedConstraintSettings((byte) 1, (char) 1);

    static public final FixedConstraintSettings T_03 = new FixedConstraintSettings((byte) 1, (char) 1);

    public FixedConstraintSettings() {
        super((byte) 1, (char) 1);
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new FixedConstraintSettings();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public FixedConstraintSettings(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
FixedConstraintSettings* nativeObject = (FixedConstraintSettings*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public EConstraintSpace get_mSpace() {
        int value = internal_native_get_mSpace(native_address);
        return EConstraintSpace.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
FixedConstraintSettings* nativeObject = (FixedConstraintSettings*)this_addr;
return (jint)nativeObject->mSpace;
*/
    public static native int internal_native_get_mSpace(long this_addr);

    public void set_mSpace(EConstraintSpace mSpace) {
        internal_native_set_mSpace(native_address, (mSpace != null ? mSpace.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
FixedConstraintSettings* nativeObject = (FixedConstraintSettings*)this_addr;
nativeObject->mSpace = (::EConstraintSpace)mSpace;
*/
    public static native void internal_native_set_mSpace(long this_addr, long mSpace);

    public boolean get_mAutoDetectPoint() {
        return internal_native_get_mAutoDetectPoint(native_address);
    }

    /*[-JNI;-NATIVE]
FixedConstraintSettings* nativeObject = (FixedConstraintSettings*)this_addr;
return nativeObject->mAutoDetectPoint;
*/
    public static native boolean internal_native_get_mAutoDetectPoint(long this_addr);

    public void set_mAutoDetectPoint(boolean mAutoDetectPoint) {
        internal_native_set_mAutoDetectPoint(native_address, mAutoDetectPoint);
    }

    /*[-JNI;-NATIVE]
FixedConstraintSettings* nativeObject = (FixedConstraintSettings*)this_addr;
nativeObject->mAutoDetectPoint = mAutoDetectPoint;
*/
    public static native void internal_native_set_mAutoDetectPoint(long this_addr, boolean mAutoDetectPoint);

    public Vec3 get_mPoint1() {
        long pointer = internal_native_get_mPoint1(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
FixedConstraintSettings* nativeObject = (FixedConstraintSettings*)this_addr;
return (jlong)&nativeObject->mPoint1;
*/
    public static native long internal_native_get_mPoint1(long this_addr);

    public void set_mPoint1(Vec3 mPoint1) {
        internal_native_set_mPoint1(native_address, (mPoint1 != null ? mPoint1.native_address : 0));
    }

    /*[-JNI;-NATIVE]
FixedConstraintSettings* nativeObject = (FixedConstraintSettings*)this_addr;
nativeObject->mPoint1 = *((Vec3*)mPoint1_addr);
*/
    public static native void internal_native_set_mPoint1(long this_addr, long mPoint1_addr);

    public Vec3 get_mAxisX1() {
        long pointer = internal_native_get_mAxisX1(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
FixedConstraintSettings* nativeObject = (FixedConstraintSettings*)this_addr;
return (jlong)&nativeObject->mAxisX1;
*/
    public static native long internal_native_get_mAxisX1(long this_addr);

    public void set_mAxisX1(Vec3 mAxisX1) {
        internal_native_set_mAxisX1(native_address, (mAxisX1 != null ? mAxisX1.native_address : 0));
    }

    /*[-JNI;-NATIVE]
FixedConstraintSettings* nativeObject = (FixedConstraintSettings*)this_addr;
nativeObject->mAxisX1 = *((Vec3*)mAxisX1_addr);
*/
    public static native void internal_native_set_mAxisX1(long this_addr, long mAxisX1_addr);

    public Vec3 get_mAxisY1() {
        long pointer = internal_native_get_mAxisY1(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
FixedConstraintSettings* nativeObject = (FixedConstraintSettings*)this_addr;
return (jlong)&nativeObject->mAxisY1;
*/
    public static native long internal_native_get_mAxisY1(long this_addr);

    public void set_mAxisY1(Vec3 mAxisY1) {
        internal_native_set_mAxisY1(native_address, (mAxisY1 != null ? mAxisY1.native_address : 0));
    }

    /*[-JNI;-NATIVE]
FixedConstraintSettings* nativeObject = (FixedConstraintSettings*)this_addr;
nativeObject->mAxisY1 = *((Vec3*)mAxisY1_addr);
*/
    public static native void internal_native_set_mAxisY1(long this_addr, long mAxisY1_addr);

    public Vec3 get_mPoint2() {
        long pointer = internal_native_get_mPoint2(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_3 == null)
            Vec3_TEMP_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_3.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
FixedConstraintSettings* nativeObject = (FixedConstraintSettings*)this_addr;
return (jlong)&nativeObject->mPoint2;
*/
    public static native long internal_native_get_mPoint2(long this_addr);

    public void set_mPoint2(Vec3 mPoint2) {
        internal_native_set_mPoint2(native_address, (mPoint2 != null ? mPoint2.native_address : 0));
    }

    /*[-JNI;-NATIVE]
FixedConstraintSettings* nativeObject = (FixedConstraintSettings*)this_addr;
nativeObject->mPoint2 = *((Vec3*)mPoint2_addr);
*/
    public static native void internal_native_set_mPoint2(long this_addr, long mPoint2_addr);

    public Vec3 get_mAxisX2() {
        long pointer = internal_native_get_mAxisX2(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_4 == null)
            Vec3_TEMP_GEN_4 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_4.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_4;
    }

    /*[-JNI;-NATIVE]
FixedConstraintSettings* nativeObject = (FixedConstraintSettings*)this_addr;
return (jlong)&nativeObject->mAxisX2;
*/
    public static native long internal_native_get_mAxisX2(long this_addr);

    public void set_mAxisX2(Vec3 mAxisX2) {
        internal_native_set_mAxisX2(native_address, (mAxisX2 != null ? mAxisX2.native_address : 0));
    }

    /*[-JNI;-NATIVE]
FixedConstraintSettings* nativeObject = (FixedConstraintSettings*)this_addr;
nativeObject->mAxisX2 = *((Vec3*)mAxisX2_addr);
*/
    public static native void internal_native_set_mAxisX2(long this_addr, long mAxisX2_addr);

    public Vec3 get_mAxisY2() {
        long pointer = internal_native_get_mAxisY2(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_5 == null)
            Vec3_TEMP_GEN_5 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_5.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_5;
    }

    /*[-JNI;-NATIVE]
FixedConstraintSettings* nativeObject = (FixedConstraintSettings*)this_addr;
return (jlong)&nativeObject->mAxisY2;
*/
    public static native long internal_native_get_mAxisY2(long this_addr);

    public void set_mAxisY2(Vec3 mAxisY2) {
        internal_native_set_mAxisY2(native_address, (mAxisY2 != null ? mAxisY2.native_address : 0));
    }

    /*[-JNI;-NATIVE]
FixedConstraintSettings* nativeObject = (FixedConstraintSettings*)this_addr;
nativeObject->mAxisY2 = *((Vec3*)mAxisY2_addr);
*/
    public static native void internal_native_set_mAxisY2(long this_addr, long mAxisY2_addr);
}
