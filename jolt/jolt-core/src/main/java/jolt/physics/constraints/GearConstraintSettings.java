/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.constraints;

import jolt.math.TwoBodyConstraintSettings;
import jolt.enums.EConstraintSpace;
import jolt.math.Vec3;

public class GearConstraintSettings extends TwoBodyConstraintSettings {

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    static public final GearConstraintSettings T_01 = new GearConstraintSettings((byte) 1, (char) 1);

    static public final GearConstraintSettings T_02 = new GearConstraintSettings((byte) 1, (char) 1);

    static public final GearConstraintSettings T_03 = new GearConstraintSettings((byte) 1, (char) 1);

    public GearConstraintSettings() {
        super((byte) 1, (char) 1);
        long addr = internal_native_create();
        internal_reset(addr, true);
    }

    /*[-JNI;-NATIVE]
return (jlong)new GearConstraintSettings();
*/
    public static native long internal_native_create();

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public GearConstraintSettings(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
GearConstraintSettings* nativeObject = (GearConstraintSettings*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void SetRatio(int inNumTeethGear1, int inNumTeethGear2) {
        internal_native_SetRatio(native_address, inNumTeethGear1, inNumTeethGear2);
    }

    /*[-JNI;-NATIVE]
GearConstraintSettings* nativeObject = (GearConstraintSettings*)this_addr;
nativeObject->SetRatio((int)inNumTeethGear1, (int)inNumTeethGear2);
*/
    public static native void internal_native_SetRatio(long this_addr, int inNumTeethGear1, int inNumTeethGear2);

    public EConstraintSpace get_mSpace() {
        int value = internal_native_get_mSpace(native_address);
        return EConstraintSpace.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
GearConstraintSettings* nativeObject = (GearConstraintSettings*)this_addr;
return (jint)nativeObject->mSpace;
*/
    public static native int internal_native_get_mSpace(long this_addr);

    public void set_mSpace(EConstraintSpace mSpace) {
        internal_native_set_mSpace(native_address, (mSpace != null ? mSpace.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
GearConstraintSettings* nativeObject = (GearConstraintSettings*)this_addr;
nativeObject->mSpace = (::EConstraintSpace)mSpace;
*/
    public static native void internal_native_set_mSpace(long this_addr, long mSpace);

    public Vec3 get_mHingeAxis1() {
        long pointer = internal_native_get_mHingeAxis1(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
GearConstraintSettings* nativeObject = (GearConstraintSettings*)this_addr;
return (jlong)&nativeObject->mHingeAxis1;
*/
    public static native long internal_native_get_mHingeAxis1(long this_addr);

    public void set_mHingeAxis1(Vec3 mHingeAxis1) {
        internal_native_set_mHingeAxis1(native_address, (mHingeAxis1 != null ? mHingeAxis1.native_address : 0));
    }

    /*[-JNI;-NATIVE]
GearConstraintSettings* nativeObject = (GearConstraintSettings*)this_addr;
nativeObject->mHingeAxis1 = *((Vec3*)mHingeAxis1_addr);
*/
    public static native void internal_native_set_mHingeAxis1(long this_addr, long mHingeAxis1_addr);

    public Vec3 get_mHingeAxis2() {
        long pointer = internal_native_get_mHingeAxis2(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
GearConstraintSettings* nativeObject = (GearConstraintSettings*)this_addr;
return (jlong)&nativeObject->mHingeAxis2;
*/
    public static native long internal_native_get_mHingeAxis2(long this_addr);

    public void set_mHingeAxis2(Vec3 mHingeAxis2) {
        internal_native_set_mHingeAxis2(native_address, (mHingeAxis2 != null ? mHingeAxis2.native_address : 0));
    }

    /*[-JNI;-NATIVE]
GearConstraintSettings* nativeObject = (GearConstraintSettings*)this_addr;
nativeObject->mHingeAxis2 = *((Vec3*)mHingeAxis2_addr);
*/
    public static native void internal_native_set_mHingeAxis2(long this_addr, long mHingeAxis2_addr);

    public float get_mRatio() {
        return internal_native_get_mRatio(native_address);
    }

    /*[-JNI;-NATIVE]
GearConstraintSettings* nativeObject = (GearConstraintSettings*)this_addr;
return nativeObject->mRatio;
*/
    public static native float internal_native_get_mRatio(long this_addr);

    public void set_mRatio(float mRatio) {
        internal_native_set_mRatio(native_address, mRatio);
    }

    /*[-JNI;-NATIVE]
GearConstraintSettings* nativeObject = (GearConstraintSettings*)this_addr;
nativeObject->mRatio = mRatio;
*/
    public static native void internal_native_set_mRatio(long this_addr, float mRatio);
}
