/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.constraints;

import jolt.math.Vec3;
import jolt.enums.SixDOFConstraintSettings_EAxis;
import jolt.math.Quat;
import jolt.enums.EMotorState;

public class SixDOFConstraint extends TwoBodyConstraint {

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_2;

    private Vec3 Vec3_TEMP_GEN_3;

    private SpringSettings SpringSettings_TEMP_GEN_0;

    private Quat Quat_TEMP_GEN_0;

    private MotorSettings MotorSettings_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_4;

    private Vec3 Vec3_TEMP_GEN_5;

    private Vec3 Vec3_TEMP_GEN_6;

    private Quat Quat_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_7;

    private Vec3 Vec3_TEMP_GEN_8;

    private Vec3 Vec3_TEMP_GEN_9;

    private Vec3 Vec3_TEMP_GEN_10;

    static public final SixDOFConstraint T_01 = new SixDOFConstraint((byte) 1, (char) 1);

    static public final SixDOFConstraint T_02 = new SixDOFConstraint((byte) 1, (char) 1);

    static public final SixDOFConstraint T_03 = new SixDOFConstraint((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public SixDOFConstraint(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public void SetTranslationLimits(Vec3 inLimitMin, Vec3 inLimitMax) {
        internal_native_SetTranslationLimits(native_address, (inLimitMin != null ? inLimitMin.native_address : 0), (inLimitMax != null ? inLimitMax.native_address : 0));
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
nativeObject->SetTranslationLimits(*((Vec3* )inLimitMin_addr), *((Vec3* )inLimitMax_addr));
*/
    public static native void internal_native_SetTranslationLimits(long this_addr, long inLimitMin_addr, long inLimitMax_addr);

    public void SetRotationLimits(Vec3 inLimitMin, Vec3 inLimitMax) {
        internal_native_SetRotationLimits(native_address, (inLimitMin != null ? inLimitMin.native_address : 0), (inLimitMax != null ? inLimitMax.native_address : 0));
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
nativeObject->SetRotationLimits(*((Vec3* )inLimitMin_addr), *((Vec3* )inLimitMax_addr));
*/
    public static native void internal_native_SetRotationLimits(long this_addr, long inLimitMin_addr, long inLimitMax_addr);

    public float GetLimitsMin(SixDOFConstraintSettings_EAxis inAxis) {
        return internal_native_GetLimitsMin(native_address, (inAxis != null ? inAxis.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
return nativeObject->GetLimitsMin((::SixDOFConstraintSettings_EAxis)inAxis);
*/
    public static native float internal_native_GetLimitsMin(long this_addr, long inAxis);

    public float GetLimitsMax(SixDOFConstraintSettings_EAxis inAxis) {
        return internal_native_GetLimitsMax(native_address, (inAxis != null ? inAxis.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
return nativeObject->GetLimitsMax((::SixDOFConstraintSettings_EAxis)inAxis);
*/
    public static native float internal_native_GetLimitsMax(long this_addr, long inAxis);

    public Vec3 GetTranslationLimitsMin() {
        long pointer = internal_native_GetTranslationLimitsMin(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetTranslationLimitsMin();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetTranslationLimitsMin(long this_addr);

    public Vec3 GetTranslationLimitsMax() {
        long pointer = internal_native_GetTranslationLimitsMax(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetTranslationLimitsMax();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetTranslationLimitsMax(long this_addr);

    public Vec3 GetRotationLimitsMin() {
        long pointer = internal_native_GetRotationLimitsMin(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetRotationLimitsMin();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetRotationLimitsMin(long this_addr);

    public Vec3 GetRotationLimitsMax() {
        long pointer = internal_native_GetRotationLimitsMax(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_3 == null)
            Vec3_TEMP_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_3.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetRotationLimitsMax();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetRotationLimitsMax(long this_addr);

    public boolean IsFixedAxis(SixDOFConstraintSettings_EAxis inAxis) {
        return internal_native_IsFixedAxis(native_address, (inAxis != null ? inAxis.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
return nativeObject->IsFixedAxis((::SixDOFConstraintSettings_EAxis)inAxis);
*/
    public static native boolean internal_native_IsFixedAxis(long this_addr, long inAxis);

    public boolean IsFreeAxis(SixDOFConstraintSettings_EAxis inAxis) {
        return internal_native_IsFreeAxis(native_address, (inAxis != null ? inAxis.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
return nativeObject->IsFreeAxis((::SixDOFConstraintSettings_EAxis)inAxis);
*/
    public static native boolean internal_native_IsFreeAxis(long this_addr, long inAxis);

    public SpringSettings GetLimitsSpringSettings(SixDOFConstraintSettings_EAxis inAxis) {
        long pointer = internal_native_GetLimitsSpringSettings(native_address, (inAxis != null ? inAxis.getValue() : 0));
        if (pointer == 0)
            return null;
        if (SpringSettings_TEMP_GEN_0 == null)
            SpringSettings_TEMP_GEN_0 = new SpringSettings((byte) 1, (char) 1);
        SpringSettings_TEMP_GEN_0.internal_reset(pointer, false);
        return SpringSettings_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
return (jlong)&nativeObject->GetLimitsSpringSettings((::SixDOFConstraintSettings_EAxis)inAxis);
*/
    public static native long internal_native_GetLimitsSpringSettings(long this_addr, long inAxis);

    public void SetLimitsSpringSettings(SixDOFConstraintSettings_EAxis inAxis, SpringSettings inLimitsSpringSettings) {
        internal_native_SetLimitsSpringSettings(native_address, (inAxis != null ? inAxis.getValue() : 0), (inLimitsSpringSettings != null ? inLimitsSpringSettings.native_address : 0));
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
nativeObject->SetLimitsSpringSettings((::SixDOFConstraintSettings_EAxis)inAxis, *((SpringSettings* )inLimitsSpringSettings_addr));
*/
    public static native void internal_native_SetLimitsSpringSettings(long this_addr, long inAxis, long inLimitsSpringSettings_addr);

    public void SetMaxFriction(SixDOFConstraintSettings_EAxis inAxis, float inFriction) {
        internal_native_SetMaxFriction(native_address, (inAxis != null ? inAxis.getValue() : 0), inFriction);
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
nativeObject->SetMaxFriction((::SixDOFConstraintSettings_EAxis)inAxis, (float)inFriction);
*/
    public static native void internal_native_SetMaxFriction(long this_addr, long inAxis, float inFriction);

    public float GetMaxFriction(SixDOFConstraintSettings_EAxis inAxis) {
        return internal_native_GetMaxFriction(native_address, (inAxis != null ? inAxis.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
return nativeObject->GetMaxFriction((::SixDOFConstraintSettings_EAxis)inAxis);
*/
    public static native float internal_native_GetMaxFriction(long this_addr, long inAxis);

    public Quat GetRotationInConstraintSpace() {
        long pointer = internal_native_GetRotationInConstraintSpace(native_address);
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_0 == null)
            Quat_TEMP_GEN_0 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_0.internal_reset(pointer, false);
        return Quat_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->GetRotationInConstraintSpace();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetRotationInConstraintSpace(long this_addr);

    public MotorSettings GetMotorSettings(SixDOFConstraintSettings_EAxis inAxis) {
        long pointer = internal_native_GetMotorSettings(native_address, (inAxis != null ? inAxis.getValue() : 0));
        if (pointer == 0)
            return null;
        if (MotorSettings_TEMP_GEN_0 == null)
            MotorSettings_TEMP_GEN_0 = new MotorSettings((byte) 1, (char) 1);
        MotorSettings_TEMP_GEN_0.internal_reset(pointer, false);
        return MotorSettings_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
return (jlong)&nativeObject->GetMotorSettings((::SixDOFConstraintSettings_EAxis)inAxis);
*/
    public static native long internal_native_GetMotorSettings(long this_addr, long inAxis);

    public void SetMotorState(SixDOFConstraintSettings_EAxis inAxis, EMotorState inState) {
        internal_native_SetMotorState(native_address, (inAxis != null ? inAxis.getValue() : 0), (inState != null ? inState.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
nativeObject->SetMotorState((::SixDOFConstraintSettings_EAxis)inAxis, (::EMotorState)inState);
*/
    public static native void internal_native_SetMotorState(long this_addr, long inAxis, long inState);

    public EMotorState GetMotorState(SixDOFConstraintSettings_EAxis inAxis) {
        int value = internal_native_GetMotorState(native_address, (inAxis != null ? inAxis.getValue() : 0));
        return EMotorState.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
return (int)nativeObject->GetMotorState((::SixDOFConstraintSettings_EAxis)inAxis);
*/
    public static native int internal_native_GetMotorState(long this_addr, long inAxis);

    public Vec3 GetTargetVelocityCS() {
        long pointer = internal_native_GetTargetVelocityCS(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_4 == null)
            Vec3_TEMP_GEN_4 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_4.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_4;
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetTargetVelocityCS();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetTargetVelocityCS(long this_addr);

    public void SetTargetVelocityCS(Vec3 inVelocity) {
        internal_native_SetTargetVelocityCS(native_address, (inVelocity != null ? inVelocity.native_address : 0));
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
nativeObject->SetTargetVelocityCS(*((Vec3* )inVelocity_addr));
*/
    public static native void internal_native_SetTargetVelocityCS(long this_addr, long inVelocity_addr);

    public void SetTargetAngularVelocityCS(Vec3 inAngularVelocity) {
        internal_native_SetTargetAngularVelocityCS(native_address, (inAngularVelocity != null ? inAngularVelocity.native_address : 0));
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
nativeObject->SetTargetAngularVelocityCS(*((Vec3* )inAngularVelocity_addr));
*/
    public static native void internal_native_SetTargetAngularVelocityCS(long this_addr, long inAngularVelocity_addr);

    public Vec3 GetTargetAngularVelocityCS() {
        long pointer = internal_native_GetTargetAngularVelocityCS(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_5 == null)
            Vec3_TEMP_GEN_5 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_5.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_5;
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetTargetAngularVelocityCS();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetTargetAngularVelocityCS(long this_addr);

    public Vec3 GetTargetPositionCS() {
        long pointer = internal_native_GetTargetPositionCS(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_6 == null)
            Vec3_TEMP_GEN_6 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_6.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_6;
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetTargetPositionCS();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetTargetPositionCS(long this_addr);

    public void SetTargetPositionCS(Vec3 inPosition) {
        internal_native_SetTargetPositionCS(native_address, (inPosition != null ? inPosition.native_address : 0));
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
nativeObject->SetTargetPositionCS(*((Vec3* )inPosition_addr));
*/
    public static native void internal_native_SetTargetPositionCS(long this_addr, long inPosition_addr);

    public void SetTargetOrientationCS(Quat inOrientation) {
        internal_native_SetTargetOrientationCS(native_address, (inOrientation != null ? inOrientation.native_address : 0));
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
nativeObject->SetTargetOrientationCS(*((Quat* )inOrientation_addr));
*/
    public static native void internal_native_SetTargetOrientationCS(long this_addr, long inOrientation_addr);

    public Quat GetTargetOrientationCS() {
        long pointer = internal_native_GetTargetOrientationCS(native_address);
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_1 == null)
            Quat_TEMP_GEN_1 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_1.internal_reset(pointer, false);
        return Quat_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
static Quat copy_addr;
copy_addr = nativeObject->GetTargetOrientationCS();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetTargetOrientationCS(long this_addr);

    public void SetTargetOrientationBS(Quat inOrientation) {
        internal_native_SetTargetOrientationBS(native_address, (inOrientation != null ? inOrientation.native_address : 0));
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
nativeObject->SetTargetOrientationBS(*((Quat* )inOrientation_addr));
*/
    public static native void internal_native_SetTargetOrientationBS(long this_addr, long inOrientation_addr);

    public Vec3 GetTotalLambdaPosition() {
        long pointer = internal_native_GetTotalLambdaPosition(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_7 == null)
            Vec3_TEMP_GEN_7 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_7.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_7;
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetTotalLambdaPosition();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetTotalLambdaPosition(long this_addr);

    public Vec3 GetTotalLambdaRotation() {
        long pointer = internal_native_GetTotalLambdaRotation(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_8 == null)
            Vec3_TEMP_GEN_8 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_8.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_8;
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetTotalLambdaRotation();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetTotalLambdaRotation(long this_addr);

    public Vec3 GetTotalLambdaMotorTranslation() {
        long pointer = internal_native_GetTotalLambdaMotorTranslation(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_9 == null)
            Vec3_TEMP_GEN_9 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_9.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_9;
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetTotalLambdaMotorTranslation();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetTotalLambdaMotorTranslation(long this_addr);

    public Vec3 GetTotalLambdaMotorRotation() {
        long pointer = internal_native_GetTotalLambdaMotorRotation(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_10 == null)
            Vec3_TEMP_GEN_10 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_10.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_10;
    }

    /*[-JNI;-NATIVE]
SixDOFConstraint* nativeObject = (SixDOFConstraint*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetTotalLambdaMotorRotation();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetTotalLambdaMotorRotation(long this_addr);
}
