/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.constraints;

import jolt.enums.EMotorState;
import jolt.math.Vector2;
import jolt.math.Vec3;

public class SliderConstraint extends TwoBodyConstraint {

    private MotorSettings MotorSettings_TEMP_GEN_0;

    private SpringSettings SpringSettings_TEMP_GEN_0;

    private Vector2 Vector2_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_0;

    static public final SliderConstraint T_01 = new SliderConstraint((byte) 1, (char) 1);

    static public final SliderConstraint T_02 = new SliderConstraint((byte) 1, (char) 1);

    static public final SliderConstraint T_03 = new SliderConstraint((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public SliderConstraint(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public float GetCurrentPosition() {
        return internal_native_GetCurrentPosition(native_address);
    }

    /*[-JNI;-NATIVE]
SliderConstraint* nativeObject = (SliderConstraint*)this_addr;
return nativeObject->GetCurrentPosition();
*/
    public static native float internal_native_GetCurrentPosition(long this_addr);

    public void SetMaxFrictionForce(float inFrictionForce) {
        internal_native_SetMaxFrictionForce(native_address, inFrictionForce);
    }

    /*[-JNI;-NATIVE]
SliderConstraint* nativeObject = (SliderConstraint*)this_addr;
nativeObject->SetMaxFrictionForce((float)inFrictionForce);
*/
    public static native void internal_native_SetMaxFrictionForce(long this_addr, float inFrictionForce);

    public float GetMaxFrictionForce() {
        return internal_native_GetMaxFrictionForce(native_address);
    }

    /*[-JNI;-NATIVE]
SliderConstraint* nativeObject = (SliderConstraint*)this_addr;
return nativeObject->GetMaxFrictionForce();
*/
    public static native float internal_native_GetMaxFrictionForce(long this_addr);

    public MotorSettings GetMotorSettings() {
        long pointer = internal_native_GetMotorSettings(native_address);
        if (pointer == 0)
            return null;
        if (MotorSettings_TEMP_GEN_0 == null)
            MotorSettings_TEMP_GEN_0 = new MotorSettings((byte) 1, (char) 1);
        MotorSettings_TEMP_GEN_0.internal_reset(pointer, false);
        return MotorSettings_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SliderConstraint* nativeObject = (SliderConstraint*)this_addr;
return (jlong)&nativeObject->GetMotorSettings();
*/
    public static native long internal_native_GetMotorSettings(long this_addr);

    public void SetMotorState(EMotorState inState) {
        internal_native_SetMotorState(native_address, (inState != null ? inState.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
SliderConstraint* nativeObject = (SliderConstraint*)this_addr;
nativeObject->SetMotorState((::EMotorState)inState);
*/
    public static native void internal_native_SetMotorState(long this_addr, long inState);

    public EMotorState GetMotorState() {
        int value = internal_native_GetMotorState(native_address);
        return EMotorState.MAP.get(value);
    }

    /*[-JNI;-NATIVE]
SliderConstraint* nativeObject = (SliderConstraint*)this_addr;
return (int)nativeObject->GetMotorState();
*/
    public static native int internal_native_GetMotorState(long this_addr);

    public void SetTargetVelocity(float inVelocity) {
        internal_native_SetTargetVelocity(native_address, inVelocity);
    }

    /*[-JNI;-NATIVE]
SliderConstraint* nativeObject = (SliderConstraint*)this_addr;
nativeObject->SetTargetVelocity((float)inVelocity);
*/
    public static native void internal_native_SetTargetVelocity(long this_addr, float inVelocity);

    public float GetTargetVelocity() {
        return internal_native_GetTargetVelocity(native_address);
    }

    /*[-JNI;-NATIVE]
SliderConstraint* nativeObject = (SliderConstraint*)this_addr;
return nativeObject->GetTargetVelocity();
*/
    public static native float internal_native_GetTargetVelocity(long this_addr);

    public void SetTargetPosition(float inPosition) {
        internal_native_SetTargetPosition(native_address, inPosition);
    }

    /*[-JNI;-NATIVE]
SliderConstraint* nativeObject = (SliderConstraint*)this_addr;
nativeObject->SetTargetPosition((float)inPosition);
*/
    public static native void internal_native_SetTargetPosition(long this_addr, float inPosition);

    public float GetTargetPosition() {
        return internal_native_GetTargetPosition(native_address);
    }

    /*[-JNI;-NATIVE]
SliderConstraint* nativeObject = (SliderConstraint*)this_addr;
return nativeObject->GetTargetPosition();
*/
    public static native float internal_native_GetTargetPosition(long this_addr);

    public void SetLimits(float inLimitsMin, float inLimitsMax) {
        internal_native_SetLimits(native_address, inLimitsMin, inLimitsMax);
    }

    /*[-JNI;-NATIVE]
SliderConstraint* nativeObject = (SliderConstraint*)this_addr;
nativeObject->SetLimits((float)inLimitsMin, (float)inLimitsMax);
*/
    public static native void internal_native_SetLimits(long this_addr, float inLimitsMin, float inLimitsMax);

    public float GetLimitsMin() {
        return internal_native_GetLimitsMin(native_address);
    }

    /*[-JNI;-NATIVE]
SliderConstraint* nativeObject = (SliderConstraint*)this_addr;
return nativeObject->GetLimitsMin();
*/
    public static native float internal_native_GetLimitsMin(long this_addr);

    public float GetLimitsMax() {
        return internal_native_GetLimitsMax(native_address);
    }

    /*[-JNI;-NATIVE]
SliderConstraint* nativeObject = (SliderConstraint*)this_addr;
return nativeObject->GetLimitsMax();
*/
    public static native float internal_native_GetLimitsMax(long this_addr);

    public boolean HasLimits() {
        return internal_native_HasLimits(native_address);
    }

    /*[-JNI;-NATIVE]
SliderConstraint* nativeObject = (SliderConstraint*)this_addr;
return nativeObject->HasLimits();
*/
    public static native boolean internal_native_HasLimits(long this_addr);

    public SpringSettings GetLimitsSpringSettings() {
        long pointer = internal_native_GetLimitsSpringSettings(native_address);
        if (pointer == 0)
            return null;
        if (SpringSettings_TEMP_GEN_0 == null)
            SpringSettings_TEMP_GEN_0 = new SpringSettings((byte) 1, (char) 1);
        SpringSettings_TEMP_GEN_0.internal_reset(pointer, false);
        return SpringSettings_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SliderConstraint* nativeObject = (SliderConstraint*)this_addr;
return (jlong)&nativeObject->GetLimitsSpringSettings();
*/
    public static native long internal_native_GetLimitsSpringSettings(long this_addr);

    public void SetLimitsSpringSettings(SpringSettings inLimitsSpringSettings) {
        internal_native_SetLimitsSpringSettings(native_address, (inLimitsSpringSettings != null ? inLimitsSpringSettings.native_address : 0));
    }

    /*[-JNI;-NATIVE]
SliderConstraint* nativeObject = (SliderConstraint*)this_addr;
nativeObject->SetLimitsSpringSettings(*((SpringSettings* )inLimitsSpringSettings_addr));
*/
    public static native void internal_native_SetLimitsSpringSettings(long this_addr, long inLimitsSpringSettings_addr);

    public Vector2 GetTotalLambdaPosition() {
        long pointer = internal_native_GetTotalLambdaPosition(native_address);
        if (pointer == 0)
            return null;
        if (Vector2_TEMP_GEN_0 == null)
            Vector2_TEMP_GEN_0 = new Vector2((byte) 1, (char) 1);
        Vector2_TEMP_GEN_0.internal_reset(pointer, false);
        return Vector2_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SliderConstraint* nativeObject = (SliderConstraint*)this_addr;
static Vector2 copy_addr;
copy_addr = nativeObject->GetTotalLambdaPosition();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetTotalLambdaPosition(long this_addr);

    public float GetTotalLambdaPositionLimits() {
        return internal_native_GetTotalLambdaPositionLimits(native_address);
    }

    /*[-JNI;-NATIVE]
SliderConstraint* nativeObject = (SliderConstraint*)this_addr;
return nativeObject->GetTotalLambdaPositionLimits();
*/
    public static native float internal_native_GetTotalLambdaPositionLimits(long this_addr);

    public Vec3 GetTotalLambdaRotation() {
        long pointer = internal_native_GetTotalLambdaRotation(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SliderConstraint* nativeObject = (SliderConstraint*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetTotalLambdaRotation();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetTotalLambdaRotation(long this_addr);

    public float GetTotalLambdaMotor() {
        return internal_native_GetTotalLambdaMotor(native_address);
    }

    /*[-JNI;-NATIVE]
SliderConstraint* nativeObject = (SliderConstraint*)this_addr;
return nativeObject->GetTotalLambdaMotor();
*/
    public static native float internal_native_GetTotalLambdaMotor(long this_addr);
}
