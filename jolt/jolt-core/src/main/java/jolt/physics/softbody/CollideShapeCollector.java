/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.softbody;

import jolt.idl.IDLBase;
import jolt.physics.collision.TransformedShape;
import jolt.physics.body.Body;
import jolt.physics.collision.CollideShapeResult;

public class CollideShapeCollector extends IDLBase {

    private TransformedShape TransformedShape_TEMP_GEN_0;

    static private Body Body_TEMP_STATIC_GEN_0;

    static private CollideShapeResult CollideShapeResult_TEMP_STATIC_GEN_0;

    /*[-JNI;-NATIVE]
class CollideShapeCollectorJS : public CollideShapeCollector {
private:
	JNIEnv* env;
	jobject obj;
public:
	inline static jclass jClassID = 0;
	inline static jmethodID Reset_ID = 0;
	inline static jmethodID OnBodyJ_ID = 0;
	inline static jmethodID AddHitJ_ID = 0;

void setupCallback(JNIEnv* env, jobject obj) {
	this->env = env;
	this->obj = env->NewGlobalRef(obj);
	if(CollideShapeCollectorJS::jClassID == 0) {
		CollideShapeCollectorJS::jClassID = (jclass)env->NewGlobalRef(env->GetObjectClass(obj));
		CollideShapeCollectorJS::Reset_ID = env->GetMethodID(jClassID, "internal_Reset", "()V");
		CollideShapeCollectorJS::OnBodyJ_ID = env->GetMethodID(jClassID, "internal_OnBody", "(J)V");
		CollideShapeCollectorJS::AddHitJ_ID = env->GetMethodID(jClassID, "internal_AddHit", "(J)V");
	}
}
virtual void Reset() {
   env->CallVoidMethod(obj, CollideShapeCollectorJS::Reset_ID);
}
virtual void OnBody(const Body& inBody) {
   env->CallVoidMethod(obj, CollideShapeCollectorJS::OnBodyJ_ID, (jlong)&inBody);
}
virtual void AddHit(const CollideShapeResult& inResult) {
   env->CallVoidMethod(obj, CollideShapeCollectorJS::AddHitJ_ID, (jlong)&inResult);
}
};
*/
    @Deprecated()
    public CollideShapeCollector(byte b, char c) {
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
CollideShapeCollectorJS* nativeObject = (CollideShapeCollectorJS*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void SetContext(TransformedShape inContext) {
        internal_native_SetContext(native_address, (inContext != null ? inContext.native_address : 0));
    }

    /*[-JNI;-NATIVE]
CollideShapeCollector* nativeObject = (CollideShapeCollector*)this_addr;
nativeObject->SetContext((TransformedShape* )inContext_addr);
*/
    public static native void internal_native_SetContext(long this_addr, long inContext_addr);

    public TransformedShape GetContext() {
        long pointer = internal_native_GetContext(native_address);
        if (pointer == 0)
            return null;
        if (TransformedShape_TEMP_GEN_0 == null)
            TransformedShape_TEMP_GEN_0 = new TransformedShape((byte) 1, (char) 1);
        TransformedShape_TEMP_GEN_0.internal_reset(pointer, false);
        return TransformedShape_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
CollideShapeCollector* nativeObject = (CollideShapeCollector*)this_addr;
const TransformedShape* obj = nativeObject->GetContext();
return (jlong)obj;
*/
    public static native long internal_native_GetContext(long this_addr);

    public void UpdateEarlyOutFraction(float inFraction) {
        internal_native_UpdateEarlyOutFraction(native_address, inFraction);
    }

    /*[-JNI;-NATIVE]
CollideShapeCollector* nativeObject = (CollideShapeCollector*)this_addr;
nativeObject->UpdateEarlyOutFraction((float)inFraction);
*/
    public static native void internal_native_UpdateEarlyOutFraction(long this_addr, float inFraction);

    public void ResetEarlyOutFraction(float inFraction) {
        internal_native_ResetEarlyOutFraction(native_address, inFraction);
    }

    /*[-JNI;-NATIVE]
CollideShapeCollector* nativeObject = (CollideShapeCollector*)this_addr;
nativeObject->ResetEarlyOutFraction((float)inFraction);
*/
    public static native void internal_native_ResetEarlyOutFraction(long this_addr, float inFraction);

    public void ResetEarlyOutFraction() {
        internal_native_ResetEarlyOutFraction(native_address);
    }

    /*[-JNI;-NATIVE]
CollideShapeCollector* nativeObject = (CollideShapeCollector*)this_addr;
nativeObject->ResetEarlyOutFraction();
*/
    public static native void internal_native_ResetEarlyOutFraction(long this_addr);

    public void ForceEarlyOut() {
        internal_native_ForceEarlyOut(native_address);
    }

    /*[-JNI;-NATIVE]
CollideShapeCollector* nativeObject = (CollideShapeCollector*)this_addr;
nativeObject->ForceEarlyOut();
*/
    public static native void internal_native_ForceEarlyOut(long this_addr);

    public boolean ShouldEarlyOut() {
        return internal_native_ShouldEarlyOut(native_address);
    }

    /*[-JNI;-NATIVE]
CollideShapeCollector* nativeObject = (CollideShapeCollector*)this_addr;
return nativeObject->ShouldEarlyOut();
*/
    public static native boolean internal_native_ShouldEarlyOut(long this_addr);

    public float GetEarlyOutFraction() {
        return internal_native_GetEarlyOutFraction(native_address);
    }

    /*[-JNI;-NATIVE]
CollideShapeCollector* nativeObject = (CollideShapeCollector*)this_addr;
return nativeObject->GetEarlyOutFraction();
*/
    public static native float internal_native_GetEarlyOutFraction(long this_addr);

    public float GetPositiveEarlyOutFraction() {
        return internal_native_GetPositiveEarlyOutFraction(native_address);
    }

    /*[-JNI;-NATIVE]
CollideShapeCollector* nativeObject = (CollideShapeCollector*)this_addr;
return nativeObject->GetPositiveEarlyOutFraction();
*/
    public static native float internal_native_GetPositiveEarlyOutFraction(long this_addr);

    public CollideShapeCollector() {
        long addr = internal_native_create();
        internal_reset(addr, true);
        setupCallback();
    }

    private void setupCallback() {
        internal_native_setupCallback(native_address);
    }

    protected void Reset() {
    }

    private void internal_Reset() {
        Reset();
    }

    protected void OnBody(Body inBody) {
    }

    private void internal_OnBody(long inBody_addr) {
        if (Body_TEMP_STATIC_GEN_0 == null)
            Body_TEMP_STATIC_GEN_0 = new Body((byte) 1, (char) 1);
        Body_TEMP_STATIC_GEN_0.internal_reset(inBody_addr, false);
        OnBody(Body_TEMP_STATIC_GEN_0);
    }

    protected void AddHit(CollideShapeResult inResult) {
    }

    private void internal_AddHit(long inResult_addr) {
        if (CollideShapeResult_TEMP_STATIC_GEN_0 == null)
            CollideShapeResult_TEMP_STATIC_GEN_0 = new CollideShapeResult((byte) 1, (char) 1);
        CollideShapeResult_TEMP_STATIC_GEN_0.internal_reset(inResult_addr, false);
        AddHit(CollideShapeResult_TEMP_STATIC_GEN_0);
    }

    /*[-JNI;-NATIVE]
return (jlong)new CollideShapeCollectorJS();
*/
    public static native long internal_native_create();

    /*[-JNI;-NATIVE]
CollideShapeCollectorJS* nativeObject = (CollideShapeCollectorJS*)this_addr;
nativeObject->setupCallback(env, object);
*/
    public native void internal_native_setupCallback(long this_addr);
}
