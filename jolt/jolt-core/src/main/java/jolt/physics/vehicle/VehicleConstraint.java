/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.vehicle;

import jolt.physics.constraints.Constraint;
import jolt.physics.body.Body;
import jolt.math.Vec3;
import jolt.math.Mat44;

public class VehicleConstraint extends Constraint {

    private Vec3 Vec3_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_1;

    private Vec3 Vec3_TEMP_GEN_2;

    private Vec3 Vec3_TEMP_GEN_3;

    private Body Body_TEMP_GEN_0;

    private VehicleController VehicleController_TEMP_GEN_0;

    private Wheels Wheels_TEMP_GEN_0;

    private Wheel Wheel_TEMP_GEN_0;

    private Mat44 Mat44_TEMP_GEN_0;

    private Mat44 Mat44_TEMP_GEN_1;

    private ArrayVehicleAntiRollBar ArrayVehicleAntiRollBar_TEMP_GEN_0;

    static public final VehicleConstraint T_01 = new VehicleConstraint((byte) 1, (char) 1);

    static public final VehicleConstraint T_02 = new VehicleConstraint((byte) 1, (char) 1);

    static public final VehicleConstraint T_03 = new VehicleConstraint((byte) 1, (char) 1);

    public VehicleConstraint(Body inVehicleBody, VehicleConstraintSettings inSettings) {
        super((byte) 1, (char) 1);
        long addr = internal_native_create_Body_VehicleConstraintSettings((inVehicleBody != null ? inVehicleBody.native_address : 0), (inSettings != null ? inSettings.native_address : 0));
        internal_reset(addr, false);
    }

    /*[-JNI;-NATIVE]
return (jlong)new VehicleConstraint(*((Body* )inVehicleBody_addr), *((VehicleConstraintSettings* )inSettings_addr));
*/
    public static native long internal_native_create_Body_VehicleConstraintSettings(long inVehicleBody_addr, long inSettings_addr);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public VehicleConstraint(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public void SetMaxPitchRollAngle(float inMaxPitchRollAngle) {
        internal_native_SetMaxPitchRollAngle(native_address, inMaxPitchRollAngle);
    }

    /*[-JNI;-NATIVE]
VehicleConstraint* nativeObject = (VehicleConstraint*)this_addr;
nativeObject->SetMaxPitchRollAngle((float)inMaxPitchRollAngle);
*/
    public static native void internal_native_SetMaxPitchRollAngle(long this_addr, float inMaxPitchRollAngle);

    public void SetVehicleCollisionTester(VehicleCollisionTester inTester) {
        internal_native_SetVehicleCollisionTester(native_address, (inTester != null ? inTester.native_address : 0));
    }

    /*[-JNI;-NATIVE]
VehicleConstraint* nativeObject = (VehicleConstraint*)this_addr;
nativeObject->SetVehicleCollisionTester((VehicleCollisionTester* )inTester_addr);
*/
    public static native void internal_native_SetVehicleCollisionTester(long this_addr, long inTester_addr);

    public void OverrideGravity(Vec3 inGravity) {
        internal_native_OverrideGravity(native_address, (inGravity != null ? inGravity.native_address : 0));
    }

    /*[-JNI;-NATIVE]
VehicleConstraint* nativeObject = (VehicleConstraint*)this_addr;
nativeObject->OverrideGravity(*((Vec3* )inGravity_addr));
*/
    public static native void internal_native_OverrideGravity(long this_addr, long inGravity_addr);

    public boolean IsGravityOverridden() {
        return internal_native_IsGravityOverridden(native_address);
    }

    /*[-JNI;-NATIVE]
VehicleConstraint* nativeObject = (VehicleConstraint*)this_addr;
return nativeObject->IsGravityOverridden();
*/
    public static native boolean internal_native_IsGravityOverridden(long this_addr);

    public Vec3 GetGravityOverride() {
        long pointer = internal_native_GetGravityOverride(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
VehicleConstraint* nativeObject = (VehicleConstraint*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetGravityOverride();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetGravityOverride(long this_addr);

    public void ResetGravityOverride() {
        internal_native_ResetGravityOverride(native_address);
    }

    /*[-JNI;-NATIVE]
VehicleConstraint* nativeObject = (VehicleConstraint*)this_addr;
nativeObject->ResetGravityOverride();
*/
    public static native void internal_native_ResetGravityOverride(long this_addr);

    public Vec3 GetLocalUp() {
        long pointer = internal_native_GetLocalUp(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_1 == null)
            Vec3_TEMP_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_1.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
VehicleConstraint* nativeObject = (VehicleConstraint*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetLocalUp();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetLocalUp(long this_addr);

    public Vec3 GetLocalForward() {
        long pointer = internal_native_GetLocalForward(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_2 == null)
            Vec3_TEMP_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_2.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_2;
    }

    /*[-JNI;-NATIVE]
VehicleConstraint* nativeObject = (VehicleConstraint*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetLocalForward();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetLocalForward(long this_addr);

    public Vec3 GetWorldUp() {
        long pointer = internal_native_GetWorldUp(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_3 == null)
            Vec3_TEMP_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_3.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_3;
    }

    /*[-JNI;-NATIVE]
VehicleConstraint* nativeObject = (VehicleConstraint*)this_addr;
static Vec3 copy_addr;
copy_addr = nativeObject->GetWorldUp();
return (jlong)&copy_addr;*/
    public static native long internal_native_GetWorldUp(long this_addr);

    public Body GetVehicleBody() {
        long pointer = internal_native_GetVehicleBody(native_address);
        if (pointer == 0)
            return null;
        if (Body_TEMP_GEN_0 == null)
            Body_TEMP_GEN_0 = new Body((byte) 1, (char) 1);
        Body_TEMP_GEN_0.internal_reset(pointer, false);
        return Body_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
VehicleConstraint* nativeObject = (VehicleConstraint*)this_addr;
Body* obj = nativeObject->GetVehicleBody();
return (jlong)obj;
*/
    public static native long internal_native_GetVehicleBody(long this_addr);

    public VehicleController GetController() {
        long pointer = internal_native_GetController(native_address);
        if (pointer == 0)
            return null;
        if (VehicleController_TEMP_GEN_0 == null)
            VehicleController_TEMP_GEN_0 = new VehicleController((byte) 1, (char) 1);
        VehicleController_TEMP_GEN_0.internal_reset(pointer, false);
        return VehicleController_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
VehicleConstraint* nativeObject = (VehicleConstraint*)this_addr;
VehicleController* obj = nativeObject->GetController();
return (jlong)obj;
*/
    public static native long internal_native_GetController(long this_addr);

    public Wheels GetWheels() {
        long pointer = internal_native_GetWheels(native_address);
        if (pointer == 0)
            return null;
        if (Wheels_TEMP_GEN_0 == null)
            Wheels_TEMP_GEN_0 = new Wheels((byte) 1, (char) 1);
        Wheels_TEMP_GEN_0.internal_reset(pointer, false);
        return Wheels_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
VehicleConstraint* nativeObject = (VehicleConstraint*)this_addr;
return (jlong)&nativeObject->GetWheels();
*/
    public static native long internal_native_GetWheels(long this_addr);

    public Wheel GetWheel(int inIdx) {
        long pointer = internal_native_GetWheel(native_address, inIdx);
        if (pointer == 0)
            return null;
        if (Wheel_TEMP_GEN_0 == null)
            Wheel_TEMP_GEN_0 = new Wheel((byte) 1, (char) 1);
        Wheel_TEMP_GEN_0.internal_reset(pointer, false);
        return Wheel_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
VehicleConstraint* nativeObject = (VehicleConstraint*)this_addr;
const Wheel* obj = nativeObject->GetWheel(inIdx);
return (jlong)obj;
*/
    public static native long internal_native_GetWheel(long this_addr, int inIdx);

    public Mat44 GetWheelLocalTransform(int inWheelIndex, Vec3 inWheelRight, Vec3 inWheelUp) {
        long pointer = internal_native_GetWheelLocalTransform(native_address, inWheelIndex, (inWheelRight != null ? inWheelRight.native_address : 0), (inWheelUp != null ? inWheelUp.native_address : 0));
        if (pointer == 0)
            return null;
        if (Mat44_TEMP_GEN_0 == null)
            Mat44_TEMP_GEN_0 = new Mat44((byte) 1, (char) 1);
        Mat44_TEMP_GEN_0.internal_reset(pointer, false);
        return Mat44_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
VehicleConstraint* nativeObject = (VehicleConstraint*)this_addr;
static Mat44 copy_addr;
copy_addr = nativeObject->GetWheelLocalTransform(inWheelIndex, *((Vec3* )inWheelRight_addr), *((Vec3* )inWheelUp_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_GetWheelLocalTransform(long this_addr, int inWheelIndex, long inWheelRight_addr, long inWheelUp_addr);

    public Mat44 GetWheelWorldTransform(int inWheelIndex, Vec3 inWheelRight, Vec3 inWheelUp) {
        long pointer = internal_native_GetWheelWorldTransform(native_address, inWheelIndex, (inWheelRight != null ? inWheelRight.native_address : 0), (inWheelUp != null ? inWheelUp.native_address : 0));
        if (pointer == 0)
            return null;
        if (Mat44_TEMP_GEN_1 == null)
            Mat44_TEMP_GEN_1 = new Mat44((byte) 1, (char) 1);
        Mat44_TEMP_GEN_1.internal_reset(pointer, false);
        return Mat44_TEMP_GEN_1;
    }

    /*[-JNI;-NATIVE]
VehicleConstraint* nativeObject = (VehicleConstraint*)this_addr;
static Mat44 copy_addr;
copy_addr = nativeObject->GetWheelWorldTransform(inWheelIndex, *((Vec3* )inWheelRight_addr), *((Vec3* )inWheelUp_addr));
return (jlong)&copy_addr;*/
    public static native long internal_native_GetWheelWorldTransform(long this_addr, int inWheelIndex, long inWheelRight_addr, long inWheelUp_addr);

    public ArrayVehicleAntiRollBar GetAntiRollBars() {
        long pointer = internal_native_GetAntiRollBars(native_address);
        if (pointer == 0)
            return null;
        if (ArrayVehicleAntiRollBar_TEMP_GEN_0 == null)
            ArrayVehicleAntiRollBar_TEMP_GEN_0 = new ArrayVehicleAntiRollBar((byte) 1, (char) 1);
        ArrayVehicleAntiRollBar_TEMP_GEN_0.internal_reset(pointer, false);
        return ArrayVehicleAntiRollBar_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
VehicleConstraint* nativeObject = (VehicleConstraint*)this_addr;
return (jlong)&nativeObject->GetAntiRollBars();
*/
    public static native long internal_native_GetAntiRollBars(long this_addr);

    public void SetNumStepsBetweenCollisionTestActive(int inSteps) {
        internal_native_SetNumStepsBetweenCollisionTestActive(native_address, inSteps);
    }

    /*[-JNI;-NATIVE]
VehicleConstraint* nativeObject = (VehicleConstraint*)this_addr;
nativeObject->SetNumStepsBetweenCollisionTestActive(inSteps);
*/
    public static native void internal_native_SetNumStepsBetweenCollisionTestActive(long this_addr, int inSteps);

    public int GetNumStepsBetweenCollisionTestActive() {
        return internal_native_GetNumStepsBetweenCollisionTestActive(native_address);
    }

    /*[-JNI;-NATIVE]
VehicleConstraint* nativeObject = (VehicleConstraint*)this_addr;
return nativeObject->GetNumStepsBetweenCollisionTestActive();
*/
    public static native int internal_native_GetNumStepsBetweenCollisionTestActive(long this_addr);

    public void SetNumStepsBetweenCollisionTestInactive(int inSteps) {
        internal_native_SetNumStepsBetweenCollisionTestInactive(native_address, inSteps);
    }

    /*[-JNI;-NATIVE]
VehicleConstraint* nativeObject = (VehicleConstraint*)this_addr;
nativeObject->SetNumStepsBetweenCollisionTestInactive(inSteps);
*/
    public static native void internal_native_SetNumStepsBetweenCollisionTestInactive(long this_addr, int inSteps);

    public int GetNumStepsBetweenCollisionTestInactive() {
        return internal_native_GetNumStepsBetweenCollisionTestInactive(native_address);
    }

    /*[-JNI;-NATIVE]
VehicleConstraint* nativeObject = (VehicleConstraint*)this_addr;
return nativeObject->GetNumStepsBetweenCollisionTestInactive();
*/
    public static native int internal_native_GetNumStepsBetweenCollisionTestInactive(long this_addr);
}
