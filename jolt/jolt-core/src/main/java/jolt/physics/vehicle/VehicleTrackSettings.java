/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.physics.vehicle;

import jolt.idl.IDLBase;
import jolt.math.ArrayUint;

public class VehicleTrackSettings extends IDLBase {

    private ArrayUint ArrayUint_TEMP_GEN_0;

    static public final VehicleTrackSettings T_01 = new VehicleTrackSettings((byte) 1, (char) 1);

    static public final VehicleTrackSettings T_02 = new VehicleTrackSettings((byte) 1, (char) 1);

    static public final VehicleTrackSettings T_03 = new VehicleTrackSettings((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public VehicleTrackSettings(byte b, char c) {
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
VehicleTrackSettings* nativeObject = (VehicleTrackSettings*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public int get_mDrivenWheel() {
        return internal_native_get_mDrivenWheel(native_address);
    }

    /*[-JNI;-NATIVE]
VehicleTrackSettings* nativeObject = (VehicleTrackSettings*)this_addr;
return nativeObject->mDrivenWheel;
*/
    public static native int internal_native_get_mDrivenWheel(long this_addr);

    public void set_mDrivenWheel(int mDrivenWheel) {
        internal_native_set_mDrivenWheel(native_address, mDrivenWheel);
    }

    /*[-JNI;-NATIVE]
VehicleTrackSettings* nativeObject = (VehicleTrackSettings*)this_addr;
nativeObject->mDrivenWheel = mDrivenWheel;
*/
    public static native void internal_native_set_mDrivenWheel(long this_addr, int mDrivenWheel);

    public ArrayUint get_mWheels() {
        long pointer = internal_native_get_mWheels(native_address);
        if (pointer == 0)
            return null;
        if (ArrayUint_TEMP_GEN_0 == null)
            ArrayUint_TEMP_GEN_0 = new ArrayUint((byte) 1, (char) 1);
        ArrayUint_TEMP_GEN_0.internal_reset(pointer, false);
        return ArrayUint_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
VehicleTrackSettings* nativeObject = (VehicleTrackSettings*)this_addr;
return (jlong)&nativeObject->mWheels;
*/
    public static native long internal_native_get_mWheels(long this_addr);

    public void set_mWheels(ArrayUint mWheels) {
        internal_native_set_mWheels(native_address, (mWheels != null ? mWheels.native_address : 0));
    }

    /*[-JNI;-NATIVE]
VehicleTrackSettings* nativeObject = (VehicleTrackSettings*)this_addr;
nativeObject->mWheels = *((ArrayUint*)mWheels_addr);
*/
    public static native void internal_native_set_mWheels(long this_addr, long mWheels_addr);

    public float get_mInertia() {
        return internal_native_get_mInertia(native_address);
    }

    /*[-JNI;-NATIVE]
VehicleTrackSettings* nativeObject = (VehicleTrackSettings*)this_addr;
return nativeObject->mInertia;
*/
    public static native float internal_native_get_mInertia(long this_addr);

    public void set_mInertia(float mInertia) {
        internal_native_set_mInertia(native_address, mInertia);
    }

    /*[-JNI;-NATIVE]
VehicleTrackSettings* nativeObject = (VehicleTrackSettings*)this_addr;
nativeObject->mInertia = mInertia;
*/
    public static native void internal_native_set_mInertia(long this_addr, float mInertia);

    public float get_mAngularDamping() {
        return internal_native_get_mAngularDamping(native_address);
    }

    /*[-JNI;-NATIVE]
VehicleTrackSettings* nativeObject = (VehicleTrackSettings*)this_addr;
return nativeObject->mAngularDamping;
*/
    public static native float internal_native_get_mAngularDamping(long this_addr);

    public void set_mAngularDamping(float mAngularDamping) {
        internal_native_set_mAngularDamping(native_address, mAngularDamping);
    }

    /*[-JNI;-NATIVE]
VehicleTrackSettings* nativeObject = (VehicleTrackSettings*)this_addr;
nativeObject->mAngularDamping = mAngularDamping;
*/
    public static native void internal_native_set_mAngularDamping(long this_addr, float mAngularDamping);

    public float get_mMaxBrakeTorque() {
        return internal_native_get_mMaxBrakeTorque(native_address);
    }

    /*[-JNI;-NATIVE]
VehicleTrackSettings* nativeObject = (VehicleTrackSettings*)this_addr;
return nativeObject->mMaxBrakeTorque;
*/
    public static native float internal_native_get_mMaxBrakeTorque(long this_addr);

    public void set_mMaxBrakeTorque(float mMaxBrakeTorque) {
        internal_native_set_mMaxBrakeTorque(native_address, mMaxBrakeTorque);
    }

    /*[-JNI;-NATIVE]
VehicleTrackSettings* nativeObject = (VehicleTrackSettings*)this_addr;
nativeObject->mMaxBrakeTorque = mMaxBrakeTorque;
*/
    public static native void internal_native_set_mMaxBrakeTorque(long this_addr, float mMaxBrakeTorque);

    public float get_mDifferentialRatio() {
        return internal_native_get_mDifferentialRatio(native_address);
    }

    /*[-JNI;-NATIVE]
VehicleTrackSettings* nativeObject = (VehicleTrackSettings*)this_addr;
return nativeObject->mDifferentialRatio;
*/
    public static native float internal_native_get_mDifferentialRatio(long this_addr);

    public void set_mDifferentialRatio(float mDifferentialRatio) {
        internal_native_set_mDifferentialRatio(native_address, mDifferentialRatio);
    }

    /*[-JNI;-NATIVE]
VehicleTrackSettings* nativeObject = (VehicleTrackSettings*)this_addr;
nativeObject->mDifferentialRatio = mDifferentialRatio;
*/
    public static native void internal_native_set_mDifferentialRatio(long this_addr, float mDifferentialRatio);
}
