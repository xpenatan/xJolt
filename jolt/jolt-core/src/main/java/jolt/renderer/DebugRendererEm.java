/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.renderer;

import jolt.idl.IDLBase;
import jolt.physics.PhysicsSystem;
import jolt.physics.body.BodyManagerDrawSettings;
import jolt.math.Mat44;
import jolt.core.Color;
import jolt.enums.ECastShadow;
import jolt.enums.EDrawMode;
import jolt.idl.helper.IDLFloatArray;
import jolt.enums.ECullMode;
import jolt.math.Vec3;

public class DebugRendererEm extends IDLBase {

    static private Mat44 Mat44_TEMP_STATIC_GEN_0;

    static private IDLFloatArray IDLFloatArray_TEMP_STATIC_GEN_0;

    static private Color Color_TEMP_STATIC_GEN_0;

    static private Vec3 Vec3_TEMP_STATIC_GEN_0;

    static private Vec3 Vec3_TEMP_STATIC_GEN_1;

    static private Color Color_TEMP_STATIC_GEN_1;

    static private Vec3 Vec3_TEMP_STATIC_GEN_2;

    static private Vec3 Vec3_TEMP_STATIC_GEN_3;

    static private Vec3 Vec3_TEMP_STATIC_GEN_4;

    static private Color Color_TEMP_STATIC_GEN_2;

    static private Vec3 Vec3_TEMP_STATIC_GEN_5;

    static private Color Color_TEMP_STATIC_GEN_3;

    /*[-JNI;-NATIVE]
class DebugRendererImplCustom : public DebugRendererEm {
private:
	JNIEnv* env;
	jobject obj;
public:
	inline static jclass jClassID = 0;
	inline static jmethodID DrawMeshIJJJII_ID = 0;
	inline static jmethodID DrawLineJJJ_ID = 0;
	inline static jmethodID DrawTriangleJJJJI_ID = 0;
	inline static jmethodID DrawText3DJJIJF_ID = 0;

void setupCallback(JNIEnv* env, jobject obj) {
	this->env = env;
	this->obj = env->NewGlobalRef(obj);
	if(DebugRendererImplCustom::jClassID == 0) {
		DebugRendererImplCustom::jClassID = (jclass)env->NewGlobalRef(env->GetObjectClass(obj));
		DebugRendererImplCustom::DrawMeshIJJJII_ID = env->GetMethodID(jClassID, "internal_DrawMesh", "(IJJJII)V");
		DebugRendererImplCustom::DrawLineJJJ_ID = env->GetMethodID(jClassID, "internal_DrawLine", "(JJJ)V");
		DebugRendererImplCustom::DrawTriangleJJJJI_ID = env->GetMethodID(jClassID, "internal_DrawTriangle", "(JJJJI)V");
		DebugRendererImplCustom::DrawText3DJJIJF_ID = env->GetMethodID(jClassID, "internal_DrawText3D", "(JJIJF)V");
	}
}
virtual void DrawMesh(int id, const Mat44& inModelMatrix, const IDLFloatArray* vertices, const Color& inModelColor, ECullMode inCullMode, EDrawMode inDrawMode) {
   env->CallVoidMethod(obj, DebugRendererImplCustom::DrawMeshIJJJII_ID, id, (jlong)&inModelMatrix, (jlong)vertices, (jlong)&inModelColor, inCullMode, inDrawMode);
}
virtual void DrawLine(const Vec3* inFrom, const Vec3* inTo, const Color* inColor) {
   env->CallVoidMethod(obj, DebugRendererImplCustom::DrawLineJJJ_ID, (jlong)inFrom, (jlong)inTo, (jlong)inColor);
}
virtual void DrawTriangle(const Vec3* inV1, const Vec3* inV2, const Vec3* inV3, const Color* inColor, ECastShadow inCastShadow) {
   env->CallVoidMethod(obj, DebugRendererImplCustom::DrawTriangleJJJJI_ID, (jlong)inV1, (jlong)inV2, (jlong)inV3, (jlong)inColor, inCastShadow);
}
virtual void DrawText3D(const Vec3* inPosition, const void* inString, unsigned int inStringLen, const Color* inColor, float inHeight) {
   env->CallVoidMethod(obj, DebugRendererImplCustom::DrawText3DJJIJF_ID, (jlong)inPosition, inString, inStringLen, (jlong)inColor, inHeight);
}
};
*/
    @Deprecated()
    public DebugRendererEm(byte b, char c) {
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
DebugRendererImplCustom* nativeObject = (DebugRendererImplCustom*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void DrawBodies(PhysicsSystem system, BodyManagerDrawSettings inDrawSettings) {
        internal_native_DrawBodies(native_address, (system != null ? system.native_address : 0), (inDrawSettings != null ? inDrawSettings.native_address : 0));
    }

    /*[-JNI;-NATIVE]
DebugRendererEm* nativeObject = (DebugRendererEm*)this_addr;
nativeObject->DrawBodies((PhysicsSystem* )system_addr, (BodyManagerDrawSettings* )inDrawSettings_addr);
*/
    public static native void internal_native_DrawBodies(long this_addr, long system_addr, long inDrawSettings_addr);

    public void DrawBodies(PhysicsSystem system) {
        internal_native_DrawBodies(native_address, (system != null ? system.native_address : 0));
    }

    /*[-JNI;-NATIVE]
DebugRendererEm* nativeObject = (DebugRendererEm*)this_addr;
nativeObject->DrawBodies((PhysicsSystem* )system_addr);
*/
    public static native void internal_native_DrawBodies(long this_addr, long system_addr);

    public void DrawCylinder(Mat44 inMatrix, float inHalfHeight, float inRadius, Color inColor, ECastShadow inCastShadow, EDrawMode inDrawMode) {
        internal_native_DrawCylinder(native_address, (inMatrix != null ? inMatrix.native_address : 0), inHalfHeight, inRadius, (inColor != null ? inColor.native_address : 0), (inCastShadow != null ? inCastShadow.getValue() : 0), (inDrawMode != null ? inDrawMode.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
DebugRendererEm* nativeObject = (DebugRendererEm*)this_addr;
nativeObject->DrawCylinder(*((Mat44* )inMatrix_addr), (float)inHalfHeight, (float)inRadius, *((Color* )inColor_addr), (::ECastShadow)inCastShadow, (::EDrawMode)inDrawMode);
*/
    public static native void internal_native_DrawCylinder(long this_addr, long inMatrix_addr, float inHalfHeight, float inRadius, long inColor_addr, long inCastShadow, long inDrawMode);

    public void DrawCylinder(Mat44 inMatrix, float inHalfHeight, float inRadius, Color inColor, ECastShadow inCastShadow) {
        internal_native_DrawCylinder(native_address, (inMatrix != null ? inMatrix.native_address : 0), inHalfHeight, inRadius, (inColor != null ? inColor.native_address : 0), (inCastShadow != null ? inCastShadow.getValue() : 0));
    }

    /*[-JNI;-NATIVE]
DebugRendererEm* nativeObject = (DebugRendererEm*)this_addr;
nativeObject->DrawCylinder(*((Mat44* )inMatrix_addr), (float)inHalfHeight, (float)inRadius, *((Color* )inColor_addr), (::ECastShadow)inCastShadow);
*/
    public static native void internal_native_DrawCylinder(long this_addr, long inMatrix_addr, float inHalfHeight, float inRadius, long inColor_addr, long inCastShadow);

    public void DrawCylinder(Mat44 inMatrix, float inHalfHeight, float inRadius, Color inColor) {
        internal_native_DrawCylinder(native_address, (inMatrix != null ? inMatrix.native_address : 0), inHalfHeight, inRadius, (inColor != null ? inColor.native_address : 0));
    }

    /*[-JNI;-NATIVE]
DebugRendererEm* nativeObject = (DebugRendererEm*)this_addr;
nativeObject->DrawCylinder(*((Mat44* )inMatrix_addr), (float)inHalfHeight, (float)inRadius, *((Color* )inColor_addr));
*/
    public static native void internal_native_DrawCylinder(long this_addr, long inMatrix_addr, float inHalfHeight, float inRadius, long inColor_addr);

    public DebugRendererEm() {
        long addr = internal_native_create();
        internal_reset(addr, true);
        setupCallback();
    }

    private void setupCallback() {
        internal_native_setupCallback(native_address);
    }

    protected void DrawMesh(int id, Mat44 inModelMatrix, IDLFloatArray vertices, Color inModelColor, ECullMode inCullMode, EDrawMode inDrawMode) {
    }

    private void internal_DrawMesh(int id, long inModelMatrix_addr, long vertices_addr, long inModelColor_addr, int inCullMode_addr, int inDrawMode_addr) {
        if (Mat44_TEMP_STATIC_GEN_0 == null)
            Mat44_TEMP_STATIC_GEN_0 = new Mat44((byte) 1, (char) 1);
        Mat44_TEMP_STATIC_GEN_0.internal_reset(inModelMatrix_addr, false);
        if (IDLFloatArray_TEMP_STATIC_GEN_0 == null)
            IDLFloatArray_TEMP_STATIC_GEN_0 = new IDLFloatArray((byte) 1, (char) 1);
        IDLFloatArray_TEMP_STATIC_GEN_0.internal_reset(vertices_addr, false);
        if (Color_TEMP_STATIC_GEN_0 == null)
            Color_TEMP_STATIC_GEN_0 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_0.internal_reset(inModelColor_addr, false);
        DrawMesh(id, Mat44_TEMP_STATIC_GEN_0, IDLFloatArray_TEMP_STATIC_GEN_0, Color_TEMP_STATIC_GEN_0, ECullMode.MAP.get(inCullMode_addr), EDrawMode.MAP.get(inDrawMode_addr));
    }

    protected void DrawLine(Vec3 inFrom, Vec3 inTo, Color inColor) {
    }

    private void internal_DrawLine(long inFrom_addr, long inTo_addr, long inColor_addr) {
        if (Vec3_TEMP_STATIC_GEN_0 == null)
            Vec3_TEMP_STATIC_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_0.internal_reset(inFrom_addr, false);
        if (Vec3_TEMP_STATIC_GEN_1 == null)
            Vec3_TEMP_STATIC_GEN_1 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_1.internal_reset(inTo_addr, false);
        if (Color_TEMP_STATIC_GEN_1 == null)
            Color_TEMP_STATIC_GEN_1 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_1.internal_reset(inColor_addr, false);
        DrawLine(Vec3_TEMP_STATIC_GEN_0, Vec3_TEMP_STATIC_GEN_1, Color_TEMP_STATIC_GEN_1);
    }

    protected void DrawTriangle(Vec3 inV1, Vec3 inV2, Vec3 inV3, Color inColor, ECastShadow inCastShadow) {
    }

    private void internal_DrawTriangle(long inV1_addr, long inV2_addr, long inV3_addr, long inColor_addr, int inCastShadow_addr) {
        if (Vec3_TEMP_STATIC_GEN_2 == null)
            Vec3_TEMP_STATIC_GEN_2 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_2.internal_reset(inV1_addr, false);
        if (Vec3_TEMP_STATIC_GEN_3 == null)
            Vec3_TEMP_STATIC_GEN_3 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_3.internal_reset(inV2_addr, false);
        if (Vec3_TEMP_STATIC_GEN_4 == null)
            Vec3_TEMP_STATIC_GEN_4 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_4.internal_reset(inV3_addr, false);
        if (Color_TEMP_STATIC_GEN_2 == null)
            Color_TEMP_STATIC_GEN_2 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_2.internal_reset(inColor_addr, false);
        DrawTriangle(Vec3_TEMP_STATIC_GEN_2, Vec3_TEMP_STATIC_GEN_3, Vec3_TEMP_STATIC_GEN_4, Color_TEMP_STATIC_GEN_2, ECastShadow.MAP.get(inCastShadow_addr));
    }

    protected void DrawText3D(Vec3 inPosition, long inString, int inStringLen, Color inColor, float inHeight) {
    }

    private void internal_DrawText3D(long inPosition_addr, long inString, int inStringLen, long inColor_addr, float inHeight) {
        if (Vec3_TEMP_STATIC_GEN_5 == null)
            Vec3_TEMP_STATIC_GEN_5 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_STATIC_GEN_5.internal_reset(inPosition_addr, false);
        if (Color_TEMP_STATIC_GEN_3 == null)
            Color_TEMP_STATIC_GEN_3 = new Color((byte) 1, (char) 1);
        Color_TEMP_STATIC_GEN_3.internal_reset(inColor_addr, false);
        DrawText3D(Vec3_TEMP_STATIC_GEN_5, inString, inStringLen, Color_TEMP_STATIC_GEN_3, inHeight);
    }

    /*[-JNI;-NATIVE]
return (jlong)new DebugRendererImplCustom();
*/
    public static native long internal_native_create();

    /*[-JNI;-NATIVE]
DebugRendererImplCustom* nativeObject = (DebugRendererImplCustom*)this_addr;
nativeObject->setupCallback(env, object);
*/
    public native void internal_native_setupCallback(long this_addr);
}
