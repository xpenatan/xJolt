/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package jolt.skeleton;

import jolt.idl.IDLBase;
import jolt.math.Mat44;
import jolt.math.Vec3;
import jolt.math.Quat;

public class SkeletalAnimationJointState extends IDLBase {

    private Mat44 Mat44_TEMP_GEN_0;

    private Vec3 Vec3_TEMP_GEN_0;

    private Quat Quat_TEMP_GEN_0;

    static public final SkeletalAnimationJointState T_01 = new SkeletalAnimationJointState((byte) 1, (char) 1);

    static public final SkeletalAnimationJointState T_02 = new SkeletalAnimationJointState((byte) 1, (char) 1);

    static public final SkeletalAnimationJointState T_03 = new SkeletalAnimationJointState((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public SkeletalAnimationJointState(byte b, char c) {
    }

    protected void deleteNative() {
        internal_native_deleteNative(native_address);
    }

    /*[-JNI;-NATIVE]
SkeletalAnimationJointState* nativeObject = (SkeletalAnimationJointState*)this_addr;
delete nativeObject;
*/
    public static native void internal_native_deleteNative(long this_addr);

    public void FromMatrix(Mat44 inMatrix) {
        internal_native_FromMatrix(native_address, (inMatrix != null ? inMatrix.native_address : 0));
    }

    /*[-JNI;-NATIVE]
SkeletalAnimationJointState* nativeObject = (SkeletalAnimationJointState*)this_addr;
nativeObject->FromMatrix(*((Mat44* )inMatrix_addr));
*/
    public static native void internal_native_FromMatrix(long this_addr, long inMatrix_addr);

    public Mat44 ToMatrix() {
        long pointer = internal_native_ToMatrix(native_address);
        if (pointer == 0)
            return null;
        if (Mat44_TEMP_GEN_0 == null)
            Mat44_TEMP_GEN_0 = new Mat44((byte) 1, (char) 1);
        Mat44_TEMP_GEN_0.internal_reset(pointer, false);
        return Mat44_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SkeletalAnimationJointState* nativeObject = (SkeletalAnimationJointState*)this_addr;
static Mat44 copy_addr;
copy_addr = nativeObject->ToMatrix();
return (jlong)&copy_addr;*/
    public static native long internal_native_ToMatrix(long this_addr);

    public Vec3 get_mTranslation() {
        long pointer = internal_native_get_mTranslation(native_address);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SkeletalAnimationJointState* nativeObject = (SkeletalAnimationJointState*)this_addr;
return (jlong)&nativeObject->mTranslation;
*/
    public static native long internal_native_get_mTranslation(long this_addr);

    public void set_mTranslation(Vec3 mTranslation) {
        internal_native_set_mTranslation(native_address, (mTranslation != null ? mTranslation.native_address : 0));
    }

    /*[-JNI;-NATIVE]
SkeletalAnimationJointState* nativeObject = (SkeletalAnimationJointState*)this_addr;
nativeObject->mTranslation = *((Vec3*)mTranslation_addr);
*/
    public static native void internal_native_set_mTranslation(long this_addr, long mTranslation_addr);

    public Quat get_mRotation() {
        long pointer = internal_native_get_mRotation(native_address);
        if (pointer == 0)
            return null;
        if (Quat_TEMP_GEN_0 == null)
            Quat_TEMP_GEN_0 = new Quat((byte) 1, (char) 1);
        Quat_TEMP_GEN_0.internal_reset(pointer, false);
        return Quat_TEMP_GEN_0;
    }

    /*[-JNI;-NATIVE]
SkeletalAnimationJointState* nativeObject = (SkeletalAnimationJointState*)this_addr;
return (jlong)&nativeObject->mRotation;
*/
    public static native long internal_native_get_mRotation(long this_addr);

    public void set_mRotation(Quat mRotation) {
        internal_native_set_mRotation(native_address, (mRotation != null ? mRotation.native_address : 0));
    }

    /*[-JNI;-NATIVE]
SkeletalAnimationJointState* nativeObject = (SkeletalAnimationJointState*)this_addr;
nativeObject->mRotation = *((Quat*)mRotation_addr);
*/
    public static native void internal_native_set_mRotation(long this_addr, long mRotation_addr);
}
