/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package gen.jolt.physics.collision.shape;

import gen.jolt.math.Vec3;
import gen.jolt.math.FloatMemRef;
import gen.jolt.core.TempAllocator;
import gen.jolt.math.Uint8MemRef;
import gen.jolt.physics.collision.PhysicsMaterialList;

public class HeightFieldShape extends Shape {

    private Vec3 Vec3_TEMP_GEN_0;

    static public final HeightFieldShape T_01 = new HeightFieldShape((byte) 1, (char) 1);

    static public final HeightFieldShape T_02 = new HeightFieldShape((byte) 1, (char) 1);

    static public final HeightFieldShape T_03 = new HeightFieldShape((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public HeightFieldShape(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public int GetSampleCount() {
        return internal_native_GetSampleCount(native_address);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.HeightFieldShape);
var returnedJSObj = jsObj.GetSampleCount();
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.HeightFieldShape);var returnedJSObj = jsObj.GetSampleCount();return returnedJSObj;")
    public static native int internal_native_GetSampleCount(int this_addr);

    public int GetBlockSize() {
        return internal_native_GetBlockSize(native_address);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.HeightFieldShape);
var returnedJSObj = jsObj.GetBlockSize();
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.HeightFieldShape);var returnedJSObj = jsObj.GetBlockSize();return returnedJSObj;")
    public static native int internal_native_GetBlockSize(int this_addr);

    public Vec3 GetPosition(int inX, int inY) {
        int pointer = internal_native_GetPosition(native_address, inX, inY);
        if (pointer == 0)
            return null;
        if (Vec3_TEMP_GEN_0 == null)
            Vec3_TEMP_GEN_0 = new Vec3((byte) 1, (char) 1);
        Vec3_TEMP_GEN_0.internal_reset(pointer, false);
        return Vec3_TEMP_GEN_0;
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.HeightFieldShape);
var returnedJSObj = jsObj.GetPosition(inX, inY);
if(!returnedJSObj.hasOwnProperty('ptr')) return 0; 
return jolt.getPointer(returnedJSObj);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inX", "inY"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.HeightFieldShape);var returnedJSObj = jsObj.GetPosition(inX, inY);if(!returnedJSObj.hasOwnProperty('ptr')) return 0; return jolt.getPointer(returnedJSObj);")
    public static native int internal_native_GetPosition(int this_addr, int inX, int inY);

    public boolean IsNoCollision(int inX, int inY) {
        return internal_native_IsNoCollision(native_address, inX, inY);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.HeightFieldShape);
var returnedJSObj = jsObj.IsNoCollision(inX, inY);
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inX", "inY"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.HeightFieldShape);var returnedJSObj = jsObj.IsNoCollision(inX, inY);return returnedJSObj;")
    public static native boolean internal_native_IsNoCollision(int this_addr, int inX, int inY);

    public float GetMinHeightValue() {
        return internal_native_GetMinHeightValue(native_address);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.HeightFieldShape);
var returnedJSObj = jsObj.GetMinHeightValue();
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.HeightFieldShape);var returnedJSObj = jsObj.GetMinHeightValue();return returnedJSObj;")
    public static native float internal_native_GetMinHeightValue(int this_addr);

    public float GetMaxHeightValue() {
        return internal_native_GetMaxHeightValue(native_address);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.HeightFieldShape);
var returnedJSObj = jsObj.GetMaxHeightValue();
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.HeightFieldShape);var returnedJSObj = jsObj.GetMaxHeightValue();return returnedJSObj;")
    public static native float internal_native_GetMaxHeightValue(int this_addr);

    public void GetHeights(int inX, int inY, int inSizeX, int inSizeY, FloatMemRef outHeights, int inHeightsStride) {
        internal_native_GetHeights(native_address, inX, inY, inSizeX, inSizeY, (outHeights != null ? outHeights.native_address : 0), inHeightsStride);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.HeightFieldShape);
jsObj.GetHeights(inX, inY, inSizeX, inSizeY, outHeights_addr, inHeightsStride);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inX", "inY", "inSizeX", "inSizeY", "outHeights_addr", "inHeightsStride"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.HeightFieldShape);jsObj.GetHeights(inX, inY, inSizeX, inSizeY, outHeights_addr, inHeightsStride);")
    public static native void internal_native_GetHeights(int this_addr, int inX, int inY, int inSizeX, int inSizeY, int outHeights_addr, int inHeightsStride);

    public void SetHeights(int inX, int inY, int inSizeX, int inSizeY, FloatMemRef inHeights, int inHeightsStride, TempAllocator inAllocator, float inActiveEdgeCosThresholdAngle) {
        internal_native_SetHeights(native_address, inX, inY, inSizeX, inSizeY, (inHeights != null ? inHeights.native_address : 0), inHeightsStride, (inAllocator != null ? inAllocator.native_address : 0), inActiveEdgeCosThresholdAngle);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.HeightFieldShape);
jsObj.SetHeights(inX, inY, inSizeX, inSizeY, inHeights_addr, inHeightsStride, inAllocator_addr, inActiveEdgeCosThresholdAngle);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inX", "inY", "inSizeX", "inSizeY", "inHeights_addr", "inHeightsStride", "inAllocator_addr", "inActiveEdgeCosThresholdAngle"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.HeightFieldShape);jsObj.SetHeights(inX, inY, inSizeX, inSizeY, inHeights_addr, inHeightsStride, inAllocator_addr, inActiveEdgeCosThresholdAngle);")
    public static native void internal_native_SetHeights(int this_addr, int inX, int inY, int inSizeX, int inSizeY, int inHeights_addr, int inHeightsStride, int inAllocator_addr, float inActiveEdgeCosThresholdAngle);

    public void SetHeights(int inX, int inY, int inSizeX, int inSizeY, FloatMemRef inHeights, int inHeightsStride, TempAllocator inAllocator) {
        internal_native_SetHeights(native_address, inX, inY, inSizeX, inSizeY, (inHeights != null ? inHeights.native_address : 0), inHeightsStride, (inAllocator != null ? inAllocator.native_address : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.HeightFieldShape);
jsObj.SetHeights(inX, inY, inSizeX, inSizeY, inHeights_addr, inHeightsStride, inAllocator_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inX", "inY", "inSizeX", "inSizeY", "inHeights_addr", "inHeightsStride", "inAllocator_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.HeightFieldShape);jsObj.SetHeights(inX, inY, inSizeX, inSizeY, inHeights_addr, inHeightsStride, inAllocator_addr);")
    public static native void internal_native_SetHeights(int this_addr, int inX, int inY, int inSizeX, int inSizeY, int inHeights_addr, int inHeightsStride, int inAllocator_addr);

    public void GetMaterials(int inX, int inY, int inSizeX, int inSizeY, Uint8MemRef outMaterials, int inMaterialsStride) {
        internal_native_GetMaterials(native_address, inX, inY, inSizeX, inSizeY, (outMaterials != null ? outMaterials.native_address : 0), inMaterialsStride);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.HeightFieldShape);
jsObj.GetMaterials(inX, inY, inSizeX, inSizeY, outMaterials_addr, inMaterialsStride);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inX", "inY", "inSizeX", "inSizeY", "outMaterials_addr", "inMaterialsStride"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.HeightFieldShape);jsObj.GetMaterials(inX, inY, inSizeX, inSizeY, outMaterials_addr, inMaterialsStride);")
    public static native void internal_native_GetMaterials(int this_addr, int inX, int inY, int inSizeX, int inSizeY, int outMaterials_addr, int inMaterialsStride);

    public boolean SetMaterials(int inX, int inY, int inSizeX, int inSizeY, Uint8MemRef inMaterials, int inMaterialsStride, PhysicsMaterialList inMaterialList, TempAllocator inAllocator) {
        return internal_native_SetMaterials(native_address, inX, inY, inSizeX, inSizeY, (inMaterials != null ? inMaterials.native_address : 0), inMaterialsStride, (inMaterialList != null ? inMaterialList.native_address : 0), (inAllocator != null ? inAllocator.native_address : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.HeightFieldShape);
var returnedJSObj = jsObj.SetMaterials(inX, inY, inSizeX, inSizeY, inMaterials_addr, inMaterialsStride, inMaterialList_addr, inAllocator_addr);
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inX", "inY", "inSizeX", "inSizeY", "inMaterials_addr", "inMaterialsStride", "inMaterialList_addr", "inAllocator_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.HeightFieldShape);var returnedJSObj = jsObj.SetMaterials(inX, inY, inSizeX, inSizeY, inMaterials_addr, inMaterialsStride, inMaterialList_addr, inAllocator_addr);return returnedJSObj;")
    public static native boolean internal_native_SetMaterials(int this_addr, int inX, int inY, int inSizeX, int inSizeY, int inMaterials_addr, int inMaterialsStride, int inMaterialList_addr, int inAllocator_addr);
}
