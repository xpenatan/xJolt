/*-------------------------------------------------------
 * This file was generated by JParser
 *
 * Do not make changes to this file
 *-------------------------------------------------------*/
package gen.jolt.physics.constraints;

public class RackAndPinionConstraint extends TwoBodyConstraint {

    static public final RackAndPinionConstraint T_01 = new RackAndPinionConstraint((byte) 1, (char) 1);

    static public final RackAndPinionConstraint T_02 = new RackAndPinionConstraint((byte) 1, (char) 1);

    static public final RackAndPinionConstraint T_03 = new RackAndPinionConstraint((byte) 1, (char) 1);

    /**
     * Dummy constructor, used internally to creates objects without C++ pointer
     */
    @Deprecated()
    public RackAndPinionConstraint(byte b, char c) {
        super((byte) 1, (char) 1);
    }

    public void SetConstraints(Constraint inPinion, Constraint inRack) {
        internal_native_SetConstraints(native_address, (inPinion != null ? inPinion.native_address : 0), (inRack != null ? inRack.native_address : 0));
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.RackAndPinionConstraint);
jsObj.SetConstraints(inPinion_addr, inRack_addr);
*/
    @org.teavm.jso.JSBody(params = {"this_addr", "inPinion_addr", "inRack_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.RackAndPinionConstraint);jsObj.SetConstraints(inPinion_addr, inRack_addr);")
    public static native void internal_native_SetConstraints(int this_addr, int inPinion_addr, int inRack_addr);

    public float GetTotalLambda() {
        return internal_native_GetTotalLambda(native_address);
    }

    /*[-TEAVM;-NATIVE]
var jsObj = jolt.wrapPointer(this_addr, jolt.RackAndPinionConstraint);
var returnedJSObj = jsObj.GetTotalLambda();
return returnedJSObj;
*/
    @org.teavm.jso.JSBody(params = {"this_addr"}, script = "var jsObj = jolt.wrapPointer(this_addr, jolt.RackAndPinionConstraint);var returnedJSObj = jsObj.GetTotalLambda();return returnedJSObj;")
    public static native float internal_native_GetTotalLambda(int this_addr);
}
